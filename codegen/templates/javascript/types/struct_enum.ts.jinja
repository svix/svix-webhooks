{% from "types/macros.ts.jinja" import field_from_json, field_to_json -%}
{% for c in referenced_components -%}
import {
    {{ c | to_upper_camel_case }},
    {{ c | to_upper_camel_case }}Serializer,
} from './{{ c | to_lower_camel_case }}';
{% endfor -%}

{% set type_name = type.name | to_upper_camel_case -%}
{% set disc_field_name = type.discriminator_field | to_lower_camel_case -%}
{% set content_field_name = type.content_field | to_lower_camel_case -%}

interface _{{ type_name }}Fields {
    {% with fields = type.fields -%}
    {% include "types/struct_fields.ts.jinja" -%}
    {% endwith -%}
}

{# export the types for enum variants without a config -#}
{% for variant in type.variants -%}
    {% if variant.type == "ref" and variant.schema_ref is not defined -%}
/* eslint @typescript-eslint/no-empty-object-type: 0 */
interface {{ type_name }}{{ variant.name | to_upper_camel_case }}{{ type.content_field | to_upper_camel_case }} {}
    {% endif -%}
{% endfor -%}

{% for variant in type.variants %}
interface {{ type_name }}{{ variant.name | to_upper_camel_case }} {
    {{ disc_field_name }}: '{{ variant.name }}';
    {% if variant.type == "ref" -%}
        {% if variant.schema_ref is not defined -%}
            {{ content_field_name }}?:  {{ type_name }}{{ variant.name | to_upper_camel_case }}{{ type.content_field | to_upper_camel_case }}
        {% else -%}
            {{ content_field_name }}: {{ variant.schema_ref | to_upper_camel_case }}
        {% endif -%}
    {%- elif variant.type == "struct" -%}
        {{ content_field_name }}: {
            {% with fields = variant.fields -%}
            {% include "types/struct_fields.ts.jinja" -%}
            {% endwith -%}
        }
    {% endif -%}
}
{% endfor %}

{{ doc_comment }}
export type {{ type_name }} = _{{ type_name }}Fields & (
    {%- for variant in type.variants -%}
        | {{ type_name }}{{ variant.name | to_upper_camel_case }}
    {% endfor -%}
);

export const {{ type.name | to_upper_camel_case }}Serializer = {
    _fromJsonObject(object: any): {{ type.name | to_upper_camel_case }} {
        const discriminator = object["{{ type.discriminator_field }}"];
        {% if type.variants | has_non_ref_struct_enum_variants -%}
        const content = object["{{ type.content_field }}"];
        {% endif -%}

        function getContent({{ disc_field_name }}: string): any {
            switch ({{ disc_field_name }}) {
            {%- for variant in type.variants %}
                {% if variant.type == "ref" -%}
                    {% if variant.schema_ref is defined -%}
                    case '{{ variant.name }}':
                        return {{ variant.schema_ref | to_upper_camel_case }}Serializer._fromJsonObject(
                                object['{{ type.content_field }}']
                            );
                    {%- else -%}
                    case '{{ variant.name }}':
                        return {}
                    {%- endif -%}
                {% else -%}
                    case "{{ variant.name }}":
                        return { 
                            {%- for field  in variant.fields -%}
                                {%- set field_expr %}content['{{ field.name }}']{% endset -%}
                                {{ field.name | to_lower_camel_case }}: {{ field_from_json(field_expr, field.type, field.required) }},
                            {%- endfor -%}
                        };
                {%- endif -%}
            {%- endfor -%}
                default:
                    throw new Error(`Unexpected {{ type.discriminator_field }}: ${ {{ disc_field_name}} }`);
            }

        }
        return {
            "{{ disc_field_name }}": discriminator,
            {{ content_field_name }}:getContent(discriminator),
            {% for field in type.fields -%}
                {% set field_expr %}object['{{ field.name }}']{% endset -%}
                {{ field.name | to_lower_camel_case }}: {{ field_from_json(field_expr, field.type, field.required) }},
            {% endfor -%}
        };
    },

    _toJsonObject(self: {{ type.name | to_upper_camel_case }}): any {
        let {{ content_field_name }};
        switch (self.{{ disc_field_name }}) {
        {%- for variant in type.variants %}
            {%- if variant.type == "ref" -%}
                {%- if variant.schema_ref is defined %}
                case '{{ variant.name }}':
                    {{ content_field_name }} =
                        {{ variant.schema_ref | to_upper_camel_case }}Serializer._toJsonObject(
                            self.{{ content_field_name }}
                        );
                    break;
                {%- else -%}
                case '{{ variant.name }}':
                    {{ content_field_name }} = {}
                    break;
                {%- endif %}
            {%- else -%}
                case '{{ variant.name }}':
                    {{ content_field_name }} = {
                        {%- for field in variant.fields -%}
                            {% set field_expr %}self.{{ content_field_name }}.{{ field.name | to_lower_camel_case }}{% endset -%}
                            '{{ field.name }}': {{ field_to_json(field_expr, field.type, field.required) }},
                        {%- endfor -%} }
                    break;
            {%- endif -%}
        {%- endfor -%}
        }

        return {
            '{{ type.discriminator_field }}': self.{{ disc_field_name }},
            '{{ type.content_field }}': {{ content_field_name }},
            {% for field in type.fields -%}
                {% set field_expr %}self.{{ field.name | to_lower_camel_case }}{% endset -%}
                '{{ field.name }}': {{ field_to_json(field_expr, field.type, field.required) }},
            {% endfor -%}
        };
    }
}
