{
    "components": {
        "schemas": {
            "ActiveApplicationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "endpoints": {
                        "items": {
                            "$ref": "#/components/schemas/ActiveEndpointOut"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "example": "My first application",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "endpoints",
                    "id",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "ActiveEndpointOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "updatedAt",
                    "url"
                ],
                "type": "object"
            },
            "AdobeSignConfig": {
                "properties": {
                    "clientId": {
                        "type": "string"
                    }
                },
                "required": [
                    "clientId"
                ],
                "type": "object"
            },
            "AdobeSignConfigOut": {
                "type": "object"
            },
            "AdobeSignResponse": {
                "properties": {
                    "xAdobeSignClientId": {
                        "type": "string"
                    }
                },
                "required": [
                    "xAdobeSignClientId"
                ],
                "type": "object"
            },
            "AggregateEventTypesOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "AggregatedEventTypes": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "explicitlySubscribedEventTypes": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "hasCatchAllEndpoint": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "appId",
                    "explicitlySubscribedEventTypes",
                    "hasCatchAllEndpoint"
                ],
                "type": "object"
            },
            "AirwallexConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "AirwallexConfigOut": {
                "type": "object"
            },
            "ApiTokenCensoredOut": {
                "properties": {
                    "censoredToken": {
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expiresAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ApplicationToken's ID.",
                        "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^key_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "censoredToken",
                    "createdAt",
                    "id"
                ],
                "type": "object"
            },
            "ApiTokenExpireIn": {
                "properties": {
                    "expiry": {
                        "default": 0,
                        "description": "How many seconds until the old key is expired.",
                        "format": "int32",
                        "maximum": 259200,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ApiTokenIn": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "ApiTokenOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expiresAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The GlobalApplicationToken's ID.",
                        "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 38,
                        "minLength": 38,
                        "pattern": "^global_key_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "token"
                ],
                "type": "object"
            },
            "ApiTokenUpdate": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "AppPortalAccessIn": {
                "properties": {
                    "application": {
                        "$ref": "#/components/schemas/ApplicationIn",
                        "description": "Optionally creates a new application while generating the access link.\n\nIf the application id or uid that is used in the path already exists, this argument is ignored.",
                        "nullable": true
                    },
                    "expiry": {
                        "default": 604800,
                        "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
                        "format": "uint64",
                        "maximum": 604800,
                        "minimum": 3600,
                        "nullable": true,
                        "type": "integer"
                    },
                    "featureFlags": {
                        "description": "The set of feature flags the created token will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "readOnly": {
                        "description": "Whether the app portal should be in read-only mode.",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sessionId": {
                        "description": "An optional session ID to attach to the token.\n\nWhen expiring tokens with \"Expire All\", you can include the session ID to only expire tokens that were created with that session ID.",
                        "example": "user_1FB8",
                        "maxLength": 64,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9@_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AppPortalAccessOut": {
                "properties": {
                    "token": {
                        "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "url"
                ],
                "type": "object"
            },
            "AppUsageStatsIn": {
                "properties": {
                    "appIds": {
                        "description": "Specific app IDs or UIDs to aggregate stats for.\n\nNote that if none of the given IDs or UIDs are resolved, a 422 response will be given.",
                        "items": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "since",
                    "until"
                ],
                "type": "object"
            },
            "AppUsageStatsOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    },
                    "unresolvedAppIds": {
                        "description": "Any app IDs or UIDs received in the request that weren't found.\n\nStats will be produced for all the others.",
                        "items": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task",
                    "unresolvedAppIds"
                ],
                "type": "object"
            },
            "ApplicationAlertEvent": {
                "enum": [
                    "endpoint.disabled"
                ],
                "type": "string"
            },
            "ApplicationIn": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "example": "My first application",
                        "minLength": 1,
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the application.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "ApplicationMessageFailure": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "reason"
                ],
                "type": "object"
            },
            "ApplicationMessageIdPair": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "msgId"
                ],
                "type": "object"
            },
            "ApplicationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "example": "My first application",
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "ApplicationPatch": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ApplicationStats": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "messageDestinations": {
                        "format": "int",
                        "type": "integer"
                    }
                },
                "required": [
                    "appId",
                    "messageDestinations"
                ],
                "type": "object"
            },
            "ApplicationStatsOut": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "messageDestinations": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "appId",
                    "messageDestinations"
                ],
                "type": "object"
            },
            "ApplicationTokenExpireIn": {
                "properties": {
                    "expiry": {
                        "description": "How many seconds until the old key is expired.",
                        "example": 60,
                        "format": "int64",
                        "maximum": 259200,
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sessionIds": {
                        "description": "An optional list of session ids.\n\nIf any session ids are specified, only Application tokens created with that session id will be expired.",
                        "items": {
                            "example": "user_1FB8",
                            "maxLength": 64,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9@_-]+$",
                            "type": "string"
                        },
                        "maxItems": 1000,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AttemptStatisticsData": {
                "properties": {
                    "failureCount": {
                        "items": {
                            "format": "int",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "successCount": {
                        "items": {
                            "format": "int",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AttemptStatisticsResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AttemptStatisticsData"
                    },
                    "endDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "period": {
                        "$ref": "#/components/schemas/StatisticsPeriod"
                    },
                    "startDate": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "endDate",
                    "period",
                    "startDate"
                ],
                "type": "object"
            },
            "AzureBlobStorageConfig": {
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessKey",
                    "account",
                    "container"
                ],
                "type": "object"
            },
            "BackgroundTaskFinishedEvent": {
                "description": "Sent when a background task is finished.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/BackgroundTaskFinishedEvent2"
                    },
                    "type": {
                        "default": "background_task.finished",
                        "enum": [
                            "background_task.finished"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "BackgroundTaskFinishedEvent2": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Data"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    },
                    "taskId": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "status",
                    "task",
                    "taskId"
                ],
                "type": "object"
            },
            "BackgroundTaskOut": {
                "properties": {
                    "data": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "data",
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "BackgroundTaskStatus": {
                "enum": [
                    "running",
                    "finished",
                    "failed"
                ],
                "type": "string"
            },
            "BackgroundTaskType": {
                "enum": [
                    "endpoint.replay",
                    "endpoint.recover",
                    "application.stats",
                    "message.broadcast",
                    "sdk.generate",
                    "event-type.aggregate",
                    "application.purge_content"
                ],
                "type": "string"
            },
            "BorderRadiusConfig": {
                "properties": {
                    "button": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    },
                    "card": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    },
                    "input": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "BorderRadiusEnum": {
                "enum": [
                    "none",
                    "lg",
                    "md",
                    "sm",
                    "full"
                ],
                "type": "string"
            },
            "CheckbookConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "CheckbookConfigOut": {
                "type": "object"
            },
            "ClientSecretJwtParamsIn": {
                "properties": {
                    "secretBase64": {
                        "description": "The base64-encoded secret used for signing the JWT.",
                        "type": "string"
                    },
                    "secretId": {
                        "description": "Optional secret identifier. If supplied, this will be populated in the JWT header in the `kid` field.",
                        "nullable": true,
                        "type": "string"
                    },
                    "signingAlgorithm": {
                        "$ref": "#/components/schemas/OauthJwsSigningAlgorithm",
                        "description": "The algorithm used to sign the JWT."
                    },
                    "tokenExpirySecs": {
                        "description": "Optional number of seconds after which the JWT should expire. Defaults to 300 seconds.",
                        "format": "uint64",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "secretBase64",
                    "signingAlgorithm"
                ],
                "type": "object"
            },
            "CompletionChoice": {
                "properties": {
                    "finish_reason": {
                        "type": "string"
                    },
                    "index": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "message": {
                        "$ref": "#/components/schemas/CompletionMessage"
                    }
                },
                "required": [
                    "finish_reason",
                    "index",
                    "message"
                ],
                "type": "object"
            },
            "CompletionMessage": {
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "role"
                ],
                "type": "object"
            },
            "ConnectorIn": {
                "properties": {
                    "description": {
                        "default": "",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "description": "Deprecated - prefer featureFlags instead.",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "instructions": {
                        "default": "",
                        "type": "string"
                    },
                    "instructionsLink": {
                        "default": null,
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind",
                        "default": "Custom"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "transformation": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    }
                },
                "required": [
                    "logo",
                    "name",
                    "transformation"
                ],
                "type": "object"
            },
            "ConnectorKind": {
                "enum": [
                    "Custom",
                    "CloseCRM",
                    "CustomerIO",
                    "Discord",
                    "Hubspot",
                    "Inngest",
                    "Loops",
                    "Resend",
                    "Salesforce",
                    "Segment",
                    "Sendgrid",
                    "Slack",
                    "Teams",
                    "TriggerDev",
                    "Windmill",
                    "Zapier"
                ],
                "type": "string"
            },
            "ConnectorOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Connector's ID.",
                        "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 34,
                        "minLength": 34,
                        "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "instructions": {
                        "type": "string"
                    },
                    "instructionsLink": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "description": "The Environment's ID.",
                        "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^org_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "transformation": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "instructions",
                    "kind",
                    "logo",
                    "name",
                    "orgId",
                    "transformation",
                    "updatedAt"
                ],
                "type": "object"
            },
            "ConnectorPatch": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "instructions": {
                        "type": "string"
                    },
                    "instructionsLink": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "transformation": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ConnectorUpdate": {
                "properties": {
                    "description": {
                        "default": "",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "instructions": {
                        "default": "",
                        "type": "string"
                    },
                    "instructionsLink": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind",
                        "default": "Custom"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "default": "",
                        "type": "string"
                    },
                    "transformation": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    }
                },
                "required": [
                    "logo",
                    "transformation"
                ],
                "type": "object"
            },
            "CountOut": {
                "properties": {
                    "approximated": {
                        "description": "There's a ceiling to how many attempts we count. When the limit is reached, this will be `true` to indicate the actual count is higher than given.",
                        "type": "boolean"
                    },
                    "count": {
                        "description": "The count of attempts matching the query.",
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "approximated",
                    "count"
                ],
                "type": "object"
            },
            "CreateStreamIn": {
                "properties": {
                    "events": {
                        "items": {
                            "$ref": "#/components/schemas/EventIn"
                        },
                        "type": "array"
                    },
                    "stream": {
                        "$ref": "#/components/schemas/StreamIn",
                        "description": "Optionally creates a new Stream alongside the events.\n\nIf the stream id or uid that is used in the path already exists, this argument is ignored.",
                        "nullable": true
                    }
                },
                "required": [
                    "events"
                ],
                "type": "object"
            },
            "CreateStreamOut": {
                "type": "object"
            },
            "CreateTokenIn": {
                "properties": {
                    "expiry": {
                        "description": "How long the token will be valid for, in seconds.",
                        "format": "uint64",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the token.",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "CronConfig": {
                "properties": {
                    "contentType": {
                        "description": "Override the default content-type.\n\nRecommended if the payload is not JSON.",
                        "nullable": true,
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    },
                    "schedule": {
                        "type": "string"
                    }
                },
                "required": [
                    "payload",
                    "schedule"
                ],
                "type": "object"
            },
            "CustomColorPalette": {
                "properties": {
                    "backgroundHover": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "backgroundPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "backgroundSecondary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "buttonPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "interactiveAccent": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "navigationAccent": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "primary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "textDanger": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "textPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CustomStringsOverride": {
                "properties": {
                    "channelsHelp": {
                        "nullable": true,
                        "type": "string"
                    },
                    "channelsMany": {
                        "nullable": true,
                        "type": "string"
                    },
                    "channelsOne": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CustomThemeOverride": {
                "properties": {
                    "borderRadius": {
                        "$ref": "#/components/schemas/BorderRadiusConfig",
                        "nullable": true
                    },
                    "fontSize": {
                        "$ref": "#/components/schemas/FontSizeConfig",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "DashboardAccessOut": {
                "properties": {
                    "token": {
                        "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "url"
                ],
                "type": "object"
            },
            "Data": {
                "anyOf": [
                    {
                        "properties": {
                            "messages_sent": {
                                "format": "uint",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "messages_sent"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "messages_sent": {
                                "format": "uint",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "messages_sent"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "app_stats": {
                                "items": {
                                    "$ref": "#/components/schemas/ApplicationStatsOut"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "app_stats"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "messages_created": {
                                "items": {
                                    "$ref": "#/components/schemas/ApplicationMessageIdPair"
                                },
                                "type": "array"
                            },
                            "messages_failed": {
                                "items": {
                                    "$ref": "#/components/schemas/ApplicationMessageFailure"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "messages_created",
                            "messages_failed"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "event_types": {
                                "items": {
                                    "$ref": "#/components/schemas/AggregatedEventTypes"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "event_types"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "messages_purged": {
                                "format": "uint",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "messages_purged"
                        ],
                        "type": "object"
                    }
                ]
            },
            "DocusignConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DocusignConfigOut": {
                "type": "object"
            },
            "Duration": {
                "properties": {
                    "nanos": {
                        "format": "uint32",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "secs": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "nanos",
                    "secs"
                ],
                "type": "object"
            },
            "EasypostConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EasypostConfigOut": {
                "type": "object"
            },
            "EmptyResponse": {
                "type": "object"
            },
            "EndpointCreatedEvent": {
                "description": "Sent when an endpoint is created.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointCreatedEventData"
                    },
                    "type": {
                        "default": "endpoint.created",
                        "enum": [
                            "endpoint.created"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointCreatedEventData": {
                "description": "Sent when an endpoint is created, updated, or deleted",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDeletedEvent": {
                "description": "Sent when an endpoint is deleted.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointDeletedEventData"
                    },
                    "type": {
                        "default": "endpoint.deleted",
                        "enum": [
                            "endpoint.deleted"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointDeletedEventData": {
                "description": "Sent when an endpoint is created, updated, or deleted",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDisabledEvent": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointDisabledEventData"
                    },
                    "type": {
                        "default": "endpoint.disabled",
                        "enum": [
                            "endpoint.disabled"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointDisabledEventData": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "failSince": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/EndpointDisabledTrigger",
                        "default": "automatic"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDisabledTrigger": {
                "enum": [
                    "manual",
                    "automatic"
                ],
                "type": "string"
            },
            "EndpointEnabledEvent": {
                "description": "Sent when an endpoint has been enabled.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointEnabledEventData"
                    },
                    "type": {
                        "default": "endpoint.enabled",
                        "enum": [
                            "endpoint.enabled"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointEnabledEventData": {
                "description": "Sent when an endpoint has been enabled.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointHeadersIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "EndpointHeadersOut": {
                "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field.",
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    },
                    "sensitive": {
                        "example": [
                            "Authorization"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "headers",
                    "sensitive"
                ],
                "type": "object"
            },
            "EndpointHeadersPatchIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "nullable": true,
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "EndpointIn": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "default": 1,
                        "deprecated": true,
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "EndpointMessageOut": {
                "description": "A model containing information on a given message plus additional fields on the last attempt for that message.",
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "nextAttempt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "status",
                    "timestamp"
                ],
                "type": "object"
            },
            "EndpointMtlsConfigIn": {
                "properties": {
                    "identity": {
                        "description": "A PEM encoded private key and X509 certificate to identify the webhook sender.",
                        "type": "string"
                    },
                    "serverCaCert": {
                        "description": "A PEM encoded X509 certificate used to verify the webhook receiver's certificate.",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "identity"
                ],
                "type": "object"
            },
            "EndpointMtlsConfigOut": {
                "properties": {
                    "serverCaCert": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EndpointOauthConfigIn": {
                "properties": {
                    "authMethod": {
                        "$ref": "#/components/schemas/Oauth2AuthMethodInOut"
                    },
                    "clientId": {
                        "description": "The client ID. Required for all authentication types.",
                        "type": "string"
                    },
                    "clientSecret": {
                        "description": "Optional client secret. This is only used for `clientSecretBasic` and `clientSecretPost`.\n\nFor `clientSecretBasic`, the secret will be appended to the `Authorization` header. For `clientSecretPost`, this will be added to the body in a `client_secret` parameter.",
                        "nullable": true,
                        "type": "string"
                    },
                    "extraParams": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Extra parameters added to the request body as key-value pairs.",
                        "nullable": true,
                        "type": "object"
                    },
                    "grantType": {
                        "$ref": "#/components/schemas/Oauth2GrantTypeInOut",
                        "description": "The OAuth grant type."
                    },
                    "jwtParams": {
                        "$ref": "#/components/schemas/ClientSecretJwtParamsIn",
                        "description": "Optional JWT parameters. Only required for `clientSecretJwt`",
                        "nullable": true
                    },
                    "refreshToken": {
                        "description": "For `refreshToken` grant type.",
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "description": "Optional OAuth scopes added to the request body.",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "tokenUrl": {
                        "description": "The URL of the authorization server.",
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "authMethod",
                    "clientId",
                    "grantType",
                    "tokenUrl"
                ],
                "type": "object"
            },
            "EndpointOauthConfigOut": {
                "properties": {
                    "authMethod": {
                        "$ref": "#/components/schemas/Oauth2AuthMethodInOut"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "extraParams": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "grantType": {
                        "$ref": "#/components/schemas/Oauth2GrantTypeInOut"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "tokenUrl": {
                        "type": "string"
                    }
                },
                "required": [
                    "authMethod",
                    "clientId",
                    "grantType",
                    "tokenUrl"
                ],
                "type": "object"
            },
            "EndpointOut": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "deprecated": true,
                        "example": 1,
                        "format": "int32",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt",
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "EndpointPatch": {
                "properties": {
                    "channels": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    },
                    "version": {
                        "deprecated": true,
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "EndpointRateLimitStatus": {
                "enum": [
                    "Ok",
                    "RateLimited"
                ],
                "type": "string"
            },
            "EndpointRateLimitStatusOut": {
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/EndpointRateLimitStatus"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "EndpointSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "EndpointSecretRotateIn": {
                "properties": {
                    "key": {
                        "default": null,
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EndpointStats": {
                "properties": {
                    "fail": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "pending": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "sending": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "success": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "fail",
                    "pending",
                    "sending",
                    "success"
                ],
                "type": "object"
            },
            "EndpointTransformationOut": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EndpointTransformationPatch": {
                "properties": {
                    "code": {
                        "example": "function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n",
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EndpointUpdate": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "default": 1,
                        "deprecated": true,
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "EndpointUpdatedEvent": {
                "description": "Sent when an endpoint is updated.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointUpdatedEventData"
                    },
                    "type": {
                        "default": "endpoint.updated",
                        "enum": [
                            "endpoint.updated"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointUpdatedEventData": {
                "description": "Sent when an endpoint is created, updated, or deleted",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EnvironmentIn": {
                "properties": {
                    "connectors": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectorIn"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "eventTypes": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeIn"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "settings": {
                        "additionalProperties": true,
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "EnvironmentModelIn": {
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/EnvironmentType"
                    }
                },
                "required": [
                    "name",
                    "type"
                ],
                "type": "object"
            },
            "EnvironmentModelOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Environment's ID.",
                        "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^org_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "$ref": "#/components/schemas/EnvironmentRegion"
                    },
                    "type": {
                        "$ref": "#/components/schemas/EnvironmentType"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "region",
                    "type",
                    "updatedAt"
                ],
                "type": "object"
            },
            "EnvironmentModelUpdate": {
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "EnvironmentOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "eventTypes": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeOut"
                        },
                        "type": "array"
                    },
                    "settings": {
                        "additionalProperties": true,
                        "nullable": true,
                        "type": "object"
                    },
                    "transformationTemplates": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectorOut"
                        },
                        "type": "array"
                    },
                    "version": {
                        "default": 1,
                        "format": "int",
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "eventTypes",
                    "settings",
                    "transformationTemplates"
                ],
                "type": "object"
            },
            "EnvironmentRegion": {
                "enum": [
                    "eu",
                    "us",
                    "in",
                    "au",
                    "ca",
                    "self-hosted"
                ],
                "type": "string"
            },
            "EnvironmentSettingsOut": {
                "properties": {
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageTags": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showSvixBrandFooter": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EnvironmentType": {
                "enum": [
                    "development",
                    "production"
                ],
                "type": "string"
            },
            "EventExampleIn": {
                "properties": {
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "exampleIndex": {
                        "default": 0,
                        "description": "If the event type schema contains an array of examples, chooses which one to send.\n\nDefaults to the first example. Ignored if the schema doesn't contain an array of examples.",
                        "format": "uint",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "eventType"
                ],
                "type": "object"
            },
            "EventIn": {
                "properties": {
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "EventOut": {
                "properties": {
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "payload",
                    "timestamp"
                ],
                "type": "object"
            },
            "EventStreamOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EventOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "EventTypeExampleOut": {
                "properties": {
                    "example": {
                        "additionalProperties": true,
                        "example": {
                            "data": {
                                "email": "test@example.com",
                                "username": "test_user"
                            },
                            "type": "user.created"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "example"
                ],
                "type": "object"
            },
            "EventTypeFromOpenApi": {
                "properties": {
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "deprecated",
                    "description",
                    "name"
                ],
                "type": "object"
            },
            "EventTypeImportOpenApiIn": {
                "description": "Import a list of event types from webhooks defined in an OpenAPI spec.\n\nThe OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.",
                "properties": {
                    "dryRun": {
                        "default": false,
                        "description": "If `true`, return the event types that would be modified without actually modifying them.",
                        "type": "boolean"
                    },
                    "replaceAll": {
                        "default": false,
                        "description": "If `true`, all existing event types that are not in the spec will be archived.",
                        "type": "boolean"
                    },
                    "spec": {
                        "additionalProperties": true,
                        "description": "A pre-parsed JSON spec.",
                        "example": {
                            "info": {
                                "title": "Webhook Example",
                                "version": "1.0.0"
                            },
                            "openapi": "3.1.0",
                            "webhooks": {
                                "pet.new": {
                                    "post": {
                                        "requestBody": {
                                            "content": {
                                                "application/json": {
                                                    "schema": {
                                                        "properties": {
                                                            "id": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "tag": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "name"
                                                        ]
                                                    }
                                                }
                                            },
                                            "description": "Information about a new pet in the system"
                                        },
                                        "responses": {
                                            "200": {
                                                "description": "Return a 200 status to indicate that the data was received successfully"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "specRaw": {
                        "description": "A string, parsed by the server as YAML or JSON.",
                        "example": "\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EventTypeImportOpenApiOut": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EventTypeImportOpenApiOutData"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            },
            "EventTypeImportOpenApiOutData": {
                "properties": {
                    "modified": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "to_modify": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeFromOpenApi"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "modified"
                ],
                "type": "object"
            },
            "EventTypeIn": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "deprecated": {
                        "default": false,
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "description": "Deprecated - prefer featureFlags instead.",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "description",
                    "name"
                ],
                "type": "object"
            },
            "EventTypeOut": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "deprecated",
                    "description",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "EventTypePatch": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "EventTypeSchemaIn": {
                "properties": {
                    "schema": {
                        "additionalProperties": true,
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "schema"
                ],
                "type": "object"
            },
            "EventTypeUpdate": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "deprecated": {
                        "default": false,
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "default": null,
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "description"
                ],
                "type": "object"
            },
            "ExportEventTypeOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "ExpungeAllContentsOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "FontSizeConfig": {
                "properties": {
                    "base": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "GenerateIn": {
                "properties": {
                    "prompt": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt"
                ],
                "type": "object"
            },
            "GenerateOut": {
                "properties": {
                    "choices": {
                        "items": {
                            "$ref": "#/components/schemas/CompletionChoice"
                        },
                        "type": "array"
                    },
                    "created": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "model": {
                        "type": "string"
                    },
                    "object": {
                        "type": "string"
                    }
                },
                "required": [
                    "choices",
                    "created",
                    "id",
                    "model",
                    "object"
                ],
                "type": "object"
            },
            "GithubConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GithubConfigOut": {
                "type": "object"
            },
            "GlobalApiTokenCensoredOut": {
                "properties": {
                    "censoredToken": {
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expiresAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The GlobalApplicationToken's ID.",
                        "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 38,
                        "minLength": 38,
                        "pattern": "^global_key_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "censoredToken",
                    "createdAt",
                    "id"
                ],
                "type": "object"
            },
            "GoogleCloudStorageConfig": {
                "description": "Configuration for a Google Cloud Storage sink.\n\nWrite stream events into the named bucket using the supplied Google Cloud credentials.",
                "properties": {
                    "bucket": {
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Google Cloud Credentials JSON Object as a string.",
                        "type": "string"
                    }
                },
                "required": [
                    "bucket",
                    "credentials"
                ],
                "type": "object"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "detail"
                ],
                "type": "object"
            },
            "HttpErrorOut": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "detail"
                ],
                "title": "HttpError",
                "type": "object"
            },
            "HttpSinkHeadersPatchIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "nullable": true,
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "HubspotConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HubspotConfigOut": {
                "type": "object"
            },
            "HubspotOauthConfigIn": {
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    }
                },
                "required": [
                    "refresh_token"
                ],
                "type": "object"
            },
            "InboundPathParams": {
                "properties": {
                    "app_id": {
                        "description": "The Application's ID or UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "inbound_token": {
                        "type": "string"
                    }
                },
                "required": [
                    "app_id",
                    "inbound_token"
                ],
                "type": "object"
            },
            "IncomingWebhookPayloadOut": {
                "properties": {
                    "channel": {
                        "nullable": true,
                        "type": "string"
                    },
                    "error": {
                        "nullable": true,
                        "type": "string"
                    },
                    "incomingWebhookUrl": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IngestEndpointHeadersIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "IngestEndpointHeadersOut": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    },
                    "sensitive": {
                        "example": [
                            "Authorization"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "headers",
                    "sensitive"
                ],
                "type": "object"
            },
            "IngestEndpointIn": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "IngestEndpointOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt",
                    "url"
                ],
                "type": "object"
            },
            "IngestEndpointSecretIn": {
                "properties": {
                    "key": {
                        "default": null,
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IngestEndpointSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "IngestEndpointUpdate": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "IngestHeaders": {
                "additionalProperties": {
                    "type": "string"
                },
                "type": "object"
            },
            "IngestLogOut": {
                "properties": {
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "error_text": {
                        "type": "string"
                    },
                    "headers": {
                        "$ref": "#/components/schemas/IngestHeaders"
                    },
                    "id": {
                        "description": "The ErrorLog's ID.",
                        "example": "log2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 25,
                        "minLength": 25,
                        "pattern": "^log[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    },
                    "source_id": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "status_code": {
                        "format": "int16",
                        "type": "integer"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "created_at",
                    "error_text",
                    "headers",
                    "id",
                    "payload",
                    "source_id",
                    "status_code",
                    "updated_at"
                ],
                "type": "object"
            },
            "IngestPathWithToken": {
                "properties": {
                    "source_id": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "token": {
                        "maxLength": 16,
                        "minLength": 16,
                        "pattern": "^[A-Za-z0-9]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "source_id",
                    "token"
                ],
                "type": "object"
            },
            "IngestResponse": {
                "anyOf": [
                    {
                        "items": [
                            {
                                "description": "The IngestMessageUid's ID.",
                                "example": "whk_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                "maxLength": 31,
                                "minLength": 31,
                                "pattern": "^whk_[A-Za-z0-9]{27}$",
                                "type": "string"
                            },
                            {
                                "description": "The Source's ID.",
                                "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                                "maxLength": 26,
                                "minLength": 26,
                                "pattern": "^src_[A-Za-z0-9]{22}$",
                                "type": "string"
                            }
                        ],
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                    },
                    {
                        "$ref": "#/components/schemas/ZoomCrcResponse"
                    },
                    {
                        "$ref": "#/components/schemas/SlackChallengeResponse"
                    },
                    {
                        "$ref": "#/components/schemas/AdobeSignResponse"
                    }
                ],
                "description": "Some providers need to generate responses to incoming ingest requests."
            },
            "IngestSourceConsumerPortalAccessIn": {
                "properties": {
                    "expiry": {
                        "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
                        "format": "uint64",
                        "maximum": 604800,
                        "minimum": 3600,
                        "nullable": true,
                        "type": "integer"
                    },
                    "readOnly": {
                        "description": "Whether the app portal should be in read-only mode.",
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "IngestSourceIn": {
                "oneOf": [
                    {
                        "description": "Webhooks with no verification scheme or special handling.",
                        "properties": {
                            "type": {
                                "enum": [
                                    "generic-webhook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CronConfig"
                            },
                            "type": {
                                "enum": [
                                    "cron"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AdobeSignConfig"
                            },
                            "type": {
                                "enum": [
                                    "adobe-sign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "beehiiv"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "brex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CheckbookConfig"
                            },
                            "type": {
                                "enum": [
                                    "checkbook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "clerk"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/DocusignConfig"
                            },
                            "type": {
                                "enum": [
                                    "docusign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/EasypostConfig"
                            },
                            "type": {
                                "enum": [
                                    "easypost"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GithubConfig"
                            },
                            "type": {
                                "enum": [
                                    "github"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "guesty"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/HubspotConfig"
                            },
                            "type": {
                                "enum": [
                                    "hubspot"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "incident-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "lithic"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "nash"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/OrumIoConfig"
                            },
                            "type": {
                                "enum": [
                                    "orum-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PandaDocConfig"
                            },
                            "type": {
                                "enum": [
                                    "panda-doc"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PortIoConfig"
                            },
                            "type": {
                                "enum": [
                                    "port-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "pleo"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "replicate"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "resend"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/RutterConfig"
                            },
                            "type": {
                                "enum": [
                                    "rutter"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "safebase"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "sardine"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SegmentConfig"
                            },
                            "type": {
                                "enum": [
                                    "segment"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ShopifyConfig"
                            },
                            "type": {
                                "enum": [
                                    "shopify"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SlackConfig"
                            },
                            "type": {
                                "enum": [
                                    "slack"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/StripeConfig"
                            },
                            "type": {
                                "enum": [
                                    "stripe"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "stych"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "svix"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ZoomConfig"
                            },
                            "type": {
                                "enum": [
                                    "zoom"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/TelnyxConfig"
                            },
                            "type": {
                                "enum": [
                                    "telnyx"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VapiConfig"
                            },
                            "type": {
                                "enum": [
                                    "vapi"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "open-ai"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "render"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VeriffConfig"
                            },
                            "type": {
                                "enum": [
                                    "veriff"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AirwallexConfig"
                            },
                            "type": {
                                "enum": [
                                    "airwallex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "maxLength": 256,
                        "minLength": 2,
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Source's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "IngestSourceOut": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "generic-webhook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CronConfig"
                            },
                            "type": {
                                "enum": [
                                    "cron"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AdobeSignConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "adobe-sign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "beehiiv"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "brex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CheckbookConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "checkbook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "clerk"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/DocusignConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "docusign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/EasypostConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "easypost"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GithubConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "github"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "guesty"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/HubspotConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "hubspot"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "incident-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "lithic"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "nash"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/OrumIoConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "orum-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PandaDocConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "panda-doc"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PortIoConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "port-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "pleo"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "replicate"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "resend"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/RutterConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "rutter"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "safebase"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "sardine"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SegmentConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "segment"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ShopifyConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "shopify"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SlackConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "slack"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/StripeConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "stripe"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "stych"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "svix"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ZoomConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "zoom"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/TelnyxConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "telnyx"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VapiConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "vapi"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "open-ai"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "render"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VeriffConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "veriff"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AirwallexConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "airwallex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "ingestUrl": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Source's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "IngestSourcePatch": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "maxLength": 256,
                        "minLength": 2,
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Source's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IntegrationIn": {
                "properties": {
                    "featureFlags": {
                        "description": "The set of feature flags the integration will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "IntegrationKeyOut": {
                "properties": {
                    "key": {
                        "example": "integsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "IntegrationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": [],
                        "description": "The set of feature flags the integration has access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Integration's ID.",
                        "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^integ_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "IntegrationUpdate": {
                "properties": {
                    "featureFlags": {
                        "description": "The set of feature flags the integration will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "LatestEventsOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EventOut"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            },
            "ListResponse_ActiveApplicationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ActiveApplicationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ApiTokenCensoredOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApiTokenCensoredOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ApplicationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApplicationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ApplicationStats_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApplicationStats"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_BackgroundTaskOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/BackgroundTaskOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ConnectorOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectorOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EndpointMessageOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EndpointMessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EnvironmentModelOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentModelOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EventTypeOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_GlobalApiTokenCensoredOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/GlobalApiTokenCensoredOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IngestEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IngestEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IngestLogOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IngestLogOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IngestSourceOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IngestSourceOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IntegrationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IntegrationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageAttemptEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageAttemptEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageAttemptOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageAttemptOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_OperationalWebhookEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_SinkOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/SinkOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_StreamEventTypeOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/StreamEventTypeOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_StreamOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/StreamOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_StreamSinkOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/StreamSinkOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "MessageAttemptEndpointOut": {
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The MessageAttempt's ID.",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "msg": {
                        "$ref": "#/components/schemas/MessageOut",
                        "nullable": true
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "response": {
                        "example": "{}",
                        "type": "string"
                    },
                    "responseDurationMs": {
                        "description": "Response duration in milliseconds.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "responseStatusCode": {
                        "example": 200,
                        "format": "int16",
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "triggerType": {
                        "$ref": "#/components/schemas/MessageAttemptTriggerType"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "id",
                    "msgId",
                    "response",
                    "responseDurationMs",
                    "responseStatusCode",
                    "status",
                    "timestamp",
                    "triggerType",
                    "url"
                ],
                "type": "object"
            },
            "MessageAttemptExhaustedEvent": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptExhaustedEventData"
                    },
                    "type": {
                        "default": "message.attempt.exhausted",
                        "enum": [
                            "message.attempt.exhausted"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptExhaustedEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptFailedData": {
                "properties": {
                    "id": {
                        "description": "The MessageAttempt's ID.",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "responseStatusCode": {
                        "format": "int16",
                        "type": "integer"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "responseStatusCode",
                    "timestamp"
                ],
                "type": "object"
            },
            "MessageAttemptFailingEvent": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptFailingEventData"
                    },
                    "type": {
                        "default": "message.attempt.failing",
                        "enum": [
                            "message.attempt.failing"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptFailingEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptHeadersOut": {
                "properties": {
                    "responseHeaders": {
                        "items": {
                            "items": {
                                "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "sensitive": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "sentHeaders": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sensitive",
                    "sentHeaders"
                ],
                "type": "object"
            },
            "MessageAttemptOut": {
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The MessageAttempt's ID.",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "msg": {
                        "$ref": "#/components/schemas/MessageOut",
                        "nullable": true
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "response": {
                        "example": "{}",
                        "type": "string"
                    },
                    "responseDurationMs": {
                        "description": "Response duration in milliseconds.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "responseStatusCode": {
                        "example": 200,
                        "format": "int16",
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "triggerType": {
                        "$ref": "#/components/schemas/MessageAttemptTriggerType"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "id",
                    "msgId",
                    "response",
                    "responseDurationMs",
                    "responseStatusCode",
                    "status",
                    "timestamp",
                    "triggerType",
                    "url"
                ],
                "type": "object"
            },
            "MessageAttemptRecoveredEvent": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptRecoveredEventData"
                    },
                    "type": {
                        "default": "message.attempt.recovered",
                        "enum": [
                            "message.attempt.recovered"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptRecoveredEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptTriggerType": {
                "description": "The reason an attempt was made:\n\n- Scheduled = 0\n- Manual = 1",
                "enum": [
                    0,
                    1
                ],
                "title": "MessageAttemptTriggerType",
                "type": "integer",
                "x-enum-varnames": [
                    "Scheduled",
                    "Manual"
                ]
            },
            "MessageBroadcastIn": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by.",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "payloadRetentionHours": {
                        "default": null,
                        "description": "Optional number of hours to retain the message payload. Note that this is mutually exclusive with `payloadRetentionPeriod`.",
                        "format": "int64",
                        "maximum": 2160,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "payloadRetentionPeriod": {
                        "default": 90,
                        "description": "Optional number of days to retain the message payload. Defaults to 90. Note that this is mutually exclusive with `payloadRetentionHours`.",
                        "example": 90,
                        "format": "int64",
                        "maximum": 90,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "MessageBroadcastOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "MessageEndpointOut": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "nextAttempt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "deprecated": true,
                        "example": 1,
                        "format": "int32",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "status",
                    "updatedAt",
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "MessageEventsOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "MessageIn": {
                "properties": {
                    "application": {
                        "$ref": "#/components/schemas/ApplicationIn",
                        "description": "Optionally creates a new application alongside the message.\n\nIf the application id or uid that is used in the path already exists, this argument is ignored.",
                        "nullable": true
                    },
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "description": "JSON payload to send as the request body of the webhook.\n\nWe also support sending non-JSON payloads. Please contact us for more information.",
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "payloadRetentionHours": {
                        "default": null,
                        "description": "Optional number of hours to retain the message payload. Note that this is mutually exclusive with `payloadRetentionPeriod`.",
                        "format": "int64",
                        "maximum": 2160,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "payloadRetentionPeriod": {
                        "default": 90,
                        "description": "Optional number of days to retain the message payload. Defaults to 90. Note that this is mutually exclusive with `payloadRetentionHours`.",
                        "example": 90,
                        "format": "int64",
                        "maximum": 90,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "tags": {
                        "description": "List of free-form tags that can be filtered by when listing messages",
                        "example": [
                            "my_tag",
                            "other"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "maxItems": 5,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "transformationsParams": {
                        "additionalProperties": true,
                        "description": "Extra parameters to pass to Transformations (for future use)",
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "MessageOut": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "timestamp"
                ],
                "type": "object"
            },
            "MessagePrecheckIn": {
                "properties": {
                    "channels": {
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType"
                ],
                "type": "object"
            },
            "MessagePrecheckOut": {
                "properties": {
                    "active": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "active"
                ],
                "type": "object"
            },
            "MessageRawPayloadOut": {
                "properties": {
                    "payload": {
                        "example": "{\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"}",
                        "type": "string"
                    }
                },
                "required": [
                    "payload"
                ],
                "type": "object"
            },
            "MessageStatus": {
                "description": "The sending status of the message:\n\n- Success = 0\n- Pending = 1\n- Fail = 2\n- Sending = 3",
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "title": "MessageStatus",
                "type": "integer",
                "x-enum-varnames": [
                    "Success",
                    "Pending",
                    "Fail",
                    "Sending"
                ]
            },
            "OAuthPayloadIn": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "redirectUri": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "redirectUri"
                ],
                "type": "object"
            },
            "OAuthPayloadOut": {
                "properties": {
                    "accessToken": {
                        "nullable": true,
                        "type": "string"
                    },
                    "error": {
                        "nullable": true,
                        "type": "string"
                    },
                    "refreshToken": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Oauth2AuthMethodInOut": {
                "description": "The method used for authenticating to the OAuth authorization server.\n\n`clientSecretJwt` will construct a JWT used for authentication with the oauth authorization server. This method is less commonly used and may not be supported by all oauth providers. `clientSecretBasic` will authenticate to the oauth authorization server using an `Authorization` header with the client secret as the value. This is the most common means of authentication. `clientSecretPost` will authenticate to the oauth authorization server by passing the client secret in a `client_secret` field in the request body. This method may not be supported by all oauth providers, and in general `clientSecretBasic` should be preferred.",
                "enum": [
                    "clientSecretJwt",
                    "clientSecretBasic",
                    "clientSecretPost"
                ],
                "type": "string"
            },
            "Oauth2GrantTypeInOut": {
                "enum": [
                    "clientCredentials",
                    "refreshToken"
                ],
                "type": "string"
            },
            "OauthJwsSigningAlgorithm": {
                "enum": [
                    "RS256"
                ],
                "type": "string"
            },
            "OneTimeTokenIn": {
                "properties": {
                    "oneTimeToken": {
                        "type": "string"
                    }
                },
                "required": [
                    "oneTimeToken"
                ],
                "type": "object"
            },
            "OneTimeTokenOut": {
                "properties": {
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "token"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointHeadersIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointHeadersOut": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    },
                    "sensitive": {
                        "example": [
                            "Authorization"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "headers",
                    "sensitive"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointIn": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "message.attempt.failing"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "message.attempt.failing"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt",
                    "url"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointSecretIn": {
                "properties": {
                    "key": {
                        "default": null,
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OperationalWebhookEndpointSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointUpdate": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "message.attempt.failing"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "Ordering": {
                "description": "Defines the ordering in a listing of results.",
                "enum": [
                    "ascending",
                    "descending"
                ],
                "type": "string"
            },
            "OrumIoConfig": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "OrumIoConfigOut": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "OtelConfig": {
                "properties": {
                    "additionalHeaders": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": null,
                        "nullable": true,
                        "type": "object"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "OtelConfigOut": {
                "properties": {
                    "additionalHeaders": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "svixManaged": {
                        "type": "boolean"
                    },
                    "url": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "svixManaged"
                ],
                "type": "object"
            },
            "PandaDocConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "PandaDocConfigOut": {
                "type": "object"
            },
            "PollingEndpointConsumerSeekIn": {
                "properties": {
                    "after": {
                        "example": "2025-04-21T11:20:34Z",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "after"
                ],
                "type": "object"
            },
            "PollingEndpointConsumerSeekOut": {
                "properties": {
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "iterator"
                ],
                "type": "object"
            },
            "PollingEndpointMessageOut": {
                "description": "The MessageOut equivalent of polling endpoint",
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "timestamp"
                ],
                "type": "object"
            },
            "PollingEndpointOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/PollingEndpointMessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "PortIoConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "PortIoConfigOut": {
                "type": "object"
            },
            "RawMessageOut": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "timestamp"
                ],
                "type": "object"
            },
            "RecoverIn": {
                "properties": {
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "since"
                ],
                "type": "object"
            },
            "RecoverOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "ReplayIn": {
                "properties": {
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "since"
                ],
                "type": "object"
            },
            "ReplayOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "RetrySchedule": {
                "items": {
                    "$ref": "#/components/schemas/Duration"
                },
                "type": "array"
            },
            "RetryScheduleInOut": {
                "properties": {
                    "retrySchedule": {
                        "$ref": "#/components/schemas/RetrySchedule",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "RotatePollerTokenIn": {
                "properties": {
                    "expiry": {
                        "description": "How long the token will be valid for, in seconds. Can be up to 31,536,000 seconds (1 year).",
                        "format": "int64",
                        "maximum": 31536000,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "oldTokenExpiry": {
                        "default": 300,
                        "description": "Updates the previous token's expiration, in seconds.\n\nIf set to 0, the old token will immediately be revoked. Must be between 0 and 86,400 seconds (1 day).\n\nDefaults to 300 seconds (5 minutes).",
                        "format": "int64",
                        "maximum": 86400,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "RotateTokenOut": {
                "properties": {
                    "ingestUrl": {
                        "type": "string"
                    }
                },
                "required": [
                    "ingestUrl"
                ],
                "type": "object"
            },
            "RotatedUrlOut": {
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "RutterConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "RutterConfigOut": {
                "type": "object"
            },
            "S3Config": {
                "properties": {
                    "accessKeyId": {
                        "type": "string"
                    },
                    "bucket": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "secretAccessKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessKeyId",
                    "bucket",
                    "region",
                    "secretAccessKey"
                ],
                "type": "object"
            },
            "SegmentConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SegmentConfigOut": {
                "type": "object"
            },
            "SettingsInternalIn": {
                "properties": {
                    "applicationAlertEvents": {
                        "default": [],
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAlertEvent"
                        },
                        "type": "array"
                    },
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "default": false,
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SettingsInternalOut": {
                "properties": {
                    "applicationAlertEvents": {
                        "default": [],
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAlertEvent"
                        },
                        "type": "array"
                    },
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "default": false,
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "showSvixBrandFooter": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SettingsInternalPatch": {
                "properties": {
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "showUseSvixPlay": {
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SettingsInternalUpdateOut": {
                "properties": {
                    "applicationAlertEvents": {
                        "default": [],
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAlertEvent"
                        },
                        "type": "array"
                    },
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "default": false,
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ShopifyConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "ShopifyConfigOut": {
                "type": "object"
            },
            "SinkHttpConfig": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "key": {
                        "default": null,
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "SinkIn": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "format": "uri",
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "url"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "eventStream"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "channels": {
                        "description": "List of message channels this sink listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the sink.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SinkOtelV1Config": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "SinkOut": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "format": "uri",
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "url"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "eventStream"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt"
                ],
                "type": "object"
            },
            "SinkSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SinkStatus": {
                "enum": [
                    "enabled",
                    "paused",
                    "disabled",
                    "retrying"
                ],
                "type": "string"
            },
            "SinkStatusIn": {
                "enum": [
                    "enabled",
                    "disabled"
                ],
                "type": "string"
            },
            "SinkTransformIn": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SinkTransformationOut": {
                "properties": {
                    "code": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled"
                ],
                "type": "object"
            },
            "SlackChallengeResponse": {
                "properties": {
                    "challenge": {
                        "type": "string"
                    }
                },
                "required": [
                    "challenge"
                ],
                "type": "object"
            },
            "SlackConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "SlackConfigOut": {
                "type": "object"
            },
            "StatisticsPeriod": {
                "description": "Period length for a statistics data point.",
                "enum": [
                    "OneDay",
                    "FiveMinutes"
                ],
                "type": "string"
            },
            "StatusCodeClass": {
                "description": "The different classes of HTTP status codes:\n\n- CodeNone = 0\n- Code1xx = 100\n- Code2xx = 200\n- Code3xx = 300\n- Code4xx = 400\n- Code5xx = 500",
                "enum": [
                    0,
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                "title": "StatusCodeClass",
                "type": "integer",
                "x-enum-varnames": [
                    "CodeNone",
                    "Code1xx",
                    "Code2xx",
                    "Code3xx",
                    "Code4xx",
                    "Code5xx"
                ]
            },
            "StreamEventTypeIn": {
                "properties": {
                    "archived": {
                        "default": false,
                        "type": "boolean"
                    },
                    "deprecated": {
                        "default": false,
                        "type": "boolean"
                    },
                    "description": {
                        "nullable": true,
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "StreamEventTypeOut": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "nullable": true,
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "archived",
                    "createdAt",
                    "deprecated",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "StreamEventTypePatch": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "nullable": true,
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamIn": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "description": "The stream's name.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "uid": {
                        "description": "An optional unique identifier for the stream.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "StreamOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The stream's ID.",
                        "example": "strm_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 27,
                        "minLength": 27,
                        "pattern": "^strm_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "description": "The stream's name.",
                        "nullable": true,
                        "type": "string"
                    },
                    "uid": {
                        "description": "The stream's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "updatedAt"
                ],
                "type": "object"
            },
            "StreamPatch": {
                "properties": {
                    "description": {
                        "description": "The Stream's description.",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "uid": {
                        "description": "An optional unique identifier for the stream.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamPortalAccessIn": {
                "properties": {
                    "expiry": {
                        "default": 604800,
                        "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
                        "format": "uint64",
                        "maximum": 604800,
                        "minimum": 3600,
                        "nullable": true,
                        "type": "integer"
                    },
                    "featureFlags": {
                        "description": "The set of feature flags the created token will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "readOnly": {
                        "description": "Whether the app portal should be in read-only mode.",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sessionId": {
                        "description": "An optional session ID to attach to the token.\n\nWhen expiring tokens with \"Expire All\", you can include the session ID to only expire tokens that were created with that session ID.",
                        "example": "user_1FB8",
                        "maxLength": 64,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9@_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamSinkIn": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "poller"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AzureBlobStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "azureBlobStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkOtelV1Config"
                            },
                            "type": {
                                "enum": [
                                    "otelTracing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkHttpConfig"
                            },
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/S3Config"
                            },
                            "type": {
                                "enum": [
                                    "amazonS3"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GoogleCloudStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "googleCloudStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "batchSize": {
                        "default": 100,
                        "description": "How many events will be batched in a request to the Sink.",
                        "example": 100,
                        "format": "uint16",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "eventTypes": {
                        "default": [],
                        "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "maxWaitSecs": {
                        "default": 0,
                        "description": "How long to wait before a batch of events is sent, if the `batchSize` is not reached.\n\nFor example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will send a request after 10 seconds or 100 events, whichever comes first.\n\nNote that we will never send an empty batch of events to the Sink.",
                        "format": "uint16",
                        "maximum": 300,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SinkStatusIn",
                        "default": "enabled",
                        "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `disabled`, events will not be dispatched to the sink until the sink is reenabled."
                    },
                    "uid": {
                        "description": "An optional unique identifier for the sink.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamSinkOut": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "poller"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AzureBlobStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "azureBlobStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkOtelV1Config"
                            },
                            "type": {
                                "enum": [
                                    "otelTracing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkHttpConfig"
                            },
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/S3Config"
                            },
                            "type": {
                                "enum": [
                                    "amazonS3"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GoogleCloudStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "googleCloudStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "batchSize": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "currentIterator": {
                        "nullable": true,
                        "type": "string"
                    },
                    "eventTypes": {
                        "default": [],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "failureReason": {
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The sink's ID.",
                        "example": "sink_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 27,
                        "minLength": 27,
                        "pattern": "^sink_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "maxWaitSecs": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "nextRetryAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SinkStatus"
                    },
                    "uid": {
                        "description": "The sink's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "batchSize",
                    "createdAt",
                    "id",
                    "maxWaitSecs",
                    "metadata",
                    "status",
                    "updatedAt"
                ],
                "type": "object"
            },
            "StreamSinkPatch": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "poller"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "properties": {
                                    "accessKey": {
                                        "type": "string"
                                    },
                                    "account": {
                                        "type": "string"
                                    },
                                    "container": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": {
                                "enum": [
                                    "azureBlobStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "properties": {
                                    "url": {
                                        "format": "uri",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": {
                                "enum": [
                                    "otelTracing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "properties": {
                                    "url": {
                                        "format": "uri",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "properties": {
                                    "accessKeyId": {
                                        "type": "string"
                                    },
                                    "bucket": {
                                        "type": "string"
                                    },
                                    "region": {
                                        "type": "string"
                                    },
                                    "secretAccessKey": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": {
                                "enum": [
                                    "amazonS3"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "properties": {
                                    "bucket": {
                                        "type": "string"
                                    },
                                    "credentials": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": {
                                "enum": [
                                    "googleCloudStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "batchSize": {
                        "default": null,
                        "example": 100,
                        "format": "uint16",
                        "maximum": 1000,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "eventTypes": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "maxWaitSecs": {
                        "default": null,
                        "format": "uint16",
                        "maximum": 300,
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SinkStatusIn",
                        "default": null,
                        "nullable": true
                    },
                    "uid": {
                        "description": "The StreamSink's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamTransformationSimulateIn": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    },
                    "events": {
                        "items": {
                            "$ref": "#/components/schemas/EventIn"
                        },
                        "type": "array"
                    },
                    "type": {
                        "$ref": "#/components/schemas/StreamTransformationSimulateType"
                    }
                },
                "required": [
                    "code",
                    "events",
                    "type"
                ],
                "type": "object"
            },
            "StreamTransformationSimulateOut": {
                "properties": {
                    "output": {
                        "additionalProperties": true,
                        "type": "object"
                    }
                },
                "required": [
                    "output"
                ],
                "type": "object"
            },
            "StreamTransformationSimulateType": {
                "enum": [
                    "http",
                    "otelTracing",
                    "amazonS3",
                    "azureBlobStorage",
                    "googleCloudStorage"
                ],
                "type": "string"
            },
            "StripeConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "StripeConfigOut": {
                "type": "object"
            },
            "SurveyIn": {
                "properties": {
                    "content": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "title": {
                        "example": "Welcome Questionnaire",
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "title"
                ],
                "type": "object"
            },
            "SurveyOut": {
                "properties": {
                    "content": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Survey's ID.",
                        "example": "srvy_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 27,
                        "minLength": 27,
                        "pattern": "^srvy_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "userId": {
                        "description": "The User's ID.",
                        "example": "usr_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^usr_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "createdAt",
                    "id",
                    "title",
                    "userId"
                ],
                "type": "object"
            },
            "SvixConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "SvixConfigOut": {
                "type": "object"
            },
            "TelnyxConfig": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "TelnyxConfigOut": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "TransformationHttpMethod": {
                "enum": [
                    "POST",
                    "PUT",
                    "PATCH"
                ],
                "type": "string"
            },
            "TransformationSimulateIn": {
                "properties": {
                    "channels": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "TransformationSimulateOut": {
                "properties": {
                    "cancel": {
                        "type": "boolean"
                    },
                    "method": {
                        "$ref": "#/components/schemas/TransformationHttpMethod",
                        "nullable": true
                    },
                    "payload": {
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "cancel",
                    "payload",
                    "url"
                ],
                "type": "object"
            },
            "ValidationError": {
                "description": "Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.",
                "properties": {
                    "loc": {
                        "description": "The location as a [`Vec`] of [`String`]s -- often in the form `[\"body\", \"field_name\"]`, `[\"query\", \"field_name\"]`, etc. They may, however, be arbitrarily deep.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "msg": {
                        "description": "The message accompanying the validation error item.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of error, often \"type_error\" or \"value_error\", but sometimes with more context like as \"value_error.number.not_ge\"",
                        "type": "string"
                    }
                },
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object"
            },
            "VapiConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "VapiConfigOut": {
                "type": "object"
            },
            "VeriffConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "VeriffConfigOut": {
                "type": "object"
            },
            "ZoomConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "ZoomConfigOut": {
                "type": "object"
            },
            "ZoomCrcResponse": {
                "properties": {
                    "encryptedToken": {
                        "type": "string"
                    },
                    "plainToken": {
                        "type": "string"
                    }
                },
                "required": [
                    "encryptedToken",
                    "plainToken"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "description": "HTTP Bearer token passed in the `Authorization` header",
                "scheme": "bearer",
                "type": "http"
            }
        }
    },
    "info": {
        "description": "Welcome to the Svix API documentation!\n\nUseful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)\n\n# Introduction\n\nThis is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).\n\n## Main concepts\n\nIn Svix you have four important entities you will be interacting with:\n\n- `messages`: these are the webhooks being sent. They can have contents and a few other properties.\n- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.\n- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).\n- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.\n\n\n## Authentication\n\nGet your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).\n\n<SecurityDefinitions />\n\n\n## Code samples\n\nThe code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).\n\n\n## Idempotency\n\nSvix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.\n\nTo perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.\n\nSvix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.\n\nPlease note that idempotency is only supported for `POST` requests.\n\n\n## Cross-Origin Resource Sharing\n\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n",
        "title": "Svix API",
        "version": "1.75.0",
        "x-logo": {
            "altText": "Svix Logo",
            "url": "https://www.svix.com/static/img/brand-padded.svg"
        }
    },
    "openapi": "3.1.0",
    "paths": {
        "/api/v1/app": {
            "get": {
                "description": "List of all the organization's applications.",
                "operationId": "v1.application.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^app_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApplicationOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Applications",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApplicationOut = await svix.application.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApplicationOut = await svix.application.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_application_out = svix.application.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_application_out = await svix.application.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseApplicationOut, err := svixClient.Application.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseApplicationOut = svix.application.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseApplicationOut listResponseApplicationOut = svix.getApplication().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_application_out = svix.application.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_application_out = svix.application().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseApplicationOut = await svix.Application.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create a new application.",
                "operationId": "v1.application.create",
                "parameters": [
                    {
                        "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
                        "in": "query",
                        "name": "get_if_exists",
                        "schema": {
                            "default": false,
                            "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.create({\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.create({\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_out = svix.application.create(ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_out = await svix.application.create(ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationOut, err := svixClient.Application.Create(ctx, &ApplicationIn{\n    Name: \"My first application\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationOut = svix.application.create(ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationOut applicationOut = svix.getApplication().create(new ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_out = svix.application.create(Svix::ApplicationIn.new({\n    \"name\": \"My first application\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_out = svix.application().create(ApplicationIn {\n    name: \"My first application\".to_string(),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationOut = await svix.Application.CreateAsync(new ApplicationIn{\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application create '{\n    \"name\": \"My first application\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"My first application\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/stats/usage": {
            "get": {
                "description": "Get basic statistics for all applications.",
                "operationId": "get_app_usage_stats_api_v1_app_stats_usage__get",
                "parameters": [
                    {
                        "description": "Filter the range to data after this date.",
                        "in": "query",
                        "name": "since",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data after this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data before this date.",
                        "in": "query",
                        "name": "until",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data before this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Limit the number of returned items.",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 50,
                            "description": "Limit the number of returned items.",
                            "format": "int",
                            "maximum": 250,
                            "nullable": true,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator to use (depends on the chosen ordering).",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator to use (depends on the chosen ordering).",
                            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^app_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApplicationStats_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Usage Stats",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/stats/usage' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}": {
            "delete": {
                "description": "Delete an application.",
                "operationId": "v1.application.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.application.delete(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.application.delete(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Application.Delete(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getApplication().delete(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.application().delete(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Application.DeleteAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application delete \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an application.",
                "operationId": "v1.application.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.get(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.get(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_out = svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_out = await svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationOut, err := svixClient.Application.Get(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationOut = svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationOut applicationOut = svix.getApplication().get(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_out = svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_out = svix.application().get(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationOut = await svix.Application.GetAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application get \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an application.",
                "operationId": "v1.application.patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.patch(\"app_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.patch(\"app_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_out = svix.application.patch(\"app_id\", ApplicationPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_out = await svix.application.patch(\"app_id\", ApplicationPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationOut, err := svixClient.Application.Patch(ctx, \"app_id\", &ApplicationPatch{\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationOut = svix.application.patch(\"app_id\", ApplicationPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationOut applicationOut = svix.getApplication().patch(\"app_id\", new ApplicationPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_out = svix.application.patch(\"app_id\", Svix::ApplicationPatch.new({\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_out = svix.application().patch(\"app_id\", ApplicationPatch {\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationOut = await svix.Application.PatchAsync(\"app_id\", new ApplicationPatch{\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application patch \"app_id\" '{\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\"\n    }'"
                    }
                ]
            },
            "put": {
                "description": "Update an application.",
                "operationId": "v1.application.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.update(\"app_id\", {\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.update(\"app_id\", {\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_out = svix.application.update(\"app_id\", ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_out = await svix.application.update(\"app_id\", ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationOut, err := svixClient.Application.Update(ctx, \"app_id\", &ApplicationIn{\n    Name: \"My first application\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationOut = svix.application.update(\"app_id\", ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationOut applicationOut = svix.getApplication().update(\"app_id\", new ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_out = svix.application.update(\"app_id\", Svix::ApplicationIn.new({\n    \"name\": \"My first application\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_out = svix.application().update(\"app_id\", ApplicationIn {\n    name: \"My first application\".to_string(),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationOut = await svix.Application.UpdateAsync(\"app_id\", new ApplicationIn{\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application update \"app_id\" '{\n    \"name\": \"My first application\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"My first application\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}": {
            "get": {
                "description": "List attempts by endpoint id\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.\n",
                "operationId": "v1.message-attempt.list-by-endpoint",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the HTTP status code",
                        "explode": false,
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "description": "Filter response based on the HTTP status code",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the tag",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the tag",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` attempt content is included in the response",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` attempt content is included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true`, the message information is included in the response",
                        "in": "query",
                        "name": "with_msg",
                        "schema": {
                            "default": false,
                            "description": "When `true`, the message information is included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts By Endpoint",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = await svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageAttemptOut, err := svixClient.MessageAttempt.ListByEndpoint(ctx, \"app_id\", \"endpoint_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageAttemptOut = svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageAttemptOut listResponseMessageAttemptOut = svix.getMessageAttempt().listByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_attempt_out = svix.message_attempt().list_by_endpoint(\"app_id\", \"endpoint_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageAttemptOut = await svix.MessageAttempt.ListByEndpointAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-by-endpoint \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/count": {
            "get": {
                "description": "Like `v1.message-attempt.list-by-endpoint` but returning a count only.",
                "operationId": "v1.message-attempt.count-by-endpoint",
                "parameters": [
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the HTTP status code",
                        "explode": false,
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "description": "Filter response based on the HTTP status code",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the tag",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the tag",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CountOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Count Attempts By Endpoint",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const countOut = await svix.messageAttempt.countByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const countOut = await svix.messageAttempt.countByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "count_out = svix.message_attempt.count_by_endpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "count_out = await svix.message_attempt.count_by_endpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "countOut, err := svixClient.MessageAttempt.CountByEndpoint(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val countOut = svix.messageAttempt.countByEndpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "CountOut countOut = svix.getMessageAttempt().countByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "count_out = svix.message_attempt.count_by_endpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let count_out = svix.message_attempt().count_by_endpoint(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var countOut = await svix.MessageAttempt.CountByEndpointAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt count-by-endpoint \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/count' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/attempt/msg/{msg_id}": {
            "get": {
                "description": "List attempts by message ID.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.",
                "operationId": "v1.message-attempt.list-by-msg",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the HTTP status code",
                        "explode": false,
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "description": "Filter response based on the HTTP status code",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the tag",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the tag",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the attempts based on the attempted endpoint",
                        "in": "query",
                        "name": "endpoint_id",
                        "schema": {
                            "description": "Filter the attempts based on the attempted endpoint",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` attempt content is included in the response",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` attempt content is included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts By Msg",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = await svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageAttemptOut, err := svixClient.MessageAttempt.ListByMsg(ctx, \"app_id\", \"msg_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageAttemptOut = svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageAttemptOut listResponseMessageAttemptOut = svix.getMessageAttempt().listByMsg(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_attempt_out = svix.message_attempt().list_by_msg(\"app_id\", \"msg_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageAttemptOut = await svix.MessageAttempt.ListByMsgAsync(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-by-msg \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/attempt/msg/{msg_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint": {
            "get": {
                "description": "List the application's endpoints.",
                "operationId": "v1.endpoint.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Endpoints",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointOut = await svix.endpoint.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointOut = await svix.endpoint.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_endpoint_out = svix.endpoint.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_endpoint_out = await svix.endpoint.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseEndpointOut, err := svixClient.Endpoint.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseEndpointOut = svix.endpoint.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseEndpointOut listResponseEndpointOut = svix.getEndpoint().list(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_endpoint_out = svix.endpoint.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_endpoint_out = svix.endpoint().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseEndpointOut = await svix.Endpoint.ListAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create a new endpoint for the application.\n\nWhen `secret` is `null` the secret is automatically generated (recommended).",
                "operationId": "v1.endpoint.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.create(\"app_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.create(\"app_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_out = svix.endpoint.create(\"app_id\", EndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_out = await svix.endpoint.create(\"app_id\", EndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOut, err := svixClient.Endpoint.Create(ctx, \"app_id\", &EndpointIn{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n    Secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOut = svix.endpoint.create(\"app_id\", EndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n    .headers(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOut endpointOut = svix.getEndpoint().create(\"app_id\", new EndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .channels(new String[]{\"project_123\", \"group_2\"})\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n    .headers(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_out = svix.endpoint.create(\"app_id\", Svix::EndpointIn.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_out = svix.endpoint().create(\"app_id\", EndpointIn {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n    secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n    headers: Some(json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"})),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOut = await svix.Endpoint.CreateAsync(\"app_id\", new EndpointIn{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    channels: new string[] {\"project_123\", \"group_2\"},\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint create \"app_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}": {
            "delete": {
                "description": "Delete an endpoint.",
                "operationId": "v1.endpoint.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.Delete(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().delete(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().delete(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.DeleteAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint delete \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an endpoint.",
                "operationId": "v1.endpoint.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.get(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.get(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_out = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_out = await svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOut, err := svixClient.Endpoint.Get(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOut = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOut endpointOut = svix.getEndpoint().get(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_out = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_out = svix.endpoint().get(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOut = await svix.Endpoint.GetAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an endpoint.",
                "operationId": "v1.endpoint.patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.patch(\"app_id\", \"endpoint_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    filterTypes: null,\n    channels: null,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.patch(\"app_id\", \"endpoint_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    filterTypes: null,\n    channels: null,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_out = svix.endpoint.patch(\"app_id\", \"endpoint_id\", EndpointPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    filter_types=None,\n    channels=None,\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_out = await svix.endpoint.patch(\"app_id\", \"endpoint_id\", EndpointPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    filter_types=None,\n    channels=None,\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOut, err := svixClient.Endpoint.Patch(ctx, \"app_id\", \"endpoint_id\", &EndpointPatch{\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    FilterTypes: nil,\n    Channels: nil,\n    Secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOut = svix.endpoint.patch(\"app_id\", \"endpoint_id\", EndpointPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .filterTypes(null)\n    .channels(null)\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOut endpointOut = svix.getEndpoint().patch(\"app_id\", \"endpoint_id\", new EndpointPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .filterTypes(null)\n    .channels(null)\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_out = svix.endpoint.patch(\"app_id\", \"endpoint_id\", Svix::EndpointPatch.new({\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"filter_types\": nil,\n    \"channels\": nil,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_out = svix.endpoint().patch(\"app_id\", \"endpoint_id\", EndpointPatch {\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    filter_types: None,\n    channels: None,\n    secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOut = await svix.Endpoint.PatchAsync(\"app_id\", \"endpoint_id\", new EndpointPatch{\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    filterTypes: null,\n    channels: null,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint patch \"app_id\" \"endpoint_id\" '{\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"filterTypes\": null,\n    \"channels\": null,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"filterTypes\": null,\n        \"channels\": null,\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            },
            "put": {
                "description": "Update an endpoint.",
                "operationId": "v1.endpoint.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.update(\"app_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.update(\"app_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_out = svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_out = await svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOut, err := svixClient.Endpoint.Update(ctx, \"app_id\", \"endpoint_id\", &EndpointUpdate{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOut = svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOut endpointOut = svix.getEndpoint().update(\"app_id\", \"endpoint_id\", new EndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .channels(new String[]{\"project_123\", \"group_2\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_out = svix.endpoint.update(\"app_id\", \"endpoint_id\", Svix::EndpointUpdate.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_out = svix.endpoint().update(\"app_id\", \"endpoint_id\", EndpointUpdate {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOut = await svix.Endpoint.UpdateAsync(\"app_id\", \"endpoint_id\", new EndpointUpdate{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    channels: new string[] {\"project_123\", \"group_2\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint update \"app_id\" \"endpoint_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"channels\": [\"project_123\", \"group_2\"]\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers": {
            "get": {
                "description": "Get the additional headers to be sent with the webhook.",
                "operationId": "v1.endpoint.get-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_headers_out = svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_headers_out = await svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointHeadersOut, err := svixClient.Endpoint.GetHeaders(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointHeadersOut = svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointHeadersOut endpointHeadersOut = svix.getEndpoint().getHeaders(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_headers_out = svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_headers_out = svix.endpoint().get_headers(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointHeadersOut = await svix.Endpoint.GetHeadersAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-headers \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially set the additional headers to be sent with the webhook.",
                "operationId": "v1.endpoint.patch-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointHeadersPatchIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.PatchHeaders(ctx, \"app_id\", \"endpoint_id\", &EndpointHeadersPatchIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn()\n    .headers(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().patchHeaders(\"app_id\", \"endpoint_id\", new EndpointHeadersPatchIn()\n    .headers(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", Svix::EndpointHeadersPatchIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.PatchHeadersAsync(\"app_id\", \"endpoint_id\", new EndpointHeadersPatchIn{\n    headers: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint patch-headers \"app_id\" \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ]
            },
            "put": {
                "description": "Set the additional headers to be sent with the webhook.",
                "operationId": "v1.endpoint.update-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointHeadersIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.UpdateHeaders(ctx, \"app_id\", \"endpoint_id\", &EndpointHeadersIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", EndpointHeadersIn()\n    .headers(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().updateHeaders(\"app_id\", \"endpoint_id\", new EndpointHeadersIn()\n    .headers(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", Svix::EndpointHeadersIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.UpdateHeadersAsync(\"app_id\", \"endpoint_id\", new EndpointHeadersIn{\n    headers: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint update-headers \"app_id\" \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg": {
            "get": {
                "description": "List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.\n\nThe `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.\n",
                "operationId": "v1.message-attempt.list-attempted-messages",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^msg_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the message tags",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the message tags",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` message payloads are included in the response",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` message payloads are included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EndpointMessageOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempted Messages",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointMessageOut = await svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointMessageOut = await svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_endpoint_message_out = svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_endpoint_message_out = await svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseEndpointMessageOut, err := svixClient.MessageAttempt.ListAttemptedMessages(ctx, \"app_id\", \"endpoint_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseEndpointMessageOut = svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseEndpointMessageOut listResponseEndpointMessageOut = svix.getMessageAttempt().listAttemptedMessages(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_endpoint_message_out = svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_endpoint_message_out = svix.message_attempt().list_attempted_messages(\"app_id\", \"endpoint_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseEndpointMessageOut = await svix.MessageAttempt.ListAttemptedMessagesAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-attempted-messages \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt": {
            "post": {
                "description": "Creates and sends a message to the specified endpoint.\n\nThe message attempt and response from the endpoint is returned.",
                "operationId": "create_message_attempt_for_endpoint",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message Attempt For Endpoint",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventId\": \"unique-identifier\",\n        \"eventType\": \"user.signup\",\n        \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"application\": null,\n        \"tags\": [\"my_tag\", \"other\"],\n        \"transformationsParams\": null,\n        \"payloadRetentionPeriod\": 90,\n        \"payloadRetentionHours\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls": {
            "delete": {
                "description": "Delete endpoint mTLS configuration.",
                "operationId": "v1.endpoint.delete-mtls-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Endpoint Mtls Config",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.deleteMtlsConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.deleteMtlsConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.delete_mtls_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.delete_mtls_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.DeleteMtlsConfig(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.deleteMtlsConfig(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().deleteMtlsConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.delete_mtls_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().delete_mtls_config(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.DeleteMtlsConfigAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint delete-mtls-config \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get endpoint mTLS configuration.",
                "operationId": "v1.endpoint.get-mtls-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointMtlsConfigOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Mtls Config",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointMtlsConfigOut = await svix.endpoint.getMtlsConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointMtlsConfigOut = await svix.endpoint.getMtlsConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_mtls_config_out = svix.endpoint.get_mtls_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_mtls_config_out = await svix.endpoint.get_mtls_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointMtlsConfigOut, err := svixClient.Endpoint.GetMtlsConfig(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointMtlsConfigOut = svix.endpoint.getMtlsConfig(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointMtlsConfigOut endpointMtlsConfigOut = svix.getEndpoint().getMtlsConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_mtls_config_out = svix.endpoint.get_mtls_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_mtls_config_out = svix.endpoint().get_mtls_config(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointMtlsConfigOut = await svix.Endpoint.GetMtlsConfigAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-mtls-config \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Create / update endpoint mTLS configuration.",
                "operationId": "v1.endpoint.update-mtls-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointMtlsConfigIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint Mtls Config",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateMtlsConfig(\"app_id\", \"endpoint_id\", {\n    serverCaCert: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateMtlsConfig(\"app_id\", \"endpoint_id\", {\n    serverCaCert: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.update_mtls_config(\"app_id\", \"endpoint_id\", EndpointMtlsConfigIn(\n    server_ca_cert=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.update_mtls_config(\"app_id\", \"endpoint_id\", EndpointMtlsConfigIn(\n    server_ca_cert=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.UpdateMtlsConfig(ctx, \"app_id\", \"endpoint_id\", &EndpointMtlsConfigIn{\n    ServerCaCert: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.updateMtlsConfig(\"app_id\", \"endpoint_id\", EndpointMtlsConfigIn()\n    .serverCaCert(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().updateMtlsConfig(\"app_id\", \"endpoint_id\", new EndpointMtlsConfigIn()\n    .serverCaCert(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.update_mtls_config(\"app_id\", \"endpoint_id\", Svix::EndpointMtlsConfigIn.new({\n    \"server_ca_cert\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().update_mtls_config(\"app_id\", \"endpoint_id\", EndpointMtlsConfigIn {\n    server_ca_cert: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.UpdateMtlsConfigAsync(\"app_id\", \"endpoint_id\", new EndpointMtlsConfigIn{\n    serverCaCert: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint update-mtls-config \"app_id\" \"endpoint_id\" '{\n    \"serverCaCert\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"serverCaCert\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth": {
            "delete": {
                "description": "Delete endpoint OAuth configuration.",
                "operationId": "v1.endpoint.delete-oauth-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Endpoint Oauth Config",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.deleteOauthConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.deleteOauthConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.delete_oauth_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.delete_oauth_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.DeleteOauthConfig(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.deleteOauthConfig(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().deleteOauthConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.delete_oauth_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().delete_oauth_config(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.DeleteOauthConfigAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint delete-oauth-config \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get endpoint OAuth configuration.",
                "operationId": "v1.endpoint.get-oauth-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOauthConfigOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Oauth Config",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOauthConfigOut = await svix.endpoint.getOauthConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOauthConfigOut = await svix.endpoint.getOauthConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_oauth_config_out = svix.endpoint.get_oauth_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_oauth_config_out = await svix.endpoint.get_oauth_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOauthConfigOut, err := svixClient.Endpoint.GetOauthConfig(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOauthConfigOut = svix.endpoint.getOauthConfig(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOauthConfigOut endpointOauthConfigOut = svix.getEndpoint().getOauthConfig(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_oauth_config_out = svix.endpoint.get_oauth_config(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_oauth_config_out = svix.endpoint().get_oauth_config(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOauthConfigOut = await svix.Endpoint.GetOauthConfigAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-oauth-config \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Create / update endpoint OAuth configuration.",
                "operationId": "v1.endpoint.update-oauth-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointOauthConfigIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint Oauth Config",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateOauthConfig(\"app_id\", \"endpoint_id\", {\n    jwtParams: null,\n    clientSecret: null,\n    scopes: null,\n    extraParams: null,\n    refreshToken: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateOauthConfig(\"app_id\", \"endpoint_id\", {\n    jwtParams: null,\n    clientSecret: null,\n    scopes: null,\n    extraParams: null,\n    refreshToken: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.update_oauth_config(\"app_id\", \"endpoint_id\", EndpointOauthConfigIn(\n    jwt_params=None,\n    client_secret=None,\n    scopes=None,\n    extra_params=None,\n    refresh_token=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.update_oauth_config(\"app_id\", \"endpoint_id\", EndpointOauthConfigIn(\n    jwt_params=None,\n    client_secret=None,\n    scopes=None,\n    extra_params=None,\n    refresh_token=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.UpdateOauthConfig(ctx, \"app_id\", \"endpoint_id\", &EndpointOauthConfigIn{\n    JwtParams: nil,\n    ClientSecret: nil,\n    Scopes: nil,\n    ExtraParams: nil,\n    RefreshToken: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.updateOauthConfig(\"app_id\", \"endpoint_id\", EndpointOauthConfigIn()\n    .jwtParams(null)\n    .clientSecret(null)\n    .scopes(null)\n    .extraParams(null)\n    .refreshToken(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().updateOauthConfig(\"app_id\", \"endpoint_id\", new EndpointOauthConfigIn()\n    .jwtParams(null)\n    .clientSecret(null)\n    .scopes(null)\n    .extraParams(null)\n    .refreshToken(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.update_oauth_config(\"app_id\", \"endpoint_id\", Svix::EndpointOauthConfigIn.new({\n    \"jwt_params\": nil,\n    \"client_secret\": nil,\n    \"scopes\": nil,\n    \"extra_params\": nil,\n    \"refresh_token\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().update_oauth_config(\"app_id\", \"endpoint_id\", EndpointOauthConfigIn {\n    jwt_params: None,\n    client_secret: None,\n    scopes: None,\n    extra_params: None,\n    refresh_token: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.UpdateOauthConfigAsync(\"app_id\", \"endpoint_id\", new EndpointOauthConfigIn{\n    jwtParams: null,\n    clientSecret: null,\n    scopes: null,\n    extraParams: null,\n    refreshToken: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint update-oauth-config \"app_id\" \"endpoint_id\" '{\n    \"jwtParams\": null,\n    \"clientSecret\": null,\n    \"scopes\": null,\n    \"extraParams\": null,\n    \"refreshToken\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"jwtParams\": null,\n        \"clientSecret\": null,\n        \"scopes\": null,\n        \"extraParams\": null,\n        \"refreshToken\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/rate-limit-status": {
            "get": {
                "description": "Get the endpoint's throttling status. Returns `Ok` if the endpoint rate-limit is not impacting delivery to it.",
                "operationId": "v1.endpoint.get-throttling-status",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointRateLimitStatusOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Throttling Status",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointRateLimitStatusOut = await svix.endpoint.getThrottlingStatus(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointRateLimitStatusOut = await svix.endpoint.getThrottlingStatus(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_rate_limit_status_out = svix.endpoint.get_throttling_status(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_rate_limit_status_out = await svix.endpoint.get_throttling_status(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointRateLimitStatusOut, err := svixClient.Endpoint.GetThrottlingStatus(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointRateLimitStatusOut = svix.endpoint.getThrottlingStatus(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointRateLimitStatusOut endpointRateLimitStatusOut = svix.getEndpoint().getThrottlingStatus(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_rate_limit_status_out = svix.endpoint.get_throttling_status(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_rate_limit_status_out = svix.endpoint().get_throttling_status(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointRateLimitStatusOut = await svix.Endpoint.GetThrottlingStatusAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-throttling-status \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/rate-limit-status' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover": {
            "post": {
                "description": "Resend all failed messages since a given time.\n\nMessages that were sent successfully, even if failed initially, are not resent.",
                "operationId": "v1.endpoint.recover",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecoverIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecoverOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Recover Failed Webhooks",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const recoverOut = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const recoverOut = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "recover_out = svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn(\n    until=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "recover_out = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn(\n    until=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "recoverOut, err := svixClient.Endpoint.Recover(ctx, \"app_id\", \"endpoint_id\", &RecoverIn{\n    Until: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val recoverOut = svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn()\n    .until(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "RecoverOut recoverOut = svix.getEndpoint().recover(\"app_id\", \"endpoint_id\", new RecoverIn()\n    .until(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "recover_out = svix.endpoint.recover(\"app_id\", \"endpoint_id\", Svix::RecoverIn.new({\n    \"until\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let recover_out = svix.endpoint().recover(\"app_id\", \"endpoint_id\", RecoverIn {\n    until: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var recoverOut = await svix.Endpoint.RecoverAsync(\"app_id\", \"endpoint_id\", new RecoverIn{\n    until: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint recover \"app_id\" \"endpoint_id\" '{\n    \"until\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"until\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing": {
            "post": {
                "description": "Replays messages to the endpoint.\n\nOnly messages that were created after `since` will be sent.\nMessages that were previously sent to the endpoint are not resent.",
                "operationId": "v1.endpoint.replay-missing",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReplayIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReplayOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Replay Missing Webhooks",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const replayOut = await svix.endpoint.replayMissing(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const replayOut = await svix.endpoint.replayMissing(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "replay_out = svix.endpoint.replay_missing(\"app_id\", \"endpoint_id\", ReplayIn(\n    until=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "replay_out = await svix.endpoint.replay_missing(\"app_id\", \"endpoint_id\", ReplayIn(\n    until=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "replayOut, err := svixClient.Endpoint.ReplayMissing(ctx, \"app_id\", \"endpoint_id\", &ReplayIn{\n    Until: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val replayOut = svix.endpoint.replayMissing(\"app_id\", \"endpoint_id\", ReplayIn()\n    .until(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ReplayOut replayOut = svix.getEndpoint().replayMissing(\"app_id\", \"endpoint_id\", new ReplayIn()\n    .until(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "replay_out = svix.endpoint.replay_missing(\"app_id\", \"endpoint_id\", Svix::ReplayIn.new({\n    \"until\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let replay_out = svix.endpoint().replay_missing(\"app_id\", \"endpoint_id\", ReplayIn {\n    until: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var replayOut = await svix.Endpoint.ReplayMissingAsync(\"app_id\", \"endpoint_id\", new ReplayIn{\n    until: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint replay-missing \"app_id\" \"endpoint_id\" '{\n    \"until\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"until\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret": {
            "get": {
                "description": "Get the endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.endpoint.get-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Secret",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointSecretOut = await svix.endpoint.getSecret(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointSecretOut = await svix.endpoint.getSecret(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_secret_out = svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_secret_out = await svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointSecretOut, err := svixClient.Endpoint.GetSecret(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointSecretOut = svix.endpoint.getSecret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointSecretOut endpointSecretOut = svix.getEndpoint().getSecret(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_secret_out = svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_secret_out = svix.endpoint().get_secret(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointSecretOut = await svix.Endpoint.GetSecretAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-secret \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate": {
            "post": {
                "description": "Rotates the endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
                "operationId": "v1.endpoint.rotate-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointSecretRotateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Endpoint Secret",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.RotateSecret(ctx, \"app_id\", \"endpoint_id\", &EndpointSecretRotateIn{\n    Key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().rotateSecret(\"app_id\", \"endpoint_id\", new EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", Svix::EndpointSecretRotateIn.new({\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn {\n    key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.RotateSecretAsync(\"app_id\", \"endpoint_id\", new EndpointSecretRotateIn{\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint rotate-secret \"app_id\" \"endpoint_id\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example": {
            "post": {
                "description": "Send an example message for an event.",
                "operationId": "v1.endpoint.send-example",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventExampleIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Send Event Type Example Message",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_out = svix.endpoint.send_example(\"app_id\", \"endpoint_id\", EventExampleIn(\n    event_type=\"user.signup\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_out = await svix.endpoint.send_example(\"app_id\", \"endpoint_id\", EventExampleIn(\n    event_type=\"user.signup\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageOut, err := svixClient.Endpoint.SendExample(ctx, \"app_id\", \"endpoint_id\", &EventExampleIn{\n    EventType: \"user.signup\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageOut = svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", EventExampleIn()\n    .eventType(\"user.signup\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageOut messageOut = svix.getEndpoint().sendExample(\"app_id\", \"endpoint_id\", new EventExampleIn()\n    .eventType(\"user.signup\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_out = svix.endpoint.send_example(\"app_id\", \"endpoint_id\", Svix::EventExampleIn.new({\n    \"event_type\": \"user.signup\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_out = svix.endpoint().send_example(\"app_id\", \"endpoint_id\", EventExampleIn {\n    event_type: \"user.signup\".to_string(),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageOut = await svix.Endpoint.SendExampleAsync(\"app_id\", \"endpoint_id\", new EventExampleIn{\n    eventType: \"user.signup\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint send-example \"app_id\" \"endpoint_id\" '{\n    \"eventType\": \"user.signup\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventType\": \"user.signup\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats": {
            "get": {
                "description": "Get basic statistics for the endpoint.",
                "operationId": "v1.endpoint.get-stats",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "until",
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointStats"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Endpoint Stats",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointStats = await svix.endpoint.getStats(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointStats = await svix.endpoint.getStats(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_stats = svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_stats = await svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointStats, err := svixClient.Endpoint.GetStats(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointStats = svix.endpoint.getStats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointStats endpointStats = svix.getEndpoint().getStats(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_stats = svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_stats = svix.endpoint().get_stats(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointStats = await svix.Endpoint.GetStatsAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-stats \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation": {
            "get": {
                "description": "Get the transformation code associated with this endpoint.",
                "operationId": "v1.endpoint.transformation-get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Transformation",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointTransformationOut = await svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointTransformationOut = await svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_transformation_out = svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_transformation_out = await svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointTransformationOut, err := svixClient.Endpoint.TransformationGet(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointTransformationOut = svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointTransformationOut endpointTransformationOut = svix.getEndpoint().transformationGet(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_transformation_out = svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_transformation_out = svix.endpoint().transformation_get(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointTransformationOut = await svix.Endpoint.TransformationGetAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint transformation-get \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this endpoint.",
                "operationId": "v1.endpoint.patch-transformation",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointTransformationPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint Transformation",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchTransformation(\"app_id\", \"endpoint_id\", {\n    code: \"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchTransformation(\"app_id\", \"endpoint_id\", {\n    code: \"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.patch_transformation(\"app_id\", \"endpoint_id\", EndpointTransformationPatch(\n    code=\"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.patch_transformation(\"app_id\", \"endpoint_id\", EndpointTransformationPatch(\n    code=\"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.PatchTransformation(ctx, \"app_id\", \"endpoint_id\", &EndpointTransformationPatch{\n    Code: \"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.patchTransformation(\"app_id\", \"endpoint_id\", EndpointTransformationPatch()\n    .code(\"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().patchTransformation(\"app_id\", \"endpoint_id\", new EndpointTransformationPatch()\n    .code(\"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.patch_transformation(\"app_id\", \"endpoint_id\", Svix::EndpointTransformationPatch.new({\n    \"code\": \"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().patch_transformation(\"app_id\", \"endpoint_id\", EndpointTransformationPatch {\n    code: Some(\"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.PatchTransformationAsync(\"app_id\", \"endpoint_id\", new EndpointTransformationPatch{\n    code: \"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint patch-transformation \"app_id\" \"endpoint_id\" '{\n    \"code\": \"function handler(webhook) {\n    if (webhook.payload.customUrl) {\n        webhook.url = webhook.payload.customUrl;\n    }\n    return webhook;\n}\n\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"code\": \"function handler(webhook) {\n        if (webhook.payload.customUrl) {\n            webhook.url = webhook.payload.customUrl;\n        }\n        return webhook;\n    }\n    \"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation-template/oauth/hubspot": {
            "put": {
                "description": "Create / update endpoint Hubspot OAuth configuration.\n\nSpecific private endpoint just for us, to avoid exposing the Hubspot secret to the client.",
                "operationId": "v1.endpoint.update-hubspot-oauth-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HubspotOauthConfigIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Hubspot Oauth Config",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateHubspotOauthConfig(\"app_id\", \"endpoint_id\", {\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateHubspotOauthConfig(\"app_id\", \"endpoint_id\", {\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.update_hubspot_oauth_config(\"app_id\", \"endpoint_id\", HubspotOauthConfigIn(\n\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.update_hubspot_oauth_config(\"app_id\", \"endpoint_id\", HubspotOauthConfigIn(\n\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.UpdateHubspotOauthConfig(ctx, \"app_id\", \"endpoint_id\", &HubspotOauthConfigIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.updateHubspotOauthConfig(\"app_id\", \"endpoint_id\", HubspotOauthConfigIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().updateHubspotOauthConfig(\"app_id\", \"endpoint_id\", new HubspotOauthConfigIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.update_hubspot_oauth_config(\"app_id\", \"endpoint_id\", Svix::HubspotOauthConfigIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().update_hubspot_oauth_config(\"app_id\", \"endpoint_id\", HubspotOauthConfigIn {\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.UpdateHubspotOauthConfigAsync(\"app_id\", \"endpoint_id\", new HubspotOauthConfigIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint update-hubspot-oauth-config \"app_id\" \"endpoint_id\" '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation-template/oauth/hubspot' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate": {
            "post": {
                "description": "Simulate running the transformation on the payload and code.",
                "operationId": "v1.endpoint.transformation-simulate",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransformationSimulateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransformationSimulateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Simulate",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const transformationSimulateOut = await svix.endpoint.transformationSimulate(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const transformationSimulateOut = await svix.endpoint.transformationSimulate(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "transformation_simulate_out = svix.endpoint.transformation_simulate(\"app_id\", \"endpoint_id\", TransformationSimulateIn(\n    event_type=\"user.signup\",\n    channels=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "transformation_simulate_out = await svix.endpoint.transformation_simulate(\"app_id\", \"endpoint_id\", TransformationSimulateIn(\n    event_type=\"user.signup\",\n    channels=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "transformationSimulateOut, err := svixClient.Endpoint.TransformationSimulate(ctx, \"app_id\", \"endpoint_id\", &TransformationSimulateIn{\n    EventType: \"user.signup\",\n    Channels: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val transformationSimulateOut = svix.endpoint.transformationSimulate(\"app_id\", \"endpoint_id\", TransformationSimulateIn()\n    .eventType(\"user.signup\")\n    .channels(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "TransformationSimulateOut transformationSimulateOut = svix.getEndpoint().transformationSimulate(\"app_id\", \"endpoint_id\", new TransformationSimulateIn()\n    .eventType(\"user.signup\")\n    .channels(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "transformation_simulate_out = svix.endpoint.transformation_simulate(\"app_id\", \"endpoint_id\", Svix::TransformationSimulateIn.new({\n    \"event_type\": \"user.signup\",\n    \"channels\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let transformation_simulate_out = svix.endpoint().transformation_simulate(\"app_id\", \"endpoint_id\", TransformationSimulateIn {\n    event_type: \"user.signup\".to_string(),\n    channels: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var transformationSimulateOut = await svix.Endpoint.TransformationSimulateAsync(\"app_id\", \"endpoint_id\", new TransformationSimulateIn{\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint transformation-simulate \"app_id\" \"endpoint_id\" '{\n    \"eventType\": \"user.signup\",\n    \"channels\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventType\": \"user.signup\",\n        \"channels\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/events": {
            "get": {
                "description": "Reads the stream of created messages for an application.",
                "operationId": "v1.message.events",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type.",
                        "in": "query",
                        "name": "channels",
                        "schema": {
                            "description": "Filter response based on the event type.",
                            "items": {
                                "example": "project_1337",
                                "maxLength": 128,
                                "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageEventsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Message Events",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageEventsOut = await svix.message.events(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageEventsOut = await svix.message.events(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_events_out = svix.message.events(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_events_out = await svix.message.events(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageEventsOut, err := svixClient.Message.Events(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageEventsOut = svix.message.events(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageEventsOut messageEventsOut = svix.getMessage().events(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_events_out = svix.message.events(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_events_out = svix.message().events(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageEventsOut = await svix.Message.EventsAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message events \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/events' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/inbound/msg/{inbound_token}": {
            "post": {
                "description": "Handles a raw inbound webhook for the application.",
                "operationId": "v1.inbound.msg",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "inbound_token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The event type's name",
                        "in": "query",
                        "name": "event_type",
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Handle Inbound",
                "tags": [
                    "Inbound"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.inbound.msg(\"app_id\", \"inbound_token\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.inbound.msg(\"app_id\", \"inbound_token\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_out = svix.inbound.msg(\"app_id\", \"inbound_token\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_out = await svix.inbound.msg(\"app_id\", \"inbound_token\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageOut, err := svixClient.Inbound.Msg(ctx, \"app_id\", \"inbound_token\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageOut = svix.inbound.msg(\"app_id\", \"inbound_token\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageOut messageOut = svix.getInbound().msg(\"app_id\", \"inbound_token\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_out = svix.inbound.msg(\"app_id\", \"inbound_token\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_out = svix.inbound().msg(\"app_id\", \"inbound_token\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageOut = await svix.Inbound.MsgAsync(\"app_id\", \"inbound_token\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix inbound msg \"app_id\" \"inbound_token\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/inbound/msg/{inbound_token}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/inbound/rotate-url": {
            "post": {
                "description": "Invalidates the previous inbound url (if one exists), producing a new inbound\nURL for this app.",
                "operationId": "v1.inbound.rotate-url",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RotatedUrlOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Url",
                "tags": [
                    "Inbound"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const rotatedUrlOut = await svix.inbound.rotateUrl(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const rotatedUrlOut = await svix.inbound.rotateUrl(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "rotated_url_out = svix.inbound.rotate_url(\"app_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "rotated_url_out = await svix.inbound.rotate_url(\"app_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "rotatedUrlOut, err := svixClient.Inbound.RotateUrl(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val rotatedUrlOut = svix.inbound.rotateUrl(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "RotatedUrlOut rotatedUrlOut = svix.getInbound().rotateUrl(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "rotated_url_out = svix.inbound.rotate_url(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let rotated_url_out = svix.inbound().rotate_url(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var rotatedUrlOut = await svix.Inbound.RotateUrlAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix inbound rotate-url \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/inbound/rotate-url' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/integration": {
            "get": {
                "description": "List the application's integrations.",
                "operationId": "v1.integration.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_IntegrationOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Integrations",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIntegrationOut = await svix.integration.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIntegrationOut = await svix.integration.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_integration_out = svix.integration.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_integration_out = await svix.integration.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseIntegrationOut, err := svixClient.Integration.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseIntegrationOut = svix.integration.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseIntegrationOut listResponseIntegrationOut = svix.getIntegration().list(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_integration_out = svix.integration.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_integration_out = svix.integration().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseIntegrationOut = await svix.Integration.ListAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an integration.",
                "operationId": "v1.integration.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.create(\"app_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.create(\"app_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_out = svix.integration.create(\"app_id\", IntegrationIn(\n    name=\"Example Integration\",\n    feature_flags=[]\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_out = await svix.integration.create(\"app_id\", IntegrationIn(\n    name=\"Example Integration\",\n    feature_flags=[]\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationOut, err := svixClient.Integration.Create(ctx, \"app_id\", &IntegrationIn{\n    Name: \"Example Integration\",\n    FeatureFlags: []interface{}{},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationOut = svix.integration.create(\"app_id\", IntegrationIn()\n    .name(\"Example Integration\")\n    .featureFlags(arrayOf())\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationOut integrationOut = svix.getIntegration().create(\"app_id\", new IntegrationIn()\n    .name(\"Example Integration\")\n    .featureFlags(new Object[]{})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_out = svix.integration.create(\"app_id\", Svix::IntegrationIn.new({\n    \"name\": \"Example Integration\",\n    \"feature_flags\": []\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_out = svix.integration().create(\"app_id\", IntegrationIn {\n    name: \"Example Integration\".to_string(),\n    feature_flags: Some(vec![]),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationOut = await svix.Integration.CreateAsync(\"app_id\", new IntegrationIn{\n    name: \"Example Integration\",\n    featureFlags: new Object[] {}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration create \"app_id\" '{\n    \"name\": \"Example Integration\",\n    \"featureFlags\": []\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"Example Integration\",\n        \"featureFlags\": []\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}": {
            "delete": {
                "description": "Delete an integration.",
                "operationId": "v1.integration.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.integration.delete(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.integration.delete(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Integration.Delete(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIntegration().delete(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.integration().delete(\"app_id\", \"integ_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Integration.DeleteAsync(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration delete \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an integration.",
                "operationId": "v1.integration.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.get(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.get(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_out = svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_out = await svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationOut, err := svixClient.Integration.Get(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationOut = svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationOut integrationOut = svix.getIntegration().get(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_out = svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_out = svix.integration().get(\"app_id\", \"integ_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationOut = await svix.Integration.GetAsync(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration get \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Update an integration.",
                "operationId": "v1.integration.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.update(\"app_id\", \"integ_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.update(\"app_id\", \"integ_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_out = svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate(\n    name=\"Example Integration\",\n    feature_flags=[]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_out = await svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate(\n    name=\"Example Integration\",\n    feature_flags=[]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationOut, err := svixClient.Integration.Update(ctx, \"app_id\", \"integ_id\", &IntegrationUpdate{\n    Name: \"Example Integration\",\n    FeatureFlags: []interface{}{},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationOut = svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate()\n    .name(\"Example Integration\")\n    .featureFlags(arrayOf())\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationOut integrationOut = svix.getIntegration().update(\"app_id\", \"integ_id\", new IntegrationUpdate()\n    .name(\"Example Integration\")\n    .featureFlags(new Object[]{})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_out = svix.integration.update(\"app_id\", \"integ_id\", Svix::IntegrationUpdate.new({\n    \"name\": \"Example Integration\",\n    \"feature_flags\": []\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_out = svix.integration().update(\"app_id\", \"integ_id\", IntegrationUpdate {\n    name: \"Example Integration\".to_string(),\n    feature_flags: Some(vec![]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationOut = await svix.Integration.UpdateAsync(\"app_id\", \"integ_id\", new IntegrationUpdate{\n    name: \"Example Integration\",\n    featureFlags: new Object[] {}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration update \"app_id\" \"integ_id\" '{\n    \"name\": \"Example Integration\",\n    \"featureFlags\": []\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"Example Integration\",\n        \"featureFlags\": []\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}/key": {
            "get": {
                "deprecated": true,
                "description": "Get an integration's key.",
                "operationId": "v1.integration.get-key",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationKeyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Integration Key",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.getKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.getKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_key_out = svix.integration.get_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_key_out = await svix.integration.get_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationKeyOut, err := svixClient.Integration.GetKey(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationKeyOut = svix.integration.getKey(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationKeyOut integrationKeyOut = svix.getIntegration().getKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_key_out = svix.integration.get_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_key_out = svix.integration().get_key(\"app_id\", \"integ_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationKeyOut = await svix.Integration.GetKeyAsync(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration get-key \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}/key' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}/key/rotate": {
            "post": {
                "description": "Rotate the integration's key. The previous key will be immediately revoked.",
                "operationId": "v1.integration.rotate-key",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationKeyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Integration Key",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.rotateKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.rotateKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_key_out = svix.integration.rotate_key(\"app_id\", \"integ_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_key_out = await svix.integration.rotate_key(\"app_id\", \"integ_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationKeyOut, err := svixClient.Integration.RotateKey(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationKeyOut = svix.integration.rotateKey(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationKeyOut integrationKeyOut = svix.getIntegration().rotateKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_key_out = svix.integration.rotate_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_key_out = svix.integration().rotate_key(\"app_id\", \"integ_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationKeyOut = await svix.Integration.RotateKeyAsync(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration rotate-key \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}/key/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg": {
            "get": {
                "description": "List all of the application's messages.\n\nThe `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results\nwithin a certain window.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.",
                "operationId": "v1.message.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^msg_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel.",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel.",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date.",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date.",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` message payloads are included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` message payloads are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter messages matching the provided tag.",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter messages matching the provided tag.",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Messages",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageOut = await svix.message.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageOut = await svix.message.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_out = svix.message.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_out = await svix.message.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageOut, err := svixClient.Message.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageOut = svix.message.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageOut listResponseMessageOut = svix.getMessage().list(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_out = svix.message.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_out = svix.message().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageOut = await svix.Message.ListAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Creates a new message and dispatches it to all of the application's endpoints.\n\nThe `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made.\nIf a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.\n\nThe `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types.\nMessages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.\n\nThe `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to 1MiB, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.",
                "operationId": "v1.message.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "When `true`, message payloads are included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true`, message payloads are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Payload too large"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.create(\"app_id\", {\n    eventId: \"unique-identifier\",\n    eventType: \"user.signup\",\n    payload: {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    channels: [\"project_123\", \"group_2\"],\n    application: null,\n    tags: [\"my_tag\", \"other\"],\n    transformationsParams: null,\n    payloadRetentionPeriod: 90,\n    payloadRetentionHours: null\n});\n\n// Alternatively, with a raw string payload.\nconst messageOut = await svix.message.create(\n    \"app_id\",\n    svix.messageInRaw(\"user.signup\", \"This is a raw body.\", \"text/plain\"),\n);\n"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.create(\"app_id\", {\n    eventId: \"unique-identifier\",\n    eventType: \"user.signup\",\n    payload: {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    channels: [\"project_123\", \"group_2\"],\n    application: null,\n    tags: [\"my_tag\", \"other\"],\n    transformationsParams: null,\n    payloadRetentionPeriod: 90,\n    payloadRetentionHours: null\n});\n\n// Alternatively, with a raw string payload.\nconst messageOut = await svix.message.create(\n    \"app_id\",\n    svix.messageInRaw(\"user.signup\", \"This is a raw body.\", \"text/plain\"),\n);\n"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_out = svix.message.create(\"app_id\", MessageIn(\n    event_id=\"unique-identifier\",\n    event_type=\"user.signup\",\n    payload={\"email\": \"test@example.com\", \"type\": \"user.created\", \"username\": \"test_user\"},\n    channels=[\"project_123\", \"group_2\"],\n    application=None,\n    tags=[\"my_tag\", \"other\"],\n    transformations_params=None,\n    payload_retention_period=90,\n    payload_retention_hours=None\n), options=...)\n\n# Alternatively, with a raw string payload.\nmessage_out = svix.message.create(\"app_id\", svix.message_in_raw(\n    event_type=\"user.signup\",\n    payload=\"This is a raw body.\",\n    content_type=\"text/plain\",\n), options=...)\n"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_out = await svix.message.create(\"app_id\", MessageIn(\n    event_id=\"unique-identifier\",\n    event_type=\"user.signup\",\n    payload={\"email\": \"test@example.com\", \"type\": \"user.created\", \"username\": \"test_user\"},\n    channels=[\"project_123\", \"group_2\"],\n    application=None,\n    tags=[\"my_tag\", \"other\"],\n    transformations_params=None,\n    payload_retention_period=90,\n    payload_retention_hours=None\n), options=...)\n\n# Alternatively, with a raw string payload.\nmessage_out = await svix.message.create(\"app_id\", await svix.message_in_raw(\n    event_type=\"user.signup\",\n    payload=\"This is a raw body.\",\n    content_type=\"text/plain\",\n), options=...)\n"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageOut, err := svixClient.Message.Create(ctx, \"app_id\", &MessageIn{\n    EventId: \"unique-identifier\",\n    EventType: \"user.signup\",\n    Payload: map[string]interface{}{\"email\": \"test@example.com\", \"type\": \"user.created\", \"username\": \"test_user\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n    Application: nil,\n    Tags: []string{\"my_tag\", \"other\"},\n    TransformationsParams: nil,\n    PayloadRetentionPeriod: 90,\n    PayloadRetentionHours: nil,\n})\n\n// Alternatively, with a raw string payload.\nmessageOut, err := svixClient.Message.Create(ctx, \"app_id\", &svix.NewMessageInRaw(\n    \"user.signup\",\n    \"This is a raw body.\",\n    svix.StaticNullableString(\"text/plain\"),\n))\n"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageOut = svix.message.create(\"app_id\", MessageIn()\n    .eventId(\"unique-identifier\")\n    .eventType(\"user.signup\")\n    .payload(/* ... */)\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n    .application(null)\n    .tags(arrayOf(\"my_tag\", \"other\"))\n    .transformationsParams(null)\n    .payloadRetentionPeriod(90)\n    .payloadRetentionHours(null)\n)\n\n// Alternatively, with a raw string payload.\nval messageOut = svix.message.create(\"app_id\", svix.messageInRaw(\n    eventType = \"user.signup\",\n    payload = \"This is a raw body.\",\n    contentType = \"text/plain\",\n))\n"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageOut messageOut = svix.getMessage().create(\"app_id\", new MessageIn()\n    .eventId(\"unique-identifier\")\n    .eventType(\"user.signup\")\n    .payload(/* ... */)\n    .channels(new String[]{\"project_123\", \"group_2\"})\n    .application(null)\n    .tags(new String[]{\"my_tag\", \"other\"})\n    .transformationsParams(null)\n    .payloadRetentionPeriod(90)\n    .payloadRetentionHours(null)\n);\n\n// Alternatively, with a raw string payload.\nMessageOut messageOut = svix.getMessage().create(\n    \"app_id\",\n    Message.messageInRaw(\"This is a raw body.\", \"text/plain\")\n        .eventType(\"user.signup\")\n);\n"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_out = svix.message.create(\"app_id\", Svix::MessageIn.new({\n    \"event_id\": \"unique-identifier\",\n    \"event_type\": \"user.signup\",\n    \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"application\": nil,\n    \"tags\": [\"my_tag\", \"other\"],\n    \"transformations_params\": nil,\n    \"payload_retention_period\": 90,\n    \"payload_retention_hours\": nil\n}))\n\n# Alternatively, with a raw string payload.\nmessage_out = svix.message.create(\"app_id\", Svix.message_in_raw({\n    event_type: \"user.signup\",\n    payload: \"This is a raw body.\",\n    content_type: \"text/plain\",\n}))\n"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_out = svix.message().create(\"app_id\", MessageIn {\n    event_id: Some(\"unique-identifier\".to_string()),\n    event_type: \"user.signup\".to_string(),\n    payload: json!({\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"}),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n    application: None,\n    tags: Some(vec![\"my_tag\".to_string(), \"other\".to_string()]),\n    transformations_params: None,\n    payload_retention_period: Some(90),\n    payload_retention_hours: None,\n}, None).await?;\n\n// Alternatively, with a raw string payload.\nlet message_out = svix.message().create(\n    \"app_id\",\n    MessageIn::new_raw_payload(\n        \"user.signup\".to_string(),\n        \"This is a raw body.\".to_string(),\n    ).with_content_type(\"text/plain\".to_string()),\n    None,\n).await?;\n"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageOut = await svix.Message.CreateAsync(\"app_id\", new MessageIn{\n    eventId: \"unique-identifier\",\n    eventType: \"user.signup\",\n    payload: /* ... */,\n    channels: new string[] {\"project_123\", \"group_2\"},\n    application: null,\n    tags: new string[] {\"my_tag\", \"other\"},\n    transformationsParams: null,\n    payloadRetentionPeriod: 90,\n    payloadRetentionHours: null\n});\n\n// Alternatively, with a raw string payload.\nvar messageOut = await svix.Message.CreateAsync(\n    \"app_id\",\n    svix.Message.messageInRaw(\n        eventType: \"user.signup\",\n        payload: \"This is a raw body.\",\n        contentType: \"text/plain\",\n    ),\n);\n"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message create \"app_id\" '{\n    \"eventId\": \"unique-identifier\",\n    \"eventType\": \"user.signup\",\n    \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"application\": null,\n    \"tags\": [\"my_tag\", \"other\"],\n    \"transformationsParams\": null,\n    \"payloadRetentionPeriod\": 90,\n    \"payloadRetentionHours\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventId\": \"unique-identifier\",\n        \"eventType\": \"user.signup\",\n        \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"application\": null,\n        \"tags\": [\"my_tag\", \"other\"],\n        \"transformationsParams\": null,\n        \"payloadRetentionPeriod\": 90,\n        \"payloadRetentionHours\": null\n    }'\n\n# Alternatively, with a raw string payload.\ncurl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n      \"eventType\": \"user.signup\",\n      \"payload\": {},\n      \"transformationsParams\": {\n          \"rawPayload\": \"This is a raw body.\",\n          \"headers\": { \"content-type\": \"text/plain\" }\n      }\n  }'\n"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/expunge-all-contents": {
            "post": {
                "description": "Delete all message payloads for the application.\n\nThis operation is only available in the <a href=\"https://svix.com/pricing\" target=\"_blank\">Enterprise</a> plan.",
                "operationId": "v1.message.expunge-all-contents",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpungeAllContentsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expunge all message contents",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const expungeAllContentsOut = await svix.message.expungeAllContents(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const expungeAllContentsOut = await svix.message.expungeAllContents(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "expunge_all_contents_out = svix.message.expunge_all_contents(\"app_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "expunge_all_contents_out = await svix.message.expunge_all_contents(\"app_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "expungeAllContentsOut, err := svixClient.Message.ExpungeAllContents(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val expungeAllContentsOut = svix.message.expungeAllContents(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ExpungeAllContentsOut expungeAllContentsOut = svix.getMessage().expungeAllContents(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "expunge_all_contents_out = svix.message.expunge_all_contents(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let expunge_all_contents_out = svix.message().expunge_all_contents(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var expungeAllContentsOut = await svix.Message.ExpungeAllContentsAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message expunge-all-contents \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/expunge-all-contents' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/precheck/active": {
            "post": {
                "description": "A pre-check call for `create.message` that checks whether endpoints are actively listening to\nthis message.",
                "operationId": "v1.message.precheck",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessagePrecheckIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagePrecheckOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message Precheck",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messagePrecheckOut = await svix.message.precheck(\"app_id\", {\n    eventType: \"user.signup\",\n    channels: [\"project_123\", \"group_2\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messagePrecheckOut = await svix.message.precheck(\"app_id\", {\n    eventType: \"user.signup\",\n    channels: [\"project_123\", \"group_2\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_precheck_out = svix.message.precheck(\"app_id\", MessagePrecheckIn(\n    event_type=\"user.signup\",\n    channels=[\"project_123\", \"group_2\"]\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_precheck_out = await svix.message.precheck(\"app_id\", MessagePrecheckIn(\n    event_type=\"user.signup\",\n    channels=[\"project_123\", \"group_2\"]\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messagePrecheckOut, err := svixClient.Message.Precheck(ctx, \"app_id\", &MessagePrecheckIn{\n    EventType: \"user.signup\",\n    Channels: []string{\"project_123\", \"group_2\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messagePrecheckOut = svix.message.precheck(\"app_id\", MessagePrecheckIn()\n    .eventType(\"user.signup\")\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessagePrecheckOut messagePrecheckOut = svix.getMessage().precheck(\"app_id\", new MessagePrecheckIn()\n    .eventType(\"user.signup\")\n    .channels(new String[]{\"project_123\", \"group_2\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_precheck_out = svix.message.precheck(\"app_id\", Svix::MessagePrecheckIn.new({\n    \"event_type\": \"user.signup\",\n    \"channels\": [\"project_123\", \"group_2\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_precheck_out = svix.message().precheck(\"app_id\", MessagePrecheckIn {\n    event_type: \"user.signup\".to_string(),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messagePrecheckOut = await svix.Message.PrecheckAsync(\"app_id\", new MessagePrecheckIn{\n    eventType: \"user.signup\",\n    channels: new string[] {\"project_123\", \"group_2\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message precheck \"app_id\" '{\n    \"eventType\": \"user.signup\",\n    \"channels\": [\"project_123\", \"group_2\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/precheck/active' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventType\": \"user.signup\",\n        \"channels\": [\"project_123\", \"group_2\"]\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}": {
            "get": {
                "description": "Get a message by its ID or eventID.",
                "operationId": "v1.message.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "When `true` message payloads are included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` message payloads are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Message",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.get(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.get(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_out = svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_out = await svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageOut, err := svixClient.Message.Get(ctx, \"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageOut = svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageOut messageOut = svix.getMessage().get(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_out = svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_out = svix.message().get(\"app_id\", \"msg_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageOut = await svix.Message.GetAsync(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message get \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}": {
            "get": {
                "description": "`msg_id`: Use a message id or a message `eventId`",
                "operationId": "v1.message-attempt.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The MessageAttempt's ID.",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The MessageAttempt's ID.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Attempt",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptOut = await svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptOut = await svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_attempt_out = svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_attempt_out = await svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageAttemptOut, err := svixClient.MessageAttempt.Get(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageAttemptOut = svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageAttemptOut messageAttemptOut = svix.getMessageAttempt().get(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_attempt_out = svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_attempt_out = svix.message_attempt().get(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageAttemptOut = await svix.MessageAttempt.GetAsync(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt get \"app_id\" \"msg_id\" \"attempt_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content": {
            "delete": {
                "description": "Deletes the given attempt's response body.\n\nUseful when an endpoint accidentally returned sensitive content.\nThe message can't be replayed or resent once its payload has been deleted or expired.",
                "operationId": "v1.message-attempt.expunge-content",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The MessageAttempt's ID.",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The MessageAttempt's ID.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete attempt response body",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.MessageAttempt.ExpungeContent(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessageAttempt().expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message_attempt().expunge_content(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.MessageAttempt.ExpungeContentAsync(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt expunge-content \"app_id\" \"msg_id\" \"attempt_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers": {
            "get": {
                "description": "Calculate and return headers used on a given message attempt",
                "operationId": "v1.message-attempt.get-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The MessageAttempt's ID.",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The MessageAttempt's ID.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Attempt Headers",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptHeadersOut = await svix.messageAttempt.getHeaders(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptHeadersOut = await svix.messageAttempt.getHeaders(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_attempt_headers_out = svix.message_attempt.get_headers(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_attempt_headers_out = await svix.message_attempt.get_headers(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageAttemptHeadersOut, err := svixClient.MessageAttempt.GetHeaders(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageAttemptHeadersOut = svix.messageAttempt.getHeaders(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageAttemptHeadersOut messageAttemptHeadersOut = svix.getMessageAttempt().getHeaders(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_attempt_headers_out = svix.message_attempt.get_headers(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_attempt_headers_out = svix.message_attempt().get_headers(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageAttemptHeadersOut = await svix.MessageAttempt.GetHeadersAsync(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt get-headers \"app_id\" \"msg_id\" \"attempt_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/content": {
            "delete": {
                "description": "Delete the given message's payload.\n\nUseful in cases when a message was accidentally sent with sensitive content.\nThe message can't be replayed or resent once its payload has been deleted or expired.",
                "operationId": "v1.message.expunge-content",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete message payload",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.message.expungeContent(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.message.expungeContent(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message.expunge_content(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.message.expunge_content(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Message.ExpungeContent(ctx, \"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.message.expungeContent(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessage().expungeContent(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.message.expunge_content(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message().expunge_content(\"app_id\", \"msg_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Message.ExpungeContentAsync(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message expunge-content \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/content' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/endpoint": {
            "get": {
                "description": "List endpoints attempted by a given message.\n\nAdditionally includes metadata about the latest message attempt.\nBy default, endpoints are listed in ascending order by ID.",
                "operationId": "v1.message-attempt.list-attempted-destinations",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempted Destinations",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageEndpointOut = await svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageEndpointOut = await svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_endpoint_out = svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_endpoint_out = await svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageEndpointOut, err := svixClient.MessageAttempt.ListAttemptedDestinations(ctx, \"app_id\", \"msg_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageEndpointOut = svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageEndpointOut listResponseMessageEndpointOut = svix.getMessageAttempt().listAttemptedDestinations(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_endpoint_out = svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_endpoint_out = svix.message_attempt().list_attempted_destinations(\"app_id\", \"msg_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageEndpointOut = await svix.MessageAttempt.ListAttemptedDestinationsAsync(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-attempted-destinations \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend": {
            "post": {
                "description": "Resend a message to the specified endpoint.",
                "operationId": "v1.message-attempt.resend",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Resend Webhook",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.MessageAttempt.Resend(ctx, \"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessageAttempt().resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message_attempt().resend(\"app_id\", \"msg_id\", \"endpoint_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.MessageAttempt.ResendAsync(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt resend \"app_id\" \"msg_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/raw": {
            "get": {
                "description": "Get a message raw payload by its ID or eventID.",
                "operationId": "v1.message.get-raw-payload",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageRawPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Raw Message Payload",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageRawPayloadOut = await svix.message.getRawPayload(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageRawPayloadOut = await svix.message.getRawPayload(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_raw_payload_out = svix.message.get_raw_payload(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_raw_payload_out = await svix.message.get_raw_payload(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageRawPayloadOut, err := svixClient.Message.GetRawPayload(ctx, \"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageRawPayloadOut = svix.message.getRawPayload(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageRawPayloadOut messageRawPayloadOut = svix.getMessage().getRawPayload(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_raw_payload_out = svix.message.get_raw_payload(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_raw_payload_out = svix.message().get_raw_payload(\"app_id\", \"msg_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageRawPayloadOut = await svix.Message.GetRawPayloadAsync(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message get-raw-payload \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/raw' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/poller/{sink_id}": {
            "get": {
                "description": "Reads the stream of created messages for an application, filtered on the Sink's event types and Channels.",
                "operationId": "v1.message.poller.poll",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filters messages sent with this event type (optional).",
                        "in": "query",
                        "name": "event_type",
                        "schema": {
                            "description": "Filters messages sent with this event type (optional).",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filters messages sent with this channel (optional).",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filters messages sent with this channel (optional).",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollingEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Poll",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const pollingEndpointOut = await svix.message.poller.poll(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const pollingEndpointOut = await svix.message.poller.poll(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "polling_endpoint_out = svix.message.poller.poll(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "polling_endpoint_out = await svix.message.poller.poll(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "pollingEndpointOut, err := svixClient.Message.Poller.Poll(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val pollingEndpointOut = svix.message.poller.poll(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "PollingEndpointOut pollingEndpointOut = svix.getMessage().getPoller().poll(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "polling_endpoint_out = svix.message.poller.poll(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let polling_endpoint_out = svix.message().poller().poll(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var pollingEndpointOut = await svix.Message.Poller.PollAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message poller poll \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/poller/{sink_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/poller/{sink_id}/consumer/{consumer_id}": {
            "get": {
                "description": "Reads the stream of created messages for an application, filtered on the Sink's event types and\nChannels, using server-managed iterator tracking.",
                "operationId": "v1.message.poller.consumer-poll",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "consumer_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollingEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Consumer Poll",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const pollingEndpointOut = await svix.message.poller.consumerPoll(\"app_id\", \"sink_id\", \"consumer_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const pollingEndpointOut = await svix.message.poller.consumerPoll(\"app_id\", \"sink_id\", \"consumer_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "polling_endpoint_out = svix.message.poller.consumer_poll(\"app_id\", \"sink_id\", \"consumer_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "polling_endpoint_out = await svix.message.poller.consumer_poll(\"app_id\", \"sink_id\", \"consumer_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "pollingEndpointOut, err := svixClient.Message.Poller.ConsumerPoll(ctx, \"app_id\", \"sink_id\", \"consumer_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val pollingEndpointOut = svix.message.poller.consumerPoll(\"app_id\", \"sink_id\", \"consumer_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "PollingEndpointOut pollingEndpointOut = svix.getMessage().getPoller().consumerPoll(\"app_id\", \"sink_id\", \"consumer_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "polling_endpoint_out = svix.message.poller.consumer_poll(\"app_id\", \"sink_id\", \"consumer_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let polling_endpoint_out = svix.message().poller().consumer_poll(\"app_id\", \"sink_id\", \"consumer_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var pollingEndpointOut = await svix.Message.Poller.ConsumerPollAsync(\"app_id\", \"sink_id\", \"consumer_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message poller consumer-poll \"app_id\" \"sink_id\" \"consumer_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/poller/{sink_id}/consumer/{consumer_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/poller/{sink_id}/consumer/{consumer_id}/seek": {
            "post": {
                "description": "Sets the starting offset for the consumer of a polling endpoint.",
                "operationId": "v1.message.poller.consumer-seek",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "consumer_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollingEndpointConsumerSeekIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollingEndpointConsumerSeekOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Consumer Seek",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const pollingEndpointConsumerSeekOut = await svix.message.poller.consumerSeek(\"app_id\", \"sink_id\", \"consumer_id\", {\n    after: \"2025-04-21T11:20:34Z\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const pollingEndpointConsumerSeekOut = await svix.message.poller.consumerSeek(\"app_id\", \"sink_id\", \"consumer_id\", {\n    after: \"2025-04-21T11:20:34Z\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "polling_endpoint_consumer_seek_out = svix.message.poller.consumer_seek(\"app_id\", \"sink_id\", \"consumer_id\", PollingEndpointConsumerSeekIn(\n    after=\"2025-04-21T11:20:34Z\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "polling_endpoint_consumer_seek_out = await svix.message.poller.consumer_seek(\"app_id\", \"sink_id\", \"consumer_id\", PollingEndpointConsumerSeekIn(\n    after=\"2025-04-21T11:20:34Z\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "pollingEndpointConsumerSeekOut, err := svixClient.Message.Poller.ConsumerSeek(ctx, \"app_id\", \"sink_id\", \"consumer_id\", &PollingEndpointConsumerSeekIn{\n    After: \"2025-04-21T11:20:34Z\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val pollingEndpointConsumerSeekOut = svix.message.poller.consumerSeek(\"app_id\", \"sink_id\", \"consumer_id\", PollingEndpointConsumerSeekIn()\n    .after(\"2025-04-21T11:20:34Z\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "PollingEndpointConsumerSeekOut pollingEndpointConsumerSeekOut = svix.getMessage().getPoller().consumerSeek(\"app_id\", \"sink_id\", \"consumer_id\", new PollingEndpointConsumerSeekIn()\n    .after(\"2025-04-21T11:20:34Z\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "polling_endpoint_consumer_seek_out = svix.message.poller.consumer_seek(\"app_id\", \"sink_id\", \"consumer_id\", Svix::PollingEndpointConsumerSeekIn.new({\n    \"after\": \"2025-04-21T11:20:34Z\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let polling_endpoint_consumer_seek_out = svix.message().poller().consumer_seek(\"app_id\", \"sink_id\", \"consumer_id\", PollingEndpointConsumerSeekIn {\n    after: \"2025-04-21T11:20:34Z\".to_string(),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var pollingEndpointConsumerSeekOut = await svix.Message.Poller.ConsumerSeekAsync(\"app_id\", \"sink_id\", \"consumer_id\", new PollingEndpointConsumerSeekIn{\n    after: \"2025-04-21T11:20:34Z\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message poller consumer-seek \"app_id\" \"sink_id\" \"consumer_id\" '{\n    \"after\": \"2025-04-21T11:20:34Z\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/poller/{sink_id}/consumer/{consumer_id}/seek' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"after\": \"2025-04-21T11:20:34Z\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/sink": {
            "get": {
                "description": "List the application's sinks.",
                "operationId": "v1.sink.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_SinkOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Sinks",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseSinkOut = await svix.sink.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseSinkOut = await svix.sink.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_sink_out = svix.sink.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_sink_out = await svix.sink.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseSinkOut, err := svixClient.Sink.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseSinkOut = svix.sink.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseSinkOut listResponseSinkOut = svix.getSink().list(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_sink_out = svix.sink.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_sink_out = svix.sink().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseSinkOut = await svix.Sink.ListAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix sink list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/sink' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Create a new sink for the application.",
                "operationId": "v1.sink.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Sink",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/sink/{sink_id}": {
            "get": {
                "description": "Get a sink.",
                "operationId": "v1.sink.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const sinkOut = await svix.sink.get(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const sinkOut = await svix.sink.get(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "sink_out = svix.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "sink_out = await svix.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "sinkOut, err := svixClient.Sink.Get(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val sinkOut = svix.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SinkOut sinkOut = svix.getSink().get(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "sink_out = svix.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let sink_out = svix.sink().get(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var sinkOut = await svix.Sink.GetAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix sink get \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/sink/{sink_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stats": {
            "get": {
                "description": "Get basic statistics for the application.",
                "operationId": "v1.application.get-stats",
                "parameters": [
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "since",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "until",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationStats"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Stats",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationStats = await svix.application.getStats(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationStats = await svix.application.getStats(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_stats = svix.application.get_stats(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_stats = await svix.application.get_stats(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationStats, err := svixClient.Application.GetStats(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationStats = svix.application.getStats(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationStats applicationStats = svix.getApplication().getStats(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_stats = svix.application.get_stats(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_stats = svix.application().get_stats(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationStats = await svix.Application.GetStatsAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application get-stats \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stats' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink": {
            "get": {
                "description": "List of all the stream's sinks.",
                "operationId": "v1.app.stream.sink.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 27,
                            "minLength": 27,
                            "nullable": true,
                            "pattern": "^sink_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamSinkOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Sinks",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamSinkOut = await svix.app.stream.sink.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamSinkOut = await svix.app.stream.sink.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_stream_sink_out = svix.app.stream.sink.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_stream_sink_out = await svix.app.stream.sink.list(\"app_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseStreamSinkOut, err := svixClient.App.Stream.Sink.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseStreamSinkOut = svix.app.stream.sink.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseStreamSinkOut listResponseStreamSinkOut = svix.getApp().getStream().getSink().list(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_stream_sink_out = svix.app.stream.sink.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_stream_sink_out = svix.app().stream().sink().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseStreamSinkOut = await svix.App.Stream.Sink.ListAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Creates a new sink.",
                "operationId": "v1.app.stream.sink.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}": {
            "delete": {
                "description": "Delete a sink.",
                "operationId": "v1.app.stream.sink.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.app.stream.sink.delete(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.app.stream.sink.delete(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.app.stream.sink.delete(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.app.stream.sink.delete(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.App.Stream.Sink.Delete(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.app.stream.sink.delete(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getApp().getStream().getSink().delete(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.app.stream.sink.delete(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.app().stream().sink().delete(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.App.Stream.Sink.DeleteAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink delete \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get a sink by id or uid.",
                "operationId": "v1.app.stream.sink.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamSinkOut = await svix.app.stream.sink.get(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamSinkOut = await svix.app.stream.sink.get(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_sink_out = svix.app.stream.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_sink_out = await svix.app.stream.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamSinkOut, err := svixClient.App.Stream.Sink.Get(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamSinkOut = svix.app.stream.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamSinkOut streamSinkOut = svix.getApp().getStream().getSink().get(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_sink_out = svix.app.stream.sink.get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_sink_out = svix.app().stream().sink().get(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamSinkOut = await svix.App.Stream.Sink.GetAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink get \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Partially update a sink.",
                "operationId": "v1.app.stream.sink.patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update a sink.",
                "operationId": "v1.app.stream.sink.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/force-retry": {
            "post": {
                "description": "Forces a Sink to retry immediately (if dispatch is paused)",
                "operationId": "v1.app.stream.sink.force-retry",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Force Retry Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.app.stream.sink.forceRetry(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.app.stream.sink.forceRetry(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.app.stream.sink.force_retry(\"app_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.app.stream.sink.force_retry(\"app_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.App.Stream.Sink.ForceRetry(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.app.stream.sink.forceRetry(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getApp().getStream().getSink().forceRetry(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.app.stream.sink.force_retry(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.app().stream().sink().force_retry(\"app_id\", \"sink_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.App.Stream.Sink.ForceRetryAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink force-retry \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/force-retry' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/headers": {
            "get": {
                "description": "Get the HTTP sink headers",
                "operationId": "v1.app.stream.sink.headers-get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.app.stream.sink.headersGet(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.app.stream.sink.headersGet(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_headers_out = svix.app.stream.sink.headers_get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_headers_out = await svix.app.stream.sink.headers_get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointHeadersOut, err := svixClient.App.Stream.Sink.HeadersGet(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointHeadersOut = svix.app.stream.sink.headersGet(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointHeadersOut endpointHeadersOut = svix.getApp().getStream().getSink().headersGet(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_headers_out = svix.app.stream.sink.headers_get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_headers_out = svix.app().stream().sink().headers_get(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointHeadersOut = await svix.App.Stream.Sink.HeadersGetAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink headers-get \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Patch the HTTP sink headers",
                "operationId": "v1.app.stream.sink.headers-patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HttpSinkHeadersPatchIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.app.stream.sink.headersPatch(\"app_id\", \"sink_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.app.stream.sink.headersPatch(\"app_id\", \"sink_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_headers_out = svix.app.stream.sink.headers_patch(\"app_id\", \"sink_id\", HttpSinkHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_headers_out = await svix.app.stream.sink.headers_patch(\"app_id\", \"sink_id\", HttpSinkHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointHeadersOut, err := svixClient.App.Stream.Sink.HeadersPatch(ctx, \"app_id\", \"sink_id\", &HttpSinkHeadersPatchIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointHeadersOut = svix.app.stream.sink.headersPatch(\"app_id\", \"sink_id\", HttpSinkHeadersPatchIn()\n    .headers(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointHeadersOut endpointHeadersOut = svix.getApp().getStream().getSink().headersPatch(\"app_id\", \"sink_id\", new HttpSinkHeadersPatchIn()\n    .headers(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_headers_out = svix.app.stream.sink.headers_patch(\"app_id\", \"sink_id\", Svix::HttpSinkHeadersPatchIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_headers_out = svix.app().stream().sink().headers_patch(\"app_id\", \"sink_id\", HttpSinkHeadersPatchIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointHeadersOut = await svix.App.Stream.Sink.HeadersPatchAsync(\"app_id\", \"sink_id\", new HttpSinkHeadersPatchIn{\n    headers: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink headers-patch \"app_id\" \"sink_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/last-acked-event": {
            "get": {
                "description": "Get the latest event acked from the stream",
                "operationId": "v1.app.stream.sink.get-last-acked-event",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Last Acked Event",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventOut = await svix.app.stream.sink.getLastAckedEvent(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventOut = await svix.app.stream.sink.getLastAckedEvent(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_out = svix.app.stream.sink.get_last_acked_event(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_out = await svix.app.stream.sink.get_last_acked_event(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventOut, err := svixClient.App.Stream.Sink.GetLastAckedEvent(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventOut = svix.app.stream.sink.getLastAckedEvent(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventOut eventOut = svix.getApp().getStream().getSink().getLastAckedEvent(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_out = svix.app.stream.sink.get_last_acked_event(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_out = svix.app().stream().sink().get_last_acked_event(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventOut = await svix.App.Stream.Sink.GetLastAckedEventAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink get-last-acked-event \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/last-acked-event' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/secret": {
            "get": {
                "description": "Get the sink's signing secret (only supported for http sinks)\n\nThis is used to verify the authenticity of the delivery\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.app.stream.sink.get-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const sinkSecretOut = await svix.app.stream.sink.getSecret(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const sinkSecretOut = await svix.app.stream.sink.getSecret(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "sink_secret_out = svix.app.stream.sink.get_secret(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "sink_secret_out = await svix.app.stream.sink.get_secret(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "sinkSecretOut, err := svixClient.App.Stream.Sink.GetSecret(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val sinkSecretOut = svix.app.stream.sink.getSecret(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SinkSecretOut sinkSecretOut = svix.getApp().getStream().getSink().getSecret(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "sink_secret_out = svix.app.stream.sink.get_secret(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let sink_secret_out = svix.app().stream().sink().get_secret(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var sinkSecretOut = await svix.App.Stream.Sink.GetSecretAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink get-secret \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/secret/rotate": {
            "post": {
                "description": "Rotates the signing secret (only supported for http sinks).",
                "operationId": "v1.app.stream.sink.rotate-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointSecretRotateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.app.stream.sink.rotateSecret(\"app_id\", \"sink_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.app.stream.sink.rotateSecret(\"app_id\", \"sink_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "empty_response = svix.app.stream.sink.rotate_secret(\"app_id\", \"sink_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "empty_response = await svix.app.stream.sink.rotate_secret(\"app_id\", \"sink_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "emptyResponse, err := svixClient.App.Stream.Sink.RotateSecret(ctx, \"app_id\", \"sink_id\", &EndpointSecretRotateIn{\n    Key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val emptyResponse = svix.app.stream.sink.rotateSecret(\"app_id\", \"sink_id\", EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EmptyResponse emptyResponse = svix.getApp().getStream().getSink().rotateSecret(\"app_id\", \"sink_id\", new EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "empty_response = svix.app.stream.sink.rotate_secret(\"app_id\", \"sink_id\", Svix::EndpointSecretRotateIn.new({\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let empty_response = svix.app().stream().sink().rotate_secret(\"app_id\", \"sink_id\", EndpointSecretRotateIn {\n    key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var emptyResponse = await svix.App.Stream.Sink.RotateSecretAsync(\"app_id\", \"sink_id\", new EndpointSecretRotateIn{\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink rotate-secret \"app_id\" \"sink_id\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/skip": {
            "post": {
                "description": "Skip the last n events from the sink",
                "operationId": "v1.app.stream.sink.skip",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "n",
                        "schema": {
                            "default": 1,
                            "format": "uint64",
                            "maximum": 1000,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Skip N Events",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.app.stream.sink.skip(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.app.stream.sink.skip(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.app.stream.sink.skip(\"app_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.app.stream.sink.skip(\"app_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.App.Stream.Sink.Skip(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.app.stream.sink.skip(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getApp().getStream().getSink().skip(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.app.stream.sink.skip(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.app().stream().sink().skip(\"app_id\", \"sink_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.App.Stream.Sink.SkipAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink skip \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/skip' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/transformation": {
            "get": {
                "description": "Get the transformation code associated with this endpoint.",
                "operationId": "v1.app.stream.sink-transformation-get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const sinkTransformationOut = await svix.app.stream.sinkTransformationGet(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const sinkTransformationOut = await svix.app.stream.sinkTransformationGet(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "sink_transformation_out = svix.app.stream.sink_transformation_get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "sink_transformation_out = await svix.app.stream.sink_transformation_get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "sinkTransformationOut, err := svixClient.App.Stream.SinkTransformationGet(ctx, \"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val sinkTransformationOut = svix.app.stream.sinkTransformationGet(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SinkTransformationOut sinkTransformationOut = svix.getApp().getStream().sinkTransformationGet(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "sink_transformation_out = svix.app.stream.sink_transformation_get(\"app_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let sink_transformation_out = svix.app().stream().sink_transformation_get(\"app_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var sinkTransformationOut = await svix.App.Stream.SinkTransformationGetAsync(\"app_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink-transformation-get \"app_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this sink.",
                "operationId": "v1.app.stream.sink.transformation-partial-update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SinkTransformIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Set Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.app.stream.sink.transformationPartialUpdate(\"app_id\", \"sink_id\", {\n    code: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.app.stream.sink.transformationPartialUpdate(\"app_id\", \"sink_id\", {\n    code: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "empty_response = svix.app.stream.sink.transformation_partial_update(\"app_id\", \"sink_id\", SinkTransformIn(\n    code=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "empty_response = await svix.app.stream.sink.transformation_partial_update(\"app_id\", \"sink_id\", SinkTransformIn(\n    code=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "emptyResponse, err := svixClient.App.Stream.Sink.TransformationPartialUpdate(ctx, \"app_id\", \"sink_id\", &SinkTransformIn{\n    Code: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val emptyResponse = svix.app.stream.sink.transformationPartialUpdate(\"app_id\", \"sink_id\", SinkTransformIn()\n    .code(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EmptyResponse emptyResponse = svix.getApp().getStream().getSink().transformationPartialUpdate(\"app_id\", \"sink_id\", new SinkTransformIn()\n    .code(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "empty_response = svix.app.stream.sink.transformation_partial_update(\"app_id\", \"sink_id\", Svix::SinkTransformIn.new({\n    \"code\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let empty_response = svix.app().stream().sink().transformation_partial_update(\"app_id\", \"sink_id\", SinkTransformIn {\n    code: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var emptyResponse = await svix.App.Stream.Sink.TransformationPartialUpdateAsync(\"app_id\", \"sink_id\", new SinkTransformIn{\n    code: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stream sink transformation-partial-update \"app_id\" \"sink_id\" '{\n    \"code\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/stream/sink/{sink_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"code\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/app-portal-access/{app_id}": {
            "post": {
                "description": "Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.",
                "operationId": "v1.authentication.app-portal-access",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppPortalAccessIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppPortalAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Consumer App Portal Access",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const appPortalAccessOut = await svix.authentication.appPortalAccess(\"app_id\", {\n    application: null,\n    featureFlags: [],\n    expiry: null,\n    readOnly: null,\n    sessionId: \"user_1FB8\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const appPortalAccessOut = await svix.authentication.appPortalAccess(\"app_id\", {\n    application: null,\n    featureFlags: [],\n    expiry: null,\n    readOnly: null,\n    sessionId: \"user_1FB8\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "app_portal_access_out = svix.authentication.app_portal_access(\"app_id\", AppPortalAccessIn(\n    application=None,\n    feature_flags=[],\n    expiry=None,\n    read_only=None,\n    session_id=\"user_1FB8\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "app_portal_access_out = await svix.authentication.app_portal_access(\"app_id\", AppPortalAccessIn(\n    application=None,\n    feature_flags=[],\n    expiry=None,\n    read_only=None,\n    session_id=\"user_1FB8\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "appPortalAccessOut, err := svixClient.Authentication.AppPortalAccess(ctx, \"app_id\", &AppPortalAccessIn{\n    Application: nil,\n    FeatureFlags: []interface{}{},\n    Expiry: nil,\n    ReadOnly: nil,\n    SessionId: \"user_1FB8\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val appPortalAccessOut = svix.authentication.appPortalAccess(\"app_id\", AppPortalAccessIn()\n    .application(null)\n    .featureFlags(arrayOf())\n    .expiry(null)\n    .readOnly(null)\n    .sessionId(\"user_1FB8\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AppPortalAccessOut appPortalAccessOut = svix.getAuthentication().appPortalAccess(\"app_id\", new AppPortalAccessIn()\n    .application(null)\n    .featureFlags(new Object[]{})\n    .expiry(null)\n    .readOnly(null)\n    .sessionId(\"user_1FB8\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "app_portal_access_out = svix.authentication.app_portal_access(\"app_id\", Svix::AppPortalAccessIn.new({\n    \"application\": nil,\n    \"feature_flags\": [],\n    \"expiry\": nil,\n    \"read_only\": nil,\n    \"session_id\": \"user_1FB8\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let app_portal_access_out = svix.authentication().app_portal_access(\"app_id\", AppPortalAccessIn {\n    application: None,\n    feature_flags: Some(vec![]),\n    expiry: None,\n    read_only: None,\n    session_id: Some(\"user_1FB8\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var appPortalAccessOut = await svix.Authentication.AppPortalAccessAsync(\"app_id\", new AppPortalAccessIn{\n    application: null,\n    featureFlags: new Object[] {},\n    expiry: null,\n    readOnly: null,\n    sessionId: \"user_1FB8\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication app-portal-access \"app_id\" '{\n    \"application\": null,\n    \"featureFlags\": [],\n    \"expiry\": null,\n    \"readOnly\": null,\n    \"sessionId\": \"user_1FB8\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app-portal-access/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"application\": null,\n        \"featureFlags\": [],\n        \"expiry\": null,\n        \"readOnly\": null,\n        \"sessionId\": \"user_1FB8\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/auth/app/{app_id}/create-message-token": {
            "post": {
                "description": "Create a new access token that only allows creating messages inside this application.",
                "operationId": "v1.authentication.create-message-token",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Cmg Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.createMessageToken(\"app_id\", {\n    expiry: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.createMessageToken(\"app_id\", {\n    expiry: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "api_token_out = svix.authentication.create_message_token(\"app_id\", CreateTokenIn(\n    expiry=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "api_token_out = await svix.authentication.create_message_token(\"app_id\", CreateTokenIn(\n    expiry=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "apiTokenOut, err := svixClient.Authentication.CreateMessageToken(ctx, \"app_id\", &CreateTokenIn{\n    Expiry: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val apiTokenOut = svix.authentication.createMessageToken(\"app_id\", CreateTokenIn()\n    .expiry(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApiTokenOut apiTokenOut = svix.getAuthentication().createMessageToken(\"app_id\", new CreateTokenIn()\n    .expiry(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "api_token_out = svix.authentication.create_message_token(\"app_id\", Svix::CreateTokenIn.new({\n    \"expiry\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let api_token_out = svix.authentication().create_message_token(\"app_id\", CreateTokenIn {\n    expiry: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var apiTokenOut = await svix.Authentication.CreateMessageTokenAsync(\"app_id\", new CreateTokenIn{\n    expiry: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication create-message-token \"app_id\" '{\n    \"expiry\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app/{app_id}/create-message-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"expiry\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/app/{app_id}/expire-all": {
            "post": {
                "description": "Expire all of the tokens associated with a specific application.",
                "operationId": "v1.authentication.expire-all",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationTokenExpireIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expire All",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.expireAll(\"app_id\", {\n    expiry: 60\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.expireAll(\"app_id\", {\n    expiry: 60\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.authentication.expire_all(\"app_id\", ApplicationTokenExpireIn(\n    expiry=60\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.authentication.expire_all(\"app_id\", ApplicationTokenExpireIn(\n    expiry=60\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Authentication.ExpireAll(ctx, \"app_id\", &ApplicationTokenExpireIn{\n    Expiry: 60,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.authentication.expireAll(\"app_id\", ApplicationTokenExpireIn()\n    .expiry(60)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getAuthentication().expireAll(\"app_id\", new ApplicationTokenExpireIn()\n    .expiry(60)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.authentication.expire_all(\"app_id\", Svix::ApplicationTokenExpireIn.new({\n    \"expiry\": 60\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.authentication().expire_all(\"app_id\", ApplicationTokenExpireIn {\n    expiry: Some(60),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Authentication.ExpireAllAsync(\"app_id\", new ApplicationTokenExpireIn{\n    expiry: 60\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication expire-all \"app_id\" '{\n    \"expiry\": 60\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app/{app_id}/expire-all' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"expiry\": 60\n    }'"
                    }
                ]
            }
        },
        "/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token": {
            "get": {
                "description": "Get the current auth token for the poller.",
                "operationId": "v1.authentication.get-poller-token",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Poller Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.getPollerToken(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.getPollerToken(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "api_token_out = svix.authentication.get_poller_token(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "api_token_out = await svix.authentication.get_poller_token(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "apiTokenOut, err := svixClient.Authentication.GetPollerToken(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val apiTokenOut = svix.authentication.getPollerToken(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApiTokenOut apiTokenOut = svix.getAuthentication().getPollerToken(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "api_token_out = svix.authentication.get_poller_token(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let api_token_out = svix.authentication().get_poller_token(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var apiTokenOut = await svix.Authentication.GetPollerTokenAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication get-poller-token \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token/rotate": {
            "post": {
                "description": "Create a new auth token that can for the poller API.",
                "operationId": "v1.authentication.rotate-poller-token",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RotatePollerTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Poller Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.rotatePollerToken(\"app_id\", \"endpoint_id\", {\n    expiry: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.rotatePollerToken(\"app_id\", \"endpoint_id\", {\n    expiry: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "api_token_out = svix.authentication.rotate_poller_token(\"app_id\", \"endpoint_id\", RotatePollerTokenIn(\n    expiry=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "api_token_out = await svix.authentication.rotate_poller_token(\"app_id\", \"endpoint_id\", RotatePollerTokenIn(\n    expiry=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "apiTokenOut, err := svixClient.Authentication.RotatePollerToken(ctx, \"app_id\", \"endpoint_id\", &RotatePollerTokenIn{\n    Expiry: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val apiTokenOut = svix.authentication.rotatePollerToken(\"app_id\", \"endpoint_id\", RotatePollerTokenIn()\n    .expiry(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApiTokenOut apiTokenOut = svix.getAuthentication().rotatePollerToken(\"app_id\", \"endpoint_id\", new RotatePollerTokenIn()\n    .expiry(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "api_token_out = svix.authentication.rotate_poller_token(\"app_id\", \"endpoint_id\", Svix::RotatePollerTokenIn.new({\n    \"expiry\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let api_token_out = svix.authentication().rotate_poller_token(\"app_id\", \"endpoint_id\", RotatePollerTokenIn {\n    expiry: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var apiTokenOut = await svix.Authentication.RotatePollerTokenAsync(\"app_id\", \"endpoint_id\", new RotatePollerTokenIn{\n    expiry: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication rotate-poller-token \"app_id\" \"endpoint_id\" '{\n    \"expiry\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"expiry\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logout an app token.\n\nTrying to log out other tokens will fail.",
                "operationId": "v1.authentication.logout",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Logout",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.logout();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.logout();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.authentication.logout(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.authentication.logout(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Authentication.Logout(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.authentication.logout()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getAuthentication().logout();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.authentication.logout()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.authentication().logout(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Authentication.LogoutAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication logout "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/logout' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/auth/one-time-token": {
            "post": {
                "description": "This is a one time token.",
                "operationId": "v1.authentication.exchange-one-time-token",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OneTimeTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OneTimeTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Exchange One Time Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const oneTimeTokenOut = await svix.authentication.exchangeOneTimeToken({\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const oneTimeTokenOut = await svix.authentication.exchangeOneTimeToken({\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "one_time_token_out = svix.authentication.exchange_one_time_token(OneTimeTokenIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "one_time_token_out = await svix.authentication.exchange_one_time_token(OneTimeTokenIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "oneTimeTokenOut, err := svixClient.Authentication.ExchangeOneTimeToken(ctx, &OneTimeTokenIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val oneTimeTokenOut = svix.authentication.exchangeOneTimeToken(OneTimeTokenIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OneTimeTokenOut oneTimeTokenOut = svix.getAuthentication().exchangeOneTimeToken(new OneTimeTokenIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "one_time_token_out = svix.authentication.exchange_one_time_token(Svix::OneTimeTokenIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let one_time_token_out = svix.authentication().exchange_one_time_token(OneTimeTokenIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var oneTimeTokenOut = await svix.Authentication.ExchangeOneTimeTokenAsync(new OneTimeTokenIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication exchange-one-time-token '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/one-time-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/org-group-admin-token": {
            "get": {
                "description": "List all org group API tokens.",
                "operationId": "v1.authentication.org-group-admin-token.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_GlobalApiTokenCensoredOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Org Group Tokens",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseGlobalApiTokenCensoredOut = await svix.authentication.orgGroupAdminToken.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseGlobalApiTokenCensoredOut = await svix.authentication.orgGroupAdminToken.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_global_api_token_censored_out = svix.authentication.org_group_admin_token.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_global_api_token_censored_out = await svix.authentication.org_group_admin_token.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseGlobalApiTokenCensoredOut, err := svixClient.Authentication.OrgGroupAdminToken.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseGlobalApiTokenCensoredOut = svix.authentication.orgGroupAdminToken.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseGlobalApiTokenCensoredOut listResponseGlobalApiTokenCensoredOut = svix.getAuthentication().getOrgGroupAdminToken().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_global_api_token_censored_out = svix.authentication.org_group_admin_token.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_global_api_token_censored_out = svix.authentication().org_group_admin_token().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseGlobalApiTokenCensoredOut = await svix.Authentication.OrgGroupAdminToken.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication org-group-admin-token list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/auth/org-group-admin-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Create a new auth token that can be used for all operations that aren't downstream for a app_id (so no apps, endpoints, messages, attempts, etc)",
                "operationId": "v1.authentication.org-group-admin-token.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Org Group Admin Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.orgGroupAdminToken.create({\n    expiry: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.authentication.orgGroupAdminToken.create({\n    expiry: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "api_token_out = svix.authentication.org_group_admin_token.create(CreateTokenIn(\n    expiry=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "api_token_out = await svix.authentication.org_group_admin_token.create(CreateTokenIn(\n    expiry=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "apiTokenOut, err := svixClient.Authentication.OrgGroupAdminToken.Create(ctx, &CreateTokenIn{\n    Expiry: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val apiTokenOut = svix.authentication.orgGroupAdminToken.create(CreateTokenIn()\n    .expiry(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApiTokenOut apiTokenOut = svix.getAuthentication().getOrgGroupAdminToken().create(new CreateTokenIn()\n    .expiry(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "api_token_out = svix.authentication.org_group_admin_token.create(Svix::CreateTokenIn.new({\n    \"expiry\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let api_token_out = svix.authentication().org_group_admin_token().create(CreateTokenIn {\n    expiry: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var apiTokenOut = await svix.Authentication.OrgGroupAdminToken.CreateAsync(new CreateTokenIn{\n    expiry: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication org-group-admin-token create '{\n    \"expiry\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/org-group-admin-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"expiry\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/org-group-admin-token/{key_id}": {
            "put": {
                "description": "Get the organization's settings (with dashboard-only fields exposed).",
                "operationId": "v1.authentication.org-group-admin-token.update",
                "parameters": [
                    {
                        "description": "The GlobalApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The GlobalApplicationToken's ID.",
                            "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 38,
                            "minLength": 38,
                            "pattern": "^global_key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalApiTokenCensoredOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Org Group Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const globalApiTokenCensoredOut = await svix.authentication.orgGroupAdminToken.update(\"key_id\", {\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const globalApiTokenCensoredOut = await svix.authentication.orgGroupAdminToken.update(\"key_id\", {\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "global_api_token_censored_out = svix.authentication.org_group_admin_token.update(\"key_id\", ApiTokenUpdate(\n\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "global_api_token_censored_out = await svix.authentication.org_group_admin_token.update(\"key_id\", ApiTokenUpdate(\n\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "globalApiTokenCensoredOut, err := svixClient.Authentication.OrgGroupAdminToken.Update(ctx, \"key_id\", &ApiTokenUpdate{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val globalApiTokenCensoredOut = svix.authentication.orgGroupAdminToken.update(\"key_id\", ApiTokenUpdate()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "GlobalApiTokenCensoredOut globalApiTokenCensoredOut = svix.getAuthentication().getOrgGroupAdminToken().update(\"key_id\", new ApiTokenUpdate()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "global_api_token_censored_out = svix.authentication.org_group_admin_token.update(\"key_id\", Svix::ApiTokenUpdate.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let global_api_token_censored_out = svix.authentication().org_group_admin_token().update(\"key_id\", ApiTokenUpdate {\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var globalApiTokenCensoredOut = await svix.Authentication.OrgGroupAdminToken.UpdateAsync(\"key_id\", new ApiTokenUpdate{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication org-group-admin-token update \"key_id\" '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/auth/org-group-admin-token/{key_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/org-group-admin-token/{key_id}/expire": {
            "post": {
                "description": "Expire the selected API Token.",
                "operationId": "v1.authentication.org-group-admin-token.expire",
                "parameters": [
                    {
                        "description": "The GlobalApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The GlobalApplicationToken's ID.",
                            "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 38,
                            "minLength": 38,
                            "pattern": "^global_key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenExpireIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expire Org Group Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.orgGroupAdminToken.expire(\"key_id\", {\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.orgGroupAdminToken.expire(\"key_id\", {\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.authentication.org_group_admin_token.expire(\"key_id\", ApiTokenExpireIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.authentication.org_group_admin_token.expire(\"key_id\", ApiTokenExpireIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Authentication.OrgGroupAdminToken.Expire(ctx, \"key_id\", &ApiTokenExpireIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.authentication.orgGroupAdminToken.expire(\"key_id\", ApiTokenExpireIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getAuthentication().getOrgGroupAdminToken().expire(\"key_id\", new ApiTokenExpireIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.authentication.org_group_admin_token.expire(\"key_id\", Svix::ApiTokenExpireIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.authentication().org_group_admin_token().expire(\"key_id\", ApiTokenExpireIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Authentication.OrgGroupAdminToken.ExpireAsync(\"key_id\", new ApiTokenExpireIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication org-group-admin-token expire \"key_id\" '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/org-group-admin-token/{key_id}/expire' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/auth/stream-portal-access/{stream_id}": {
            "post": {
                "description": "Use this function to get magic links (and authentication codes) for connecting your users to the Stream Consumer Portal.",
                "operationId": "v1.authentication.stream-portal-access",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamPortalAccessIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppPortalAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Stream Portal Access",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const appPortalAccessOut = await svix.authentication.streamPortalAccess(\"stream_id\", {\n    featureFlags: [],\n    expiry: null,\n    readOnly: null,\n    sessionId: \"user_1FB8\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const appPortalAccessOut = await svix.authentication.streamPortalAccess(\"stream_id\", {\n    featureFlags: [],\n    expiry: null,\n    readOnly: null,\n    sessionId: \"user_1FB8\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "app_portal_access_out = svix.authentication.stream_portal_access(\"stream_id\", StreamPortalAccessIn(\n    feature_flags=[],\n    expiry=None,\n    read_only=None,\n    session_id=\"user_1FB8\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "app_portal_access_out = await svix.authentication.stream_portal_access(\"stream_id\", StreamPortalAccessIn(\n    feature_flags=[],\n    expiry=None,\n    read_only=None,\n    session_id=\"user_1FB8\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "appPortalAccessOut, err := svixClient.Authentication.StreamPortalAccess(ctx, \"stream_id\", &StreamPortalAccessIn{\n    FeatureFlags: []interface{}{},\n    Expiry: nil,\n    ReadOnly: nil,\n    SessionId: \"user_1FB8\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val appPortalAccessOut = svix.authentication.streamPortalAccess(\"stream_id\", StreamPortalAccessIn()\n    .featureFlags(arrayOf())\n    .expiry(null)\n    .readOnly(null)\n    .sessionId(\"user_1FB8\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AppPortalAccessOut appPortalAccessOut = svix.getAuthentication().streamPortalAccess(\"stream_id\", new StreamPortalAccessIn()\n    .featureFlags(new Object[]{})\n    .expiry(null)\n    .readOnly(null)\n    .sessionId(\"user_1FB8\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "app_portal_access_out = svix.authentication.stream_portal_access(\"stream_id\", Svix::StreamPortalAccessIn.new({\n    \"feature_flags\": [],\n    \"expiry\": nil,\n    \"read_only\": nil,\n    \"session_id\": \"user_1FB8\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let app_portal_access_out = svix.authentication().stream_portal_access(\"stream_id\", StreamPortalAccessIn {\n    feature_flags: Some(vec![]),\n    expiry: None,\n    read_only: None,\n    session_id: Some(\"user_1FB8\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var appPortalAccessOut = await svix.Authentication.StreamPortalAccessAsync(\"stream_id\", new StreamPortalAccessIn{\n    featureFlags: new Object[] {},\n    expiry: null,\n    readOnly: null,\n    sessionId: \"user_1FB8\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication stream-portal-access \"stream_id\" '{\n    \"featureFlags\": [],\n    \"expiry\": null,\n    \"readOnly\": null,\n    \"sessionId\": \"user_1FB8\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/stream-portal-access/{stream_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"featureFlags\": [],\n        \"expiry\": null,\n        \"readOnly\": null,\n        \"sessionId\": \"user_1FB8\"\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/background-task": {
            "get": {
                "description": "List background tasks executed in the past 90 days.",
                "operationId": "v1.background-task.list",
                "parameters": [
                    {
                        "description": "Filter the response based on the status.",
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/BackgroundTaskStatus",
                            "description": "Filter the response based on the status.",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the response based on the type.",
                        "in": "query",
                        "name": "task",
                        "schema": {
                            "$ref": "#/components/schemas/BackgroundTaskType",
                            "description": "Filter the response based on the type.",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^qtask_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_BackgroundTaskOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Background Tasks",
                "tags": [
                    "Background Task"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseBackgroundTaskOut = await svix.backgroundTask.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseBackgroundTaskOut = await svix.backgroundTask.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_background_task_out = svix.background_task.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_background_task_out = await svix.background_task.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseBackgroundTaskOut, err := svixClient.BackgroundTask.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseBackgroundTaskOut = svix.backgroundTask.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseBackgroundTaskOut listResponseBackgroundTaskOut = svix.getBackgroundTask().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_background_task_out = svix.background_task.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_background_task_out = svix.background_task().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseBackgroundTaskOut = await svix.BackgroundTask.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix background-task list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/background-task' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/background-task/{task_id}": {
            "get": {
                "description": "Get a background task by ID.",
                "operationId": "v1.background-task.get",
                "parameters": [
                    {
                        "description": "The QueueBackgroundTask's ID.",
                        "in": "path",
                        "name": "task_id",
                        "required": true,
                        "schema": {
                            "description": "The QueueBackgroundTask's ID.",
                            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^qtask_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackgroundTaskOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Background Task",
                "tags": [
                    "Background Task"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const backgroundTaskOut = await svix.backgroundTask.get(\"task_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const backgroundTaskOut = await svix.backgroundTask.get(\"task_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "background_task_out = svix.background_task.get(\"task_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "background_task_out = await svix.background_task.get(\"task_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "backgroundTaskOut, err := svixClient.BackgroundTask.Get(ctx, \"task_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val backgroundTaskOut = svix.backgroundTask.get(\"task_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "BackgroundTaskOut backgroundTaskOut = svix.getBackgroundTask().get(\"task_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "background_task_out = svix.background_task.get(\"task_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let background_task_out = svix.background_task().get(\"task_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var backgroundTaskOut = await svix.BackgroundTask.GetAsync(\"task_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix background-task get \"task_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/background-task/{task_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/environment/export": {
            "post": {
                "description": "Download a JSON file containing all org-settings and event types.",
                "operationId": "v1.environment.export",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Export Environment Configuration",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const environmentOut = await svix.environment.export();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const environmentOut = await svix.environment.export();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "environment_out = svix.environment.export(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "environment_out = await svix.environment.export(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "environmentOut, err := svixClient.Environment.Export(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val environmentOut = svix.environment.export()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EnvironmentOut environmentOut = svix.getEnvironment().export();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "environment_out = svix.environment.export()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let environment_out = svix.environment().export(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var environmentOut = await svix.Environment.ExportAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix environment export "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/environment/export' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/environment/import": {
            "post": {
                "description": "Import a configuration into the active organization.\n\nIt doesn't delete anything, only adds / updates what was passed to it.",
                "operationId": "v1.environment.import",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Import Environment Configuration",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.environment.import({\n    eventTypes: null,\n    settings: null,\n    connectors: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.environment.import({\n    eventTypes: null,\n    settings: null,\n    connectors: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.environment.import(EnvironmentIn(\n    event_types=None,\n    settings=None,\n    connectors=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.environment.import(EnvironmentIn(\n    event_types=None,\n    settings=None,\n    connectors=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Environment.Import(ctx, &EnvironmentIn{\n    EventTypes: nil,\n    Settings: nil,\n    Connectors: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.environment.import(EnvironmentIn()\n    .eventTypes(null)\n    .settings(null)\n    .connectors(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEnvironment().import(new EnvironmentIn()\n    .eventTypes(null)\n    .settings(null)\n    .connectors(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.environment.import(Svix::EnvironmentIn.new({\n    \"event_types\": nil,\n    \"settings\": nil,\n    \"connectors\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.environment().import(EnvironmentIn {\n    event_types: None,\n    settings: None,\n    connectors: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Environment.ImportAsync(new EnvironmentIn{\n    eventTypes: null,\n    settings: null,\n    connectors: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix environment import '{\n    \"eventTypes\": null,\n    \"settings\": null,\n    \"connectors\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/environment/import' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventTypes\": null,\n        \"settings\": null,\n        \"connectors\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/environment/settings": {
            "get": {
                "description": "Get the environment's settings.",
                "operationId": "v1.environment.get-settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentSettingsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Org Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const environmentSettingsOut = await svix.environment.getSettings();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const environmentSettingsOut = await svix.environment.getSettings();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "environment_settings_out = svix.environment.get_settings()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "environment_settings_out = await svix.environment.get_settings()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "environmentSettingsOut, err := svixClient.Environment.GetSettings(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val environmentSettingsOut = svix.environment.getSettings()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EnvironmentSettingsOut environmentSettingsOut = svix.getEnvironment().getSettings();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "environment_settings_out = svix.environment.get_settings()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let environment_settings_out = svix.environment().get_settings().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var environmentSettingsOut = await svix.Environment.GetSettingsAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix environment get-settings "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/environment/settings' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/event-type": {
            "get": {
                "description": "Return the list of event types.",
                "operationId": "v1.event-type.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` archived (deleted but not expunged) items are included in the response.",
                        "in": "query",
                        "name": "include_archived",
                        "schema": {
                            "default": false,
                            "description": "When `true` archived (deleted but not expunged) items are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` the full item (including the schema) is included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": false,
                            "description": "When `true` the full item (including the schema) is included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EventTypeOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Event Types",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEventTypeOut = await svix.eventType.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEventTypeOut = await svix.eventType.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_event_type_out = svix.event_type.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_event_type_out = await svix.event_type.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseEventTypeOut, err := svixClient.EventType.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseEventTypeOut = svix.eventType.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseEventTypeOut listResponseEventTypeOut = svix.getEventType().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_event_type_out = svix.event_type.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_event_type_out = svix.event_type().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseEventTypeOut = await svix.EventType.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create new or unarchive existing event type.\n\nUnarchiving an event type will allow endpoints to filter on it and messages to be sent with it.\nEndpoints filtering on the event type before archival will continue to filter on it.\nThis operation does not preserve the description and schemas.",
                "operationId": "v1.event-type.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.create({\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    groupName: \"user\",\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.create({\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    groupName: \"user\",\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_out = svix.event_type.create(EventTypeIn(\n    name=\"user.signup\",\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    group_name=\"user\",\n    feature_flags=[\"cool-new-feature\"]\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_out = await svix.event_type.create(EventTypeIn(\n    name=\"user.signup\",\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    group_name=\"user\",\n    feature_flags=[\"cool-new-feature\"]\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeOut, err := svixClient.EventType.Create(ctx, &EventTypeIn{\n    Name: \"user.signup\",\n    Description: \"A user has signed up\",\n    Archived: false,\n    Schemas: map[interface{}]interface{}{\"1\": map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    GroupName: \"user\",\n    FeatureFlags: []string{\"cool-new-feature\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeOut = svix.eventType.create(EventTypeIn()\n    .name(\"user.signup\")\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .groupName(\"user\")\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeOut eventTypeOut = svix.getEventType().create(new EventTypeIn()\n    .name(\"user.signup\")\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .groupName(\"user\")\n    .featureFlags(new String[]{\"cool-new-feature\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_out = svix.event_type.create(Svix::EventTypeIn.new({\n    \"name\": \"user.signup\",\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"group_name\": \"user\",\n    \"feature_flags\": [\"cool-new-feature\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_out = svix.event_type().create(EventTypeIn {\n    name: \"user.signup\".to_string(),\n    description: \"A user has signed up\".to_string(),\n    archived: Some(false),\n    schemas: Some(json!({\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}})),\n    group_name: Some(\"user\".to_string()),\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeOut = await svix.EventType.CreateAsync(new EventTypeIn{\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: /* ... */,\n    groupName: \"user\",\n    featureFlags: new string[] {\"cool-new-feature\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type create '{\n    \"name\": \"user.signup\",\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"groupName\": \"user\",\n    \"featureFlags\": [\"cool-new-feature\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"user.signup\",\n        \"description\": \"A user has signed up\",\n        \"archived\": false,\n        \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n        \"groupName\": \"user\",\n        \"featureFlags\": [\"cool-new-feature\"]\n    }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/export/openapi": {
            "post": {
                "description": "Exports event type definitions based on the OpenAPI schemas associated\nwith each existing event type.",
                "operationId": "v1.event-type.export-openapi",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExportEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Event Type Export From Openapi",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const exportEventTypeOut = await svix.eventType.exportOpenapi();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const exportEventTypeOut = await svix.eventType.exportOpenapi();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "export_event_type_out = svix.event_type.export_openapi(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "export_event_type_out = await svix.event_type.export_openapi(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "exportEventTypeOut, err := svixClient.EventType.ExportOpenapi(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val exportEventTypeOut = svix.eventType.exportOpenapi()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ExportEventTypeOut exportEventTypeOut = svix.getEventType().exportOpenapi();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "export_event_type_out = svix.event_type.export_openapi()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let export_event_type_out = svix.event_type().export_openapi(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var exportEventTypeOut = await svix.EventType.ExportOpenapiAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type export-openapi "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type/export/openapi' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/event-type/import/openapi": {
            "post": {
                "description": "Given an OpenAPI spec, create new or update existing event types.\nIf an existing `archived` event type is updated, it will be unarchived.\n\nThe importer will convert all webhooks found in the either the `webhooks` or `x-webhooks`\ntop-level.",
                "operationId": "v1.event-type.import-openapi",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeImportOpenApiIn"
                            }
                        }
                    },
                    "description": "Import a list of event types from webhooks defined in an OpenAPI spec.\n\nThe OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeImportOpenApiOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Event Type Import From Openapi",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeImportOpenApiOut = await svix.eventType.importOpenapi({\n    spec: {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    specRaw: \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeImportOpenApiOut = await svix.eventType.importOpenapi({\n    spec: {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    specRaw: \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_import_open_api_out = svix.event_type.import_openapi(EventTypeImportOpenApiIn(\n    spec={\"info\": {\"title\": \"Webhook Example\", \"version\": \"1.0.0\"}, \"openapi\": \"3.1.0\", \"webhooks\": {\"pet.new\": {\"post\": {\"requestBody\": {\"content\": {\"application/json\": {\"schema\": {\"properties\": {\"id\": {\"format\": \"int64\", \"type\": \"integer\"}, \"name\": {\"type\": \"string\"}, \"tag\": {\"type\": \"string\"}}, \"required\": [\"id\", \"name\"]}}}, \"description\": \"Information about a new pet in the system\"}, \"responses\": {\"200\": {\"description\": \"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    spec_raw=\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_import_open_api_out = await svix.event_type.import_openapi(EventTypeImportOpenApiIn(\n    spec={\"info\": {\"title\": \"Webhook Example\", \"version\": \"1.0.0\"}, \"openapi\": \"3.1.0\", \"webhooks\": {\"pet.new\": {\"post\": {\"requestBody\": {\"content\": {\"application/json\": {\"schema\": {\"properties\": {\"id\": {\"format\": \"int64\", \"type\": \"integer\"}, \"name\": {\"type\": \"string\"}, \"tag\": {\"type\": \"string\"}}, \"required\": [\"id\", \"name\"]}}}, \"description\": \"Information about a new pet in the system\"}, \"responses\": {\"200\": {\"description\": \"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    spec_raw=\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeImportOpenApiOut, err := svixClient.EventType.ImportOpenapi(ctx, &EventTypeImportOpenApiIn{\n    Spec: map[interface{}]interface{}{\"info\": map[string]interface{}{\"title\": \"Webhook Example\", \"version\": \"1.0.0\"}, \"openapi\": \"3.1.0\", \"webhooks\": map[interface{}]interface{}{\"pet.new\": map[interface{}]interface{}{\"post\": map[interface{}]interface{}{\"requestBody\": map[interface{}]interface{}{\"content\": map[interface{}]interface{}{\"application/json\": map[interface{}]interface{}{\"schema\": map[interface{}]interface{}{\"properties\": map[interface{}]interface{}{\"id\": map[string]interface{}{\"format\": \"int64\", \"type\": \"integer\"}, \"name\": map[string]interface{}{\"type\": \"string\"}, \"tag\": map[string]interface{}{\"type\": \"string\"}}, \"required\": []string{\"id\", \"name\"}}}}, \"description\": \"Information about a new pet in the system\"}, \"responses\": map[interface{}]interface{}{\"200\": map[string]interface{}{\"description\": \"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    SpecRaw: \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeImportOpenApiOut = svix.eventType.importOpenapi(EventTypeImportOpenApiIn()\n    .spec(/* ... */)\n    .specRaw(\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeImportOpenApiOut eventTypeImportOpenApiOut = svix.getEventType().importOpenapi(new EventTypeImportOpenApiIn()\n    .spec(/* ... */)\n    .specRaw(\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_import_open_api_out = svix.event_type.import_openapi(Svix::EventTypeImportOpenApiIn.new({\n    \"spec\": {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    \"spec_raw\": \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_import_open_api_out = svix.event_type().import_openapi(EventTypeImportOpenApiIn {\n    spec: Some(json!({\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}})),\n    spec_raw: Some(\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeImportOpenApiOut = await svix.EventType.ImportOpenapiAsync(new EventTypeImportOpenApiIn{\n    spec: /* ... */,\n    specRaw: \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type import-openapi '{\n    \"spec\": {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    \"specRaw\": \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type/import/openapi' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"spec\": {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n        \"specRaw\": \"\n    # Both YAML and JSON are supported\n    openapi: 3.1.0\n    info:\n      title: Webhook Example\n      version: 1.0.0\n    # Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\n    webhooks:\n      # Each webhook needs a name\n      \"pet.new\":\n        # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n        post:\n          requestBody:\n            description: Information about a new pet in the system\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Pet\"\n          responses:\n            \"200\":\n              description: Return a 200 status to indicate that the data was received successfully\n    \n    components:\n      schemas:\n        Pet:\n          required:\n            - id\n            - name\n          properties:\n            id:\n              type: integer\n              format: int64\n            name:\n              type: string\n            tag:\n              type: string\n    \"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/schema/generate-example": {
            "post": {
                "description": "Generates a fake example from the given JSONSchema.",
                "operationId": "v1.event-type.generate-example",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeSchemaIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeExampleOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Generate Schema Example",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeExampleOut = await svix.eventType.generateExample({\n    schema: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeExampleOut = await svix.eventType.generateExample({\n    schema: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_example_out = svix.event_type.generate_example(EventTypeSchemaIn(\n    schema={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_example_out = await svix.event_type.generate_example(EventTypeSchemaIn(\n    schema={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeExampleOut, err := svixClient.EventType.GenerateExample(ctx, &EventTypeSchemaIn{\n    Schema: map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeExampleOut = svix.eventType.generateExample(EventTypeSchemaIn()\n    .schema(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeExampleOut eventTypeExampleOut = svix.getEventType().generateExample(new EventTypeSchemaIn()\n    .schema(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_example_out = svix.event_type.generate_example(Svix::EventTypeSchemaIn.new({\n    \"schema\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_example_out = svix.event_type().generate_example(EventTypeSchemaIn {\n    schema: json!({\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeExampleOut = await svix.EventType.GenerateExampleAsync(new EventTypeSchemaIn{\n    schema: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type generate-example '{\n    \"schema\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type/schema/generate-example' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"schema\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/event-type/{event_type_name}": {
            "delete": {
                "description": "Archive an event type.\n\nEndpoints already configured to filter on an event type will continue to do so after archival.\nHowever, new messages can not be sent with it and endpoints can not filter on it.\nAn event type can be unarchived with the\n[create operation](#operation/create_event_type_api_v1_event_type__post).",
                "operationId": "v1.event-type.delete",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.",
                        "in": "query",
                        "name": "expunge",
                        "schema": {
                            "default": false,
                            "description": "By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.eventType.delete(\"event_type_name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.eventType.delete(\"event_type_name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.event_type.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.event_type.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.EventType.Delete(ctx, \"event_type_name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.eventType.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEventType().delete(\"event_type_name\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.event_type.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.event_type().delete(\"event_type_name\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.EventType.DeleteAsync(\"event_type_name\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type delete \"event_type_name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an event type.",
                "operationId": "v1.event-type.get",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.get(\"event_type_name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.get(\"event_type_name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_out = svix.event_type.get(\"event_type_name\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_out = await svix.event_type.get(\"event_type_name\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeOut, err := svixClient.EventType.Get(ctx, \"event_type_name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeOut = svix.eventType.get(\"event_type_name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeOut eventTypeOut = svix.getEventType().get(\"event_type_name\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_out = svix.event_type.get(\"event_type_name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_out = svix.event_type().get(\"event_type_name\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeOut = await svix.EventType.GetAsync(\"event_type_name\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type get \"event_type_name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an event type.",
                "operationId": "v1.event-type.patch",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.patch(\"event_type_name\", {\n    schemas: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    featureFlags: [\"cool-new-feature\"],\n    groupName: \"user\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.patch(\"event_type_name\", {\n    schemas: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    featureFlags: [\"cool-new-feature\"],\n    groupName: \"user\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_out = svix.event_type.patch(\"event_type_name\", EventTypePatch(\n    schemas={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n    feature_flags=[\"cool-new-feature\"],\n    group_name=\"user\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_out = await svix.event_type.patch(\"event_type_name\", EventTypePatch(\n    schemas={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n    feature_flags=[\"cool-new-feature\"],\n    group_name=\"user\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeOut, err := svixClient.EventType.Patch(ctx, \"event_type_name\", &EventTypePatch{\n    Schemas: map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n    FeatureFlags: []string{\"cool-new-feature\"},\n    GroupName: \"user\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeOut = svix.eventType.patch(\"event_type_name\", EventTypePatch()\n    .schemas(/* ... */)\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n    .groupName(\"user\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeOut eventTypeOut = svix.getEventType().patch(\"event_type_name\", new EventTypePatch()\n    .schemas(/* ... */)\n    .featureFlags(new String[]{\"cool-new-feature\"})\n    .groupName(\"user\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_out = svix.event_type.patch(\"event_type_name\", Svix::EventTypePatch.new({\n    \"schemas\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    \"feature_flags\": [\"cool-new-feature\"],\n    \"group_name\": \"user\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_out = svix.event_type().patch(\"event_type_name\", EventTypePatch {\n    schemas: Some(json!({\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"})),\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n    group_name: Some(\"user\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeOut = await svix.EventType.PatchAsync(\"event_type_name\", new EventTypePatch{\n    schemas: /* ... */,\n    featureFlags: new string[] {\"cool-new-feature\"},\n    groupName: \"user\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type patch \"event_type_name\" '{\n    \"schemas\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    \"featureFlags\": [\"cool-new-feature\"],\n    \"groupName\": \"user\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"schemas\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n        \"featureFlags\": [\"cool-new-feature\"],\n        \"groupName\": \"user\"\n    }'"
                    }
                ]
            },
            "put": {
                "description": "Update an event type.",
                "operationId": "v1.event-type.update",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.update(\"event_type_name\", {\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlags: [\"cool-new-feature\"],\n    groupName: \"user\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.update(\"event_type_name\", {\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlags: [\"cool-new-feature\"],\n    groupName: \"user\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_out = svix.event_type.update(\"event_type_name\", EventTypeUpdate(\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flags=[\"cool-new-feature\"],\n    group_name=\"user\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_out = await svix.event_type.update(\"event_type_name\", EventTypeUpdate(\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flags=[\"cool-new-feature\"],\n    group_name=\"user\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeOut, err := svixClient.EventType.Update(ctx, \"event_type_name\", &EventTypeUpdate{\n    Description: \"A user has signed up\",\n    Archived: false,\n    Schemas: map[interface{}]interface{}{\"1\": map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    FeatureFlags: []string{\"cool-new-feature\"},\n    GroupName: \"user\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeOut = svix.eventType.update(\"event_type_name\", EventTypeUpdate()\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n    .groupName(\"user\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeOut eventTypeOut = svix.getEventType().update(\"event_type_name\", new EventTypeUpdate()\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .featureFlags(new String[]{\"cool-new-feature\"})\n    .groupName(\"user\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_out = svix.event_type.update(\"event_type_name\", Svix::EventTypeUpdate.new({\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"feature_flags\": [\"cool-new-feature\"],\n    \"group_name\": \"user\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_out = svix.event_type().update(\"event_type_name\", EventTypeUpdate {\n    description: \"A user has signed up\".to_string(),\n    archived: Some(false),\n    schemas: Some(json!({\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}})),\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n    group_name: Some(\"user\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeOut = await svix.EventType.UpdateAsync(\"event_type_name\", new EventTypeUpdate{\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: /* ... */,\n    featureFlags: new string[] {\"cool-new-feature\"},\n    groupName: \"user\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type update \"event_type_name\" '{\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"featureFlags\": [\"cool-new-feature\"],\n    \"groupName\": \"user\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"A user has signed up\",\n        \"archived\": false,\n        \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n        \"featureFlags\": [\"cool-new-feature\"],\n        \"groupName\": \"user\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/{event_type_name}/retry-schedule": {
            "get": {
                "description": "Gets the retry schedule for messages using the given event type.",
                "operationId": "v1.event-type.get-retry-schedule",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryScheduleInOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Retry Schedule",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const retryScheduleInOut = await svix.eventType.getRetrySchedule(\"event_type_name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const retryScheduleInOut = await svix.eventType.getRetrySchedule(\"event_type_name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "retry_schedule_in_out = svix.event_type.get_retry_schedule(\"event_type_name\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "retry_schedule_in_out = await svix.event_type.get_retry_schedule(\"event_type_name\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "retryScheduleInOut, err := svixClient.EventType.GetRetrySchedule(ctx, \"event_type_name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val retryScheduleInOut = svix.eventType.getRetrySchedule(\"event_type_name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "RetryScheduleInOut retryScheduleInOut = svix.getEventType().getRetrySchedule(\"event_type_name\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "retry_schedule_in_out = svix.event_type.get_retry_schedule(\"event_type_name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let retry_schedule_in_out = svix.event_type().get_retry_schedule(\"event_type_name\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var retryScheduleInOut = await svix.EventType.GetRetryScheduleAsync(\"event_type_name\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type get-retry-schedule \"event_type_name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}/retry-schedule' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Sets a retry schedule for all messages using the given event type.",
                "operationId": "v1.event-type.update-retry-schedule",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RetryScheduleInOut"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryScheduleInOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Retry Schedule",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const retryScheduleInOut = await svix.eventType.updateRetrySchedule(\"event_type_name\", {\n    retrySchedule: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const retryScheduleInOut = await svix.eventType.updateRetrySchedule(\"event_type_name\", {\n    retrySchedule: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "retry_schedule_in_out = svix.event_type.update_retry_schedule(\"event_type_name\", RetryScheduleInOut(\n    retry_schedule=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "retry_schedule_in_out = await svix.event_type.update_retry_schedule(\"event_type_name\", RetryScheduleInOut(\n    retry_schedule=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "retryScheduleInOut, err := svixClient.EventType.UpdateRetrySchedule(ctx, \"event_type_name\", &RetryScheduleInOut{\n    RetrySchedule: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val retryScheduleInOut = svix.eventType.updateRetrySchedule(\"event_type_name\", RetryScheduleInOut()\n    .retrySchedule(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "RetryScheduleInOut retryScheduleInOut = svix.getEventType().updateRetrySchedule(\"event_type_name\", new RetryScheduleInOut()\n    .retrySchedule(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "retry_schedule_in_out = svix.event_type.update_retry_schedule(\"event_type_name\", Svix::RetryScheduleInOut.new({\n    \"retry_schedule\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let retry_schedule_in_out = svix.event_type().update_retry_schedule(\"event_type_name\", RetryScheduleInOut {\n    retry_schedule: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var retryScheduleInOut = await svix.EventType.UpdateRetryScheduleAsync(\"event_type_name\", new RetryScheduleInOut{\n    retrySchedule: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type update-retry-schedule \"event_type_name\" '{\n    \"retrySchedule\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}/retry-schedule' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"retrySchedule\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/events": {
            "get": {
                "description": "Reads the stream of operational webhook events for this environment.",
                "operationId": "v1.events",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type.",
                        "in": "query",
                        "name": "channels",
                        "schema": {
                            "description": "Filter response based on the event type.",
                            "items": {
                                "example": "project_1337",
                                "maxLength": 128,
                                "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageEventsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Events",
                "tags": [
                    "Events"
                ],
                "x-codeSamples": [
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/events' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "Verify the API server is up and running.",
                "operationId": "v1.health.get",
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Health",
                "tags": [
                    "Health"
                ],
                "x-codeSamples": [
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/health' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/management/authentication/{env_id}/api-token": {
            "get": {
                "description": "List all API Tokens.",
                "operationId": "v1.management.authentication.list-api-tokens",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApiTokenCensoredOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Api Tokens",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApiTokenCensoredOut = await svix.management.authentication.listApiTokens(\"env_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApiTokenCensoredOut = await svix.management.authentication.listApiTokens(\"env_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_api_token_censored_out = svix.management.authentication.list_api_tokens(\"env_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_api_token_censored_out = await svix.management.authentication.list_api_tokens(\"env_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseApiTokenCensoredOut, err := svixClient.Management.Authentication.ListApiTokens(ctx, \"env_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseApiTokenCensoredOut = svix.management.authentication.listApiTokens(\"env_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseApiTokenCensoredOut listResponseApiTokenCensoredOut = svix.getManagement().getAuthentication().listApiTokens(\"env_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_api_token_censored_out = svix.management.authentication.list_api_tokens(\"env_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_api_token_censored_out = svix.management().authentication().list_api_tokens(\"env_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseApiTokenCensoredOut = await svix.Management.Authentication.ListApiTokensAsync(\"env_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management authentication list-api-tokens \"env_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/{env_id}/api-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Create a new API Token.",
                "operationId": "v1.management.authentication.create-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.management.authentication.createApiToken(\"env_id\", {\n    scopes: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenOut = await svix.management.authentication.createApiToken(\"env_id\", {\n    scopes: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "api_token_out = svix.management.authentication.create_api_token(\"env_id\", ApiTokenIn(\n    scopes=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "api_token_out = await svix.management.authentication.create_api_token(\"env_id\", ApiTokenIn(\n    scopes=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "apiTokenOut, err := svixClient.Management.Authentication.CreateApiToken(ctx, \"env_id\", &ApiTokenIn{\n    Scopes: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val apiTokenOut = svix.management.authentication.createApiToken(\"env_id\", ApiTokenIn()\n    .scopes(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApiTokenOut apiTokenOut = svix.getManagement().getAuthentication().createApiToken(\"env_id\", new ApiTokenIn()\n    .scopes(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "api_token_out = svix.management.authentication.create_api_token(\"env_id\", Svix::ApiTokenIn.new({\n    \"scopes\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let api_token_out = svix.management().authentication().create_api_token(\"env_id\", ApiTokenIn {\n    scopes: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var apiTokenOut = await svix.Management.Authentication.CreateApiTokenAsync(\"env_id\", new ApiTokenIn{\n    scopes: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management authentication create-api-token \"env_id\" '{\n    \"scopes\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/{env_id}/api-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"scopes\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/management/authentication/{env_id}/api-token/{key_id}": {
            "get": {
                "description": "Get an API token",
                "operationId": "v1.management.authentication.get-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The ApplicationToken's ID.",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenCensoredOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenCensoredOut = await svix.management.authentication.getApiToken(\"env_id\", \"key_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenCensoredOut = await svix.management.authentication.getApiToken(\"env_id\", \"key_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "api_token_censored_out = svix.management.authentication.get_api_token(\"env_id\", \"key_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "api_token_censored_out = await svix.management.authentication.get_api_token(\"env_id\", \"key_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "apiTokenCensoredOut, err := svixClient.Management.Authentication.GetApiToken(ctx, \"env_id\", \"key_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val apiTokenCensoredOut = svix.management.authentication.getApiToken(\"env_id\", \"key_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApiTokenCensoredOut apiTokenCensoredOut = svix.getManagement().getAuthentication().getApiToken(\"env_id\", \"key_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "api_token_censored_out = svix.management.authentication.get_api_token(\"env_id\", \"key_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let api_token_censored_out = svix.management().authentication().get_api_token(\"env_id\", \"key_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var apiTokenCensoredOut = await svix.Management.Authentication.GetApiTokenAsync(\"env_id\", \"key_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management authentication get-api-token \"env_id\" \"key_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/{env_id}/api-token/{key_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update an API token",
                "operationId": "v1.management.authentication.update-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The ApplicationToken's ID.",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenCensoredOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenCensoredOut = await svix.management.authentication.updateApiToken(\"env_id\", \"key_id\", {\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const apiTokenCensoredOut = await svix.management.authentication.updateApiToken(\"env_id\", \"key_id\", {\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "api_token_censored_out = svix.management.authentication.update_api_token(\"env_id\", \"key_id\", ApiTokenUpdate(\n\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "api_token_censored_out = await svix.management.authentication.update_api_token(\"env_id\", \"key_id\", ApiTokenUpdate(\n\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "apiTokenCensoredOut, err := svixClient.Management.Authentication.UpdateApiToken(ctx, \"env_id\", \"key_id\", &ApiTokenUpdate{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val apiTokenCensoredOut = svix.management.authentication.updateApiToken(\"env_id\", \"key_id\", ApiTokenUpdate()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApiTokenCensoredOut apiTokenCensoredOut = svix.getManagement().getAuthentication().updateApiToken(\"env_id\", \"key_id\", new ApiTokenUpdate()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "api_token_censored_out = svix.management.authentication.update_api_token(\"env_id\", \"key_id\", Svix::ApiTokenUpdate.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let api_token_censored_out = svix.management().authentication().update_api_token(\"env_id\", \"key_id\", ApiTokenUpdate {\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var apiTokenCensoredOut = await svix.Management.Authentication.UpdateApiTokenAsync(\"env_id\", \"key_id\", new ApiTokenUpdate{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management authentication update-api-token \"env_id\" \"key_id\" '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/{env_id}/api-token/{key_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/management/authentication/{env_id}/api-token/{key_id}/expire": {
            "post": {
                "description": "Expire the selected API Token.",
                "operationId": "v1.management.authentication.expire-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The ApplicationToken's ID.",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenExpireIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expire Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.authentication.expireApiToken(\"env_id\", \"key_id\", {\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.authentication.expireApiToken(\"env_id\", \"key_id\", {\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.management.authentication.expire_api_token(\"env_id\", \"key_id\", ApiTokenExpireIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.management.authentication.expire_api_token(\"env_id\", \"key_id\", ApiTokenExpireIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Management.Authentication.ExpireApiToken(ctx, \"env_id\", \"key_id\", &ApiTokenExpireIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.management.authentication.expireApiToken(\"env_id\", \"key_id\", ApiTokenExpireIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getManagement().getAuthentication().expireApiToken(\"env_id\", \"key_id\", new ApiTokenExpireIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.management.authentication.expire_api_token(\"env_id\", \"key_id\", Svix::ApiTokenExpireIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.management().authentication().expire_api_token(\"env_id\", \"key_id\", ApiTokenExpireIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Management.Authentication.ExpireApiTokenAsync(\"env_id\", \"key_id\", new ApiTokenExpireIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management authentication expire-api-token \"env_id\" \"key_id\" '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/{env_id}/api-token/{key_id}/expire' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/management/environment": {
            "get": {
                "description": "List all environments.",
                "operationId": "v1.management.environment.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EnvironmentModelOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Environments",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEnvironmentModelOut = await svix.management.environment.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEnvironmentModelOut = await svix.management.environment.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_environment_model_out = svix.management.environment.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_environment_model_out = await svix.management.environment.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseEnvironmentModelOut, err := svixClient.Management.Environment.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseEnvironmentModelOut = svix.management.environment.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseEnvironmentModelOut listResponseEnvironmentModelOut = svix.getManagement().getEnvironment().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_environment_model_out = svix.management.environment.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_environment_model_out = svix.management().environment().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseEnvironmentModelOut = await svix.Management.Environment.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/management/environment' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Create a new environment.",
                "operationId": "v1.management.environment.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentModelIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentModelOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Environment",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const environmentModelOut = await svix.management.environment.create({\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const environmentModelOut = await svix.management.environment.create({\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "environment_model_out = svix.management.environment.create(EnvironmentModelIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "environment_model_out = await svix.management.environment.create(EnvironmentModelIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "environmentModelOut, err := svixClient.Management.Environment.Create(ctx, &EnvironmentModelIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val environmentModelOut = svix.management.environment.create(EnvironmentModelIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EnvironmentModelOut environmentModelOut = svix.getManagement().getEnvironment().create(new EnvironmentModelIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "environment_model_out = svix.management.environment.create(Svix::EnvironmentModelIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let environment_model_out = svix.management().environment().create(EnvironmentModelIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var environmentModelOut = await svix.Management.Environment.CreateAsync(new EnvironmentModelIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment create '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/management/environment' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/management/environment-settings": {
            "get": {
                "description": "Get the environments's settings",
                "operationId": "v1.management.environment-settings.get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsInternalOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Dashboard Organization Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const settingsInternalOut = await svix.management.environmentSettings.get();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const settingsInternalOut = await svix.management.environmentSettings.get();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "settings_internal_out = svix.management.environment_settings.get()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "settings_internal_out = await svix.management.environment_settings.get()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "settingsInternalOut, err := svixClient.Management.EnvironmentSettings.Get(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val settingsInternalOut = svix.management.environmentSettings.get()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SettingsInternalOut settingsInternalOut = svix.getManagement().getEnvironmentSettings().get();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "settings_internal_out = svix.management.environment_settings.get()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let settings_internal_out = svix.management().environment_settings().get().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var settingsInternalOut = await svix.Management.EnvironmentSettings.GetAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment-settings get "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/management/environment-settings' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Patch environment settings",
                "operationId": "v1.management.environment-settings.patch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsInternalPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsInternalOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Environment Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const settingsInternalOut = await svix.management.environmentSettings.patch({\n    customColor: null,\n    customLogoUrl: null,\n    customThemeOverride: null,\n    customStringsOverride: null,\n    customBaseFontSize: null,\n    customFontFamily: \"Open Sans\",\n    customFontFamilyUrl: null,\n    displayName: null,\n    retryPolicy: null,\n    colorPaletteLight: null,\n    colorPaletteDark: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const settingsInternalOut = await svix.management.environmentSettings.patch({\n    customColor: null,\n    customLogoUrl: null,\n    customThemeOverride: null,\n    customStringsOverride: null,\n    customBaseFontSize: null,\n    customFontFamily: \"Open Sans\",\n    customFontFamilyUrl: null,\n    displayName: null,\n    retryPolicy: null,\n    colorPaletteLight: null,\n    colorPaletteDark: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "settings_internal_out = svix.management.environment_settings.patch(SettingsInternalPatch(\n    custom_color=None,\n    custom_logo_url=None,\n    custom_theme_override=None,\n    custom_strings_override=None,\n    custom_base_font_size=None,\n    custom_font_family=\"Open Sans\",\n    custom_font_family_url=None,\n    display_name=None,\n    retry_policy=None,\n    color_palette_light=None,\n    color_palette_dark=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "settings_internal_out = await svix.management.environment_settings.patch(SettingsInternalPatch(\n    custom_color=None,\n    custom_logo_url=None,\n    custom_theme_override=None,\n    custom_strings_override=None,\n    custom_base_font_size=None,\n    custom_font_family=\"Open Sans\",\n    custom_font_family_url=None,\n    display_name=None,\n    retry_policy=None,\n    color_palette_light=None,\n    color_palette_dark=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "settingsInternalOut, err := svixClient.Management.EnvironmentSettings.Patch(ctx, &SettingsInternalPatch{\n    CustomColor: nil,\n    CustomLogoUrl: nil,\n    CustomThemeOverride: nil,\n    CustomStringsOverride: nil,\n    CustomBaseFontSize: nil,\n    CustomFontFamily: \"Open Sans\",\n    CustomFontFamilyUrl: nil,\n    DisplayName: nil,\n    RetryPolicy: nil,\n    ColorPaletteLight: nil,\n    ColorPaletteDark: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val settingsInternalOut = svix.management.environmentSettings.patch(SettingsInternalPatch()\n    .customColor(null)\n    .customLogoUrl(null)\n    .customThemeOverride(null)\n    .customStringsOverride(null)\n    .customBaseFontSize(null)\n    .customFontFamily(\"Open Sans\")\n    .customFontFamilyUrl(null)\n    .displayName(null)\n    .retryPolicy(null)\n    .colorPaletteLight(null)\n    .colorPaletteDark(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SettingsInternalOut settingsInternalOut = svix.getManagement().getEnvironmentSettings().patch(new SettingsInternalPatch()\n    .customColor(null)\n    .customLogoUrl(null)\n    .customThemeOverride(null)\n    .customStringsOverride(null)\n    .customBaseFontSize(null)\n    .customFontFamily(\"Open Sans\")\n    .customFontFamilyUrl(null)\n    .displayName(null)\n    .retryPolicy(null)\n    .colorPaletteLight(null)\n    .colorPaletteDark(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "settings_internal_out = svix.management.environment_settings.patch(Svix::SettingsInternalPatch.new({\n    \"custom_color\": nil,\n    \"custom_logo_url\": nil,\n    \"custom_theme_override\": nil,\n    \"custom_strings_override\": nil,\n    \"custom_base_font_size\": nil,\n    \"custom_font_family\": \"Open Sans\",\n    \"custom_font_family_url\": nil,\n    \"display_name\": nil,\n    \"retry_policy\": nil,\n    \"color_palette_light\": nil,\n    \"color_palette_dark\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let settings_internal_out = svix.management().environment_settings().patch(SettingsInternalPatch {\n    custom_color: None,\n    custom_logo_url: None,\n    custom_theme_override: None,\n    custom_strings_override: None,\n    custom_base_font_size: None,\n    custom_font_family: Some(\"Open Sans\".to_string()),\n    custom_font_family_url: None,\n    display_name: None,\n    retry_policy: None,\n    color_palette_light: None,\n    color_palette_dark: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var settingsInternalOut = await svix.Management.EnvironmentSettings.PatchAsync(new SettingsInternalPatch{\n    customColor: null,\n    customLogoUrl: null,\n    customThemeOverride: null,\n    customStringsOverride: null,\n    customBaseFontSize: null,\n    customFontFamily: \"Open Sans\",\n    customFontFamilyUrl: null,\n    displayName: null,\n    retryPolicy: null,\n    colorPaletteLight: null,\n    colorPaletteDark: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment-settings patch '{\n    \"customColor\": null,\n    \"customLogoUrl\": null,\n    \"customThemeOverride\": null,\n    \"customStringsOverride\": null,\n    \"customBaseFontSize\": null,\n    \"customFontFamily\": \"Open Sans\",\n    \"customFontFamilyUrl\": null,\n    \"displayName\": null,\n    \"retryPolicy\": null,\n    \"colorPaletteLight\": null,\n    \"colorPaletteDark\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/management/environment-settings' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"customColor\": null,\n        \"customLogoUrl\": null,\n        \"customThemeOverride\": null,\n        \"customStringsOverride\": null,\n        \"customBaseFontSize\": null,\n        \"customFontFamily\": \"Open Sans\",\n        \"customFontFamilyUrl\": null,\n        \"displayName\": null,\n        \"retryPolicy\": null,\n        \"colorPaletteLight\": null,\n        \"colorPaletteDark\": null\n    }'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update the environment's settings",
                "operationId": "v1.management.environment-settings.update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsInternalIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsInternalUpdateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Dashboard Organization Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const settingsInternalUpdateOut = await svix.management.environmentSettings.update({\n    retryPolicy: null,\n    customColor: null,\n    customLogoUrl: null,\n    customThemeOverride: null,\n    customStringsOverride: null,\n    customBaseFontSize: null,\n    customFontFamily: \"Open Sans\",\n    customFontFamilyUrl: null,\n    displayName: null,\n    colorPaletteLight: null,\n    colorPaletteDark: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const settingsInternalUpdateOut = await svix.management.environmentSettings.update({\n    retryPolicy: null,\n    customColor: null,\n    customLogoUrl: null,\n    customThemeOverride: null,\n    customStringsOverride: null,\n    customBaseFontSize: null,\n    customFontFamily: \"Open Sans\",\n    customFontFamilyUrl: null,\n    displayName: null,\n    colorPaletteLight: null,\n    colorPaletteDark: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "settings_internal_update_out = svix.management.environment_settings.update(SettingsInternalIn(\n    retry_policy=None,\n    custom_color=None,\n    custom_logo_url=None,\n    custom_theme_override=None,\n    custom_strings_override=None,\n    custom_base_font_size=None,\n    custom_font_family=\"Open Sans\",\n    custom_font_family_url=None,\n    display_name=None,\n    color_palette_light=None,\n    color_palette_dark=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "settings_internal_update_out = await svix.management.environment_settings.update(SettingsInternalIn(\n    retry_policy=None,\n    custom_color=None,\n    custom_logo_url=None,\n    custom_theme_override=None,\n    custom_strings_override=None,\n    custom_base_font_size=None,\n    custom_font_family=\"Open Sans\",\n    custom_font_family_url=None,\n    display_name=None,\n    color_palette_light=None,\n    color_palette_dark=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "settingsInternalUpdateOut, err := svixClient.Management.EnvironmentSettings.Update(ctx, &SettingsInternalIn{\n    RetryPolicy: nil,\n    CustomColor: nil,\n    CustomLogoUrl: nil,\n    CustomThemeOverride: nil,\n    CustomStringsOverride: nil,\n    CustomBaseFontSize: nil,\n    CustomFontFamily: \"Open Sans\",\n    CustomFontFamilyUrl: nil,\n    DisplayName: nil,\n    ColorPaletteLight: nil,\n    ColorPaletteDark: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val settingsInternalUpdateOut = svix.management.environmentSettings.update(SettingsInternalIn()\n    .retryPolicy(null)\n    .customColor(null)\n    .customLogoUrl(null)\n    .customThemeOverride(null)\n    .customStringsOverride(null)\n    .customBaseFontSize(null)\n    .customFontFamily(\"Open Sans\")\n    .customFontFamilyUrl(null)\n    .displayName(null)\n    .colorPaletteLight(null)\n    .colorPaletteDark(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SettingsInternalUpdateOut settingsInternalUpdateOut = svix.getManagement().getEnvironmentSettings().update(new SettingsInternalIn()\n    .retryPolicy(null)\n    .customColor(null)\n    .customLogoUrl(null)\n    .customThemeOverride(null)\n    .customStringsOverride(null)\n    .customBaseFontSize(null)\n    .customFontFamily(\"Open Sans\")\n    .customFontFamilyUrl(null)\n    .displayName(null)\n    .colorPaletteLight(null)\n    .colorPaletteDark(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "settings_internal_update_out = svix.management.environment_settings.update(Svix::SettingsInternalIn.new({\n    \"retry_policy\": nil,\n    \"custom_color\": nil,\n    \"custom_logo_url\": nil,\n    \"custom_theme_override\": nil,\n    \"custom_strings_override\": nil,\n    \"custom_base_font_size\": nil,\n    \"custom_font_family\": \"Open Sans\",\n    \"custom_font_family_url\": nil,\n    \"display_name\": nil,\n    \"color_palette_light\": nil,\n    \"color_palette_dark\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let settings_internal_update_out = svix.management().environment_settings().update(SettingsInternalIn {\n    retry_policy: None,\n    custom_color: None,\n    custom_logo_url: None,\n    custom_theme_override: None,\n    custom_strings_override: None,\n    custom_base_font_size: None,\n    custom_font_family: Some(\"Open Sans\".to_string()),\n    custom_font_family_url: None,\n    display_name: None,\n    color_palette_light: None,\n    color_palette_dark: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var settingsInternalUpdateOut = await svix.Management.EnvironmentSettings.UpdateAsync(new SettingsInternalIn{\n    retryPolicy: null,\n    customColor: null,\n    customLogoUrl: null,\n    customThemeOverride: null,\n    customStringsOverride: null,\n    customBaseFontSize: null,\n    customFontFamily: \"Open Sans\",\n    customFontFamilyUrl: null,\n    displayName: null,\n    colorPaletteLight: null,\n    colorPaletteDark: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment-settings update '{\n    \"retryPolicy\": null,\n    \"customColor\": null,\n    \"customLogoUrl\": null,\n    \"customThemeOverride\": null,\n    \"customStringsOverride\": null,\n    \"customBaseFontSize\": null,\n    \"customFontFamily\": \"Open Sans\",\n    \"customFontFamilyUrl\": null,\n    \"displayName\": null,\n    \"colorPaletteLight\": null,\n    \"colorPaletteDark\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/management/environment-settings' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"retryPolicy\": null,\n        \"customColor\": null,\n        \"customLogoUrl\": null,\n        \"customThemeOverride\": null,\n        \"customStringsOverride\": null,\n        \"customBaseFontSize\": null,\n        \"customFontFamily\": \"Open Sans\",\n        \"customFontFamilyUrl\": null,\n        \"displayName\": null,\n        \"colorPaletteLight\": null,\n        \"colorPaletteDark\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/management/environment-settings/customer-otel": {
            "delete": {
                "description": "Delete customer otel config.",
                "operationId": "v1.management.environment-settings.delete-otel-config",
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Otel Config",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.environmentSettings.deleteOtelConfig();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.environmentSettings.deleteOtelConfig();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.management.environment_settings.delete_otel_config()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.management.environment_settings.delete_otel_config()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Management.EnvironmentSettings.DeleteOtelConfig(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.management.environmentSettings.deleteOtelConfig()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getManagement().getEnvironmentSettings().deleteOtelConfig();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.management.environment_settings.delete_otel_config()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.management().environment_settings().delete_otel_config().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Management.EnvironmentSettings.DeleteOtelConfigAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment-settings delete-otel-config "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/management/environment-settings/customer-otel' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get customer otel config.",
                "operationId": "v1.management.environment-settings.get-otel-config",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OtelConfigOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Otel Config",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const otelConfigOut = await svix.management.environmentSettings.getOtelConfig();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const otelConfigOut = await svix.management.environmentSettings.getOtelConfig();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "otel_config_out = svix.management.environment_settings.get_otel_config()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "otel_config_out = await svix.management.environment_settings.get_otel_config()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "otelConfigOut, err := svixClient.Management.EnvironmentSettings.GetOtelConfig(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val otelConfigOut = svix.management.environmentSettings.getOtelConfig()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OtelConfigOut otelConfigOut = svix.getManagement().getEnvironmentSettings().getOtelConfig();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "otel_config_out = svix.management.environment_settings.get_otel_config()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let otel_config_out = svix.management().environment_settings().get_otel_config().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var otelConfigOut = await svix.Management.EnvironmentSettings.GetOtelConfigAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment-settings get-otel-config "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/management/environment-settings/customer-otel' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update customer otel config.",
                "operationId": "v1.management.environment-settings.update-otel-config",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OtelConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Otel Config",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.environmentSettings.updateOtelConfig({\n    additionalHeaders: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.environmentSettings.updateOtelConfig({\n    additionalHeaders: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.management.environment_settings.update_otel_config(OtelConfig(\n    additional_headers=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.management.environment_settings.update_otel_config(OtelConfig(\n    additional_headers=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Management.EnvironmentSettings.UpdateOtelConfig(ctx, &OtelConfig{\n    AdditionalHeaders: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.management.environmentSettings.updateOtelConfig(OtelConfig()\n    .additionalHeaders(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getManagement().getEnvironmentSettings().updateOtelConfig(new OtelConfig()\n    .additionalHeaders(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.management.environment_settings.update_otel_config(Svix::OtelConfig.new({\n    \"additional_headers\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.management().environment_settings().update_otel_config(OtelConfig {\n    additional_headers: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Management.EnvironmentSettings.UpdateOtelConfigAsync(new OtelConfig{\n    additionalHeaders: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment-settings update-otel-config '{\n    \"additionalHeaders\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/management/environment-settings/customer-otel' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"additionalHeaders\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/management/environment/{env_id}": {
            "delete": {
                "description": "Delete an environment.",
                "operationId": "v1.management.environment.delete",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Environment",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.environment.delete(\"env_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.management.environment.delete(\"env_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.management.environment.delete(\"env_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.management.environment.delete(\"env_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Management.Environment.Delete(ctx, \"env_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.management.environment.delete(\"env_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getManagement().getEnvironment().delete(\"env_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.management.environment.delete(\"env_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.management().environment().delete(\"env_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Management.Environment.DeleteAsync(\"env_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment delete \"env_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/management/environment/{env_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get an environment.",
                "operationId": "v1.management.environment.get",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentModelOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Environment",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const environmentModelOut = await svix.management.environment.get(\"env_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const environmentModelOut = await svix.management.environment.get(\"env_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "environment_model_out = svix.management.environment.get(\"env_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "environment_model_out = await svix.management.environment.get(\"env_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "environmentModelOut, err := svixClient.Management.Environment.Get(ctx, \"env_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val environmentModelOut = svix.management.environment.get(\"env_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EnvironmentModelOut environmentModelOut = svix.getManagement().getEnvironment().get(\"env_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "environment_model_out = svix.management.environment.get(\"env_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let environment_model_out = svix.management().environment().get(\"env_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var environmentModelOut = await svix.Management.Environment.GetAsync(\"env_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment get \"env_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/management/environment/{env_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update an environment.",
                "operationId": "v1.management.environment.update",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentModelUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentModelOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Environment",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const environmentModelOut = await svix.management.environment.update(\"env_id\", {\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const environmentModelOut = await svix.management.environment.update(\"env_id\", {\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "environment_model_out = svix.management.environment.update(\"env_id\", EnvironmentModelUpdate(\n\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "environment_model_out = await svix.management.environment.update(\"env_id\", EnvironmentModelUpdate(\n\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "environmentModelOut, err := svixClient.Management.Environment.Update(ctx, \"env_id\", &EnvironmentModelUpdate{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val environmentModelOut = svix.management.environment.update(\"env_id\", EnvironmentModelUpdate()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EnvironmentModelOut environmentModelOut = svix.getManagement().getEnvironment().update(\"env_id\", new EnvironmentModelUpdate()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "environment_model_out = svix.management.environment.update(\"env_id\", Svix::EnvironmentModelUpdate.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let environment_model_out = svix.management().environment().update(\"env_id\", EnvironmentModelUpdate {\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var environmentModelOut = await svix.Management.Environment.UpdateAsync(\"env_id\", new EnvironmentModelUpdate{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix management environment update \"env_id\" '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/management/environment/{env_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/msg/broadcast": {
            "post": {
                "description": "Creates a background task to send the same message to each application in your organization.",
                "operationId": "create_broadcast_message",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageBroadcastIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageBroadcastOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Broadcast Message",
                "tags": [
                    "Broadcast"
                ],
                "x-codeSamples": [
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/msg/broadcast' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventId\": \"unique-identifier\",\n        \"eventType\": \"user.signup\",\n        \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"payloadRetentionPeriod\": 90,\n        \"payloadRetentionHours\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/operational-webhook/endpoint": {
            "get": {
                "description": "List operational webhook endpoints.",
                "operationId": "v1.operational-webhook.endpoint.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_OperationalWebhookEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Operational Webhook Endpoints",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseOperationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseOperationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_operational_webhook_endpoint_out = svix.operational_webhook.endpoint.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_operational_webhook_endpoint_out = await svix.operational_webhook.endpoint.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseOperationalWebhookEndpointOut, err := svixClient.OperationalWebhook.Endpoint.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseOperationalWebhookEndpointOut = svix.operationalWebhook.endpoint.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseOperationalWebhookEndpointOut listResponseOperationalWebhookEndpointOut = svix.getOperationalWebhook().getEndpoint().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_operational_webhook_endpoint_out = svix.operational_webhook.endpoint.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_operational_webhook_endpoint_out = svix.operational_webhook().endpoint().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseOperationalWebhookEndpointOut = await svix.OperationalWebhook.Endpoint.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.create({\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"message.attempt.failing\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.create({\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"message.attempt.failing\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_out = svix.operational_webhook.endpoint.create(OperationalWebhookEndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"message.attempt.failing\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_out = await svix.operational_webhook.endpoint.create(OperationalWebhookEndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"message.attempt.failing\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "operationalWebhookEndpointOut, err := svixClient.OperationalWebhook.Endpoint.Create(ctx, &OperationalWebhookEndpointIn{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n    FilterTypes: []string{\"message.attempt.failing\"},\n    Secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val operationalWebhookEndpointOut = svix.operationalWebhook.endpoint.create(OperationalWebhookEndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(arrayOf(\"message.attempt.failing\"))\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OperationalWebhookEndpointOut operationalWebhookEndpointOut = svix.getOperationalWebhook().getEndpoint().create(new OperationalWebhookEndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(new String[]{\"message.attempt.failing\"})\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "operational_webhook_endpoint_out = svix.operational_webhook.endpoint.create(Svix::OperationalWebhookEndpointIn.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filter_types\": [\"message.attempt.failing\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let operational_webhook_endpoint_out = svix.operational_webhook().endpoint().create(OperationalWebhookEndpointIn {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n    filter_types: Some(vec![\"message.attempt.failing\".to_string()]),\n    secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var operationalWebhookEndpointOut = await svix.OperationalWebhook.Endpoint.CreateAsync(new OperationalWebhookEndpointIn{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: new string[] {\"message.attempt.failing\"},\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint create '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filterTypes\": [\"message.attempt.failing\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"message.attempt.failing\"],\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}": {
            "delete": {
                "description": "Delete an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.delete",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.delete(\"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.delete(\"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.operational_webhook.endpoint.delete(\"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.operational_webhook.endpoint.delete(\"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.OperationalWebhook.Endpoint.Delete(ctx, \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.operationalWebhook.endpoint.delete(\"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getOperationalWebhook().getEndpoint().delete(\"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.operational_webhook.endpoint.delete(\"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.operational_webhook().endpoint().delete(\"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.OperationalWebhook.Endpoint.DeleteAsync(\"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint delete \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.get",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.get(\"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.get(\"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_out = svix.operational_webhook.endpoint.get(\"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_out = await svix.operational_webhook.endpoint.get(\"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "operationalWebhookEndpointOut, err := svixClient.OperationalWebhook.Endpoint.Get(ctx, \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val operationalWebhookEndpointOut = svix.operationalWebhook.endpoint.get(\"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OperationalWebhookEndpointOut operationalWebhookEndpointOut = svix.getOperationalWebhook().getEndpoint().get(\"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "operational_webhook_endpoint_out = svix.operational_webhook.endpoint.get(\"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let operational_webhook_endpoint_out = svix.operational_webhook().endpoint().get(\"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var operationalWebhookEndpointOut = await svix.OperationalWebhook.Endpoint.GetAsync(\"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint get \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Update an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.update",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.update(\"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"message.attempt.failing\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointOut = await svix.operationalWebhook.endpoint.update(\"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"message.attempt.failing\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_out = svix.operational_webhook.endpoint.update(\"endpoint_id\", OperationalWebhookEndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"message.attempt.failing\"]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_out = await svix.operational_webhook.endpoint.update(\"endpoint_id\", OperationalWebhookEndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"message.attempt.failing\"]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "operationalWebhookEndpointOut, err := svixClient.OperationalWebhook.Endpoint.Update(ctx, \"endpoint_id\", &OperationalWebhookEndpointUpdate{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n    FilterTypes: []string{\"message.attempt.failing\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val operationalWebhookEndpointOut = svix.operationalWebhook.endpoint.update(\"endpoint_id\", OperationalWebhookEndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(arrayOf(\"message.attempt.failing\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OperationalWebhookEndpointOut operationalWebhookEndpointOut = svix.getOperationalWebhook().getEndpoint().update(\"endpoint_id\", new OperationalWebhookEndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(new String[]{\"message.attempt.failing\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "operational_webhook_endpoint_out = svix.operational_webhook.endpoint.update(\"endpoint_id\", Svix::OperationalWebhookEndpointUpdate.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filter_types\": [\"message.attempt.failing\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let operational_webhook_endpoint_out = svix.operational_webhook().endpoint().update(\"endpoint_id\", OperationalWebhookEndpointUpdate {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n    filter_types: Some(vec![\"message.attempt.failing\".to_string()]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var operationalWebhookEndpointOut = await svix.OperationalWebhook.Endpoint.UpdateAsync(\"endpoint_id\", new OperationalWebhookEndpointUpdate{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: new string[] {\"message.attempt.failing\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint update \"endpoint_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filterTypes\": [\"message.attempt.failing\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"message.attempt.failing\"]\n    }'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}/headers": {
            "get": {
                "description": "Get the additional headers to be sent with the operational webhook.",
                "operationId": "v1.operational-webhook.endpoint.get-headers",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Operational Webhook Endpoint Headers",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointHeadersOut = await svix.operationalWebhook.endpoint.getHeaders(\"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointHeadersOut = await svix.operationalWebhook.endpoint.getHeaders(\"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_headers_out = svix.operational_webhook.endpoint.get_headers(\"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_headers_out = await svix.operational_webhook.endpoint.get_headers(\"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "operationalWebhookEndpointHeadersOut, err := svixClient.OperationalWebhook.Endpoint.GetHeaders(ctx, \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val operationalWebhookEndpointHeadersOut = svix.operationalWebhook.endpoint.getHeaders(\"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OperationalWebhookEndpointHeadersOut operationalWebhookEndpointHeadersOut = svix.getOperationalWebhook().getEndpoint().getHeaders(\"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "operational_webhook_endpoint_headers_out = svix.operational_webhook.endpoint.get_headers(\"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let operational_webhook_endpoint_headers_out = svix.operational_webhook().endpoint().get_headers(\"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var operationalWebhookEndpointHeadersOut = await svix.OperationalWebhook.Endpoint.GetHeadersAsync(\"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint get-headers \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Set the additional headers to be sent with the operational webhook.",
                "operationId": "v1.operational-webhook.endpoint.update-headers",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointHeadersIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Operational Webhook Endpoint Headers",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.updateHeaders(\"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.updateHeaders(\"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.operational_webhook.endpoint.update_headers(\"endpoint_id\", OperationalWebhookEndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.operational_webhook.endpoint.update_headers(\"endpoint_id\", OperationalWebhookEndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.OperationalWebhook.Endpoint.UpdateHeaders(ctx, \"endpoint_id\", &OperationalWebhookEndpointHeadersIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.operationalWebhook.endpoint.updateHeaders(\"endpoint_id\", OperationalWebhookEndpointHeadersIn()\n    .headers(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getOperationalWebhook().getEndpoint().updateHeaders(\"endpoint_id\", new OperationalWebhookEndpointHeadersIn()\n    .headers(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.operational_webhook.endpoint.update_headers(\"endpoint_id\", Svix::OperationalWebhookEndpointHeadersIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.operational_webhook().endpoint().update_headers(\"endpoint_id\", OperationalWebhookEndpointHeadersIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.OperationalWebhook.Endpoint.UpdateHeadersAsync(\"endpoint_id\", new OperationalWebhookEndpointHeadersIn{\n    headers: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint update-headers \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}/secret": {
            "get": {
                "description": "Get an operational webhook endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.operational-webhook.endpoint.get-secret",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Operational Webhook Endpoint Secret",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointSecretOut = await svix.operationalWebhook.endpoint.getSecret(\"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const operationalWebhookEndpointSecretOut = await svix.operationalWebhook.endpoint.getSecret(\"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_secret_out = svix.operational_webhook.endpoint.get_secret(\"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "operational_webhook_endpoint_secret_out = await svix.operational_webhook.endpoint.get_secret(\"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "operationalWebhookEndpointSecretOut, err := svixClient.OperationalWebhook.Endpoint.GetSecret(ctx, \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val operationalWebhookEndpointSecretOut = svix.operationalWebhook.endpoint.getSecret(\"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OperationalWebhookEndpointSecretOut operationalWebhookEndpointSecretOut = svix.getOperationalWebhook().getEndpoint().getSecret(\"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "operational_webhook_endpoint_secret_out = svix.operational_webhook.endpoint.get_secret(\"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let operational_webhook_endpoint_secret_out = svix.operational_webhook().endpoint().get_secret(\"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var operationalWebhookEndpointSecretOut = await svix.OperationalWebhook.Endpoint.GetSecretAsync(\"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint get-secret \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}/secret/rotate": {
            "post": {
                "description": "Rotates an operational webhook endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
                "operationId": "v1.operational-webhook.endpoint.rotate-secret",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointSecretIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Operational Webhook Endpoint Secret",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.rotateSecret(\"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.rotateSecret(\"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.operational_webhook.endpoint.rotate_secret(\"endpoint_id\", OperationalWebhookEndpointSecretIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.operational_webhook.endpoint.rotate_secret(\"endpoint_id\", OperationalWebhookEndpointSecretIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.OperationalWebhook.Endpoint.RotateSecret(ctx, \"endpoint_id\", &OperationalWebhookEndpointSecretIn{\n    Key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.operationalWebhook.endpoint.rotateSecret(\"endpoint_id\", OperationalWebhookEndpointSecretIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getOperationalWebhook().getEndpoint().rotateSecret(\"endpoint_id\", new OperationalWebhookEndpointSecretIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.operational_webhook.endpoint.rotate_secret(\"endpoint_id\", Svix::OperationalWebhookEndpointSecretIn.new({\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.operational_webhook().endpoint().rotate_secret(\"endpoint_id\", OperationalWebhookEndpointSecretIn {\n    key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.OperationalWebhook.Endpoint.RotateSecretAsync(\"endpoint_id\", new OperationalWebhookEndpointSecretIn{\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix operational-webhook endpoint rotate-secret \"endpoint_id\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/stats/app/{app_id}/attempt": {
            "get": {
                "description": "Returns application-level statistics on message attempts",
                "operationId": "v1.stats.app-attempts",
                "parameters": [
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttemptStatisticsResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Attempt Stats",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.appAttempts(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.appAttempts(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "attempt_statistics_response = svix.stats.app_attempts(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "attempt_statistics_response = await svix.stats.app_attempts(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "attemptStatisticsResponse, err := svixClient.Stats.AppAttempts(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val attemptStatisticsResponse = svix.stats.appAttempts(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AttemptStatisticsResponse attemptStatisticsResponse = svix.getStats().appAttempts(\"app_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "attempt_statistics_response = svix.stats.app_attempts(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let attempt_statistics_response = svix.stats().app_attempts(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var attemptStatisticsResponse = await svix.Stats.AppAttemptsAsync(\"app_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stats app-attempts \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stats/app/{app_id}/attempt' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt": {
            "get": {
                "description": "Returns endpoint-level statistics on message attempts.",
                "operationId": "v1.stats.endpoint-attempts",
                "parameters": [
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttemptStatisticsResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ep Stats",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.endpointAttempts(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.endpointAttempts(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "attempt_statistics_response = svix.stats.endpoint_attempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "attempt_statistics_response = await svix.stats.endpoint_attempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "attemptStatisticsResponse, err := svixClient.Stats.EndpointAttempts(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val attemptStatisticsResponse = svix.stats.endpointAttempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AttemptStatisticsResponse attemptStatisticsResponse = svix.getStats().endpointAttempts(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "attempt_statistics_response = svix.stats.endpoint_attempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let attempt_statistics_response = svix.stats().endpoint_attempts(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var attemptStatisticsResponse = await svix.Stats.EndpointAttemptsAsync(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stats endpoint-attempts \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stats/usage/app": {
            "post": {
                "description": "Creates a background task to calculate the message destinations for all applications in the environment.\n\nNote that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to\nretrieve the results of the operation.",
                "operationId": "v1.statistics.aggregate-app-stats",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppUsageStatsIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppUsageStatsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Aggregate App Stats",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const appUsageStatsOut = await svix.statistics.aggregateAppStats({\n    appIds: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const appUsageStatsOut = await svix.statistics.aggregateAppStats({\n    appIds: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "app_usage_stats_out = svix.statistics.aggregate_app_stats(AppUsageStatsIn(\n    app_ids=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "app_usage_stats_out = await svix.statistics.aggregate_app_stats(AppUsageStatsIn(\n    app_ids=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "appUsageStatsOut, err := svixClient.Statistics.AggregateAppStats(ctx, &AppUsageStatsIn{\n    AppIds: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val appUsageStatsOut = svix.statistics.aggregateAppStats(AppUsageStatsIn()\n    .appIds(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AppUsageStatsOut appUsageStatsOut = svix.getStatistics().aggregateAppStats(new AppUsageStatsIn()\n    .appIds(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "app_usage_stats_out = svix.statistics.aggregate_app_stats(Svix::AppUsageStatsIn.new({\n    \"app_ids\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let app_usage_stats_out = svix.statistics().aggregate_app_stats(AppUsageStatsIn {\n    app_ids: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var appUsageStatsOut = await svix.Statistics.AggregateAppStatsAsync(new AppUsageStatsIn{\n    appIds: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix statistics aggregate-app-stats '{\n    \"appIds\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stats/usage/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"appIds\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/stats/usage/event-types": {
            "put": {
                "description": "Creates a background task to calculate the listed event types for all apps in the organization.\n\nNote that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to\nretrieve the results of the operation.",
                "operationId": "v1.statistics.aggregate-event-types",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AggregateEventTypesOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Aggregate Event Types",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const aggregateEventTypesOut = await svix.statistics.aggregateEventTypes();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const aggregateEventTypesOut = await svix.statistics.aggregateEventTypes();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "aggregate_event_types_out = svix.statistics.aggregate_event_types()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "aggregate_event_types_out = await svix.statistics.aggregate_event_types()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "aggregateEventTypesOut, err := svixClient.Statistics.AggregateEventTypes(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val aggregateEventTypesOut = svix.statistics.aggregateEventTypes()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AggregateEventTypesOut aggregateEventTypesOut = svix.getStatistics().aggregateEventTypes();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "aggregate_event_types_out = svix.statistics.aggregate_event_types()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let aggregate_event_types_out = svix.statistics().aggregate_event_types().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var aggregateEventTypesOut = await svix.Statistics.AggregateEventTypesAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix statistics aggregate-event-types "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stats/usage/event-types' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/stream": {
            "get": {
                "description": "List of all the organization's streams.",
                "operationId": "v1.stream.stream.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "strm_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 27,
                            "minLength": 27,
                            "nullable": true,
                            "pattern": "^strm_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Streams",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamOut = await svix.stream.stream.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamOut = await svix.stream.stream.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_stream_out = svix.stream.stream.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_stream_out = await svix.stream.stream.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseStreamOut, err := svixClient.Stream.Stream.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseStreamOut = svix.stream.stream.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseStreamOut listResponseStreamOut = svix.getStream().getStream().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_stream_out = svix.stream.stream.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_stream_out = svix.stream().stream().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseStreamOut = await svix.Stream.Stream.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream stream list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Creates a new stream.",
                "operationId": "v1.stream.stream.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.create({\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.create({\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_out = svix.stream.stream.create(StreamIn(\n    uid=\"unique-identifier\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_out = await svix.stream.stream.create(StreamIn(\n    uid=\"unique-identifier\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamOut, err := svixClient.Stream.Stream.Create(ctx, &StreamIn{\n    Uid: \"unique-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamOut = svix.stream.stream.create(StreamIn()\n    .uid(\"unique-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamOut streamOut = svix.getStream().getStream().create(new StreamIn()\n    .uid(\"unique-identifier\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_out = svix.stream.stream.create(Svix::StreamIn.new({\n    \"uid\": \"unique-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_out = svix.stream().stream().create(StreamIn {\n    uid: Some(\"unique-identifier\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamOut = await svix.Stream.Stream.CreateAsync(new StreamIn{\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream stream create '{\n    \"uid\": \"unique-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"uid\": \"unique-identifier\"\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/event-type": {
            "get": {
                "description": "List of all the organization's event types for streaming.",
                "operationId": "v1.stream.event-type.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Include archived (deleted but not expunged) items in the response.",
                        "in": "query",
                        "name": "include_archived",
                        "schema": {
                            "default": false,
                            "description": "Include archived (deleted but not expunged) items in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamEventTypeOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Stream Event Types",
                "tags": [
                    "Stream Event Types"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamEventTypeOut = await svix.stream.eventType.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamEventTypeOut = await svix.stream.eventType.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_stream_event_type_out = svix.stream.event_type.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_stream_event_type_out = await svix.stream.event_type.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseStreamEventTypeOut, err := svixClient.Stream.EventType.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseStreamEventTypeOut = svix.stream.eventType.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseStreamEventTypeOut listResponseStreamEventTypeOut = svix.getStream().getEventType().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_stream_event_type_out = svix.stream.event_type.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_stream_event_type_out = svix.stream().event_type().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseStreamEventTypeOut = await svix.Stream.EventType.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream event-type list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Create an event type for Streams.",
                "operationId": "v1.stream.event-type.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamEventTypeIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Stream Event Type",
                "tags": [
                    "Stream Event Types"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.create({\n    name: \"user.signup\",\n    description: null,\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.create({\n    name: \"user.signup\",\n    description: null,\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_event_type_out = svix.stream.event_type.create(StreamEventTypeIn(\n    name=\"user.signup\",\n    description=None,\n    feature_flags=[\"cool-new-feature\"]\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_event_type_out = await svix.stream.event_type.create(StreamEventTypeIn(\n    name=\"user.signup\",\n    description=None,\n    feature_flags=[\"cool-new-feature\"]\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamEventTypeOut, err := svixClient.Stream.EventType.Create(ctx, &StreamEventTypeIn{\n    Name: \"user.signup\",\n    Description: nil,\n    FeatureFlags: []string{\"cool-new-feature\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamEventTypeOut = svix.stream.eventType.create(StreamEventTypeIn()\n    .name(\"user.signup\")\n    .description(null)\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamEventTypeOut streamEventTypeOut = svix.getStream().getEventType().create(new StreamEventTypeIn()\n    .name(\"user.signup\")\n    .description(null)\n    .featureFlags(new String[]{\"cool-new-feature\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_event_type_out = svix.stream.event_type.create(Svix::StreamEventTypeIn.new({\n    \"name\": \"user.signup\",\n    \"description\": nil,\n    \"feature_flags\": [\"cool-new-feature\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_event_type_out = svix.stream().event_type().create(StreamEventTypeIn {\n    name: \"user.signup\".to_string(),\n    description: None,\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamEventTypeOut = await svix.Stream.EventType.CreateAsync(new StreamEventTypeIn{\n    name: \"user.signup\",\n    description: null,\n    featureFlags: new string[] {\"cool-new-feature\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream event-type create '{\n    \"name\": \"user.signup\",\n    \"description\": null,\n    \"featureFlags\": [\"cool-new-feature\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"user.signup\",\n        \"description\": null,\n        \"featureFlags\": [\"cool-new-feature\"]\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/event-type/{name}": {
            "delete": {
                "description": "Delete an event type.",
                "operationId": "v1.stream.event-type.delete",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "By default, event types are archived when \"deleted\". With this flag, they are deleted entirely.",
                        "in": "query",
                        "name": "expunge",
                        "schema": {
                            "default": false,
                            "description": "By default, event types are archived when \"deleted\". With this flag, they are deleted entirely.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Stream Event Type",
                "tags": [
                    "Stream Event Types"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.eventType.delete(\"name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.eventType.delete(\"name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.event_type.delete(\"name\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.stream.event_type.delete(\"name\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Stream.EventType.Delete(ctx, \"name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.eventType.delete(\"name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getEventType().delete(\"name\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.stream.event_type.delete(\"name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().event_type().delete(\"name\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Stream.EventType.DeleteAsync(\"name\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream event-type delete \"name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/{name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get an event type.",
                "operationId": "v1.stream.event-type.get",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Stream Event Type",
                "tags": [
                    "Stream Event Types"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.get(\"name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.get(\"name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_event_type_out = svix.stream.event_type.get(\"name\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_event_type_out = await svix.stream.event_type.get(\"name\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamEventTypeOut, err := svixClient.Stream.EventType.Get(ctx, \"name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamEventTypeOut = svix.stream.eventType.get(\"name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamEventTypeOut streamEventTypeOut = svix.getStream().getEventType().get(\"name\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_event_type_out = svix.stream.event_type.get(\"name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_event_type_out = svix.stream().event_type().get(\"name\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamEventTypeOut = await svix.Stream.EventType.GetAsync(\"name\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream event-type get \"name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/{name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Patch an event type for Streams.",
                "operationId": "v1.stream.event-type.patch",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamEventTypePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Stream Event Type",
                "tags": [
                    "Stream Event Types"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.patch(\"name\", {\n    name: \"user.signup\",\n    description: null,\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.patch(\"name\", {\n    name: \"user.signup\",\n    description: null,\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_event_type_out = svix.stream.event_type.patch(\"name\", StreamEventTypePatch(\n    name=\"user.signup\",\n    description=None,\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_event_type_out = await svix.stream.event_type.patch(\"name\", StreamEventTypePatch(\n    name=\"user.signup\",\n    description=None,\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamEventTypeOut, err := svixClient.Stream.EventType.Patch(ctx, \"name\", &StreamEventTypePatch{\n    Name: \"user.signup\",\n    Description: nil,\n    FeatureFlags: []string{\"cool-new-feature\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamEventTypeOut = svix.stream.eventType.patch(\"name\", StreamEventTypePatch()\n    .name(\"user.signup\")\n    .description(null)\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamEventTypeOut streamEventTypeOut = svix.getStream().getEventType().patch(\"name\", new StreamEventTypePatch()\n    .name(\"user.signup\")\n    .description(null)\n    .featureFlags(new String[]{\"cool-new-feature\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_event_type_out = svix.stream.event_type.patch(\"name\", Svix::StreamEventTypePatch.new({\n    \"name\": \"user.signup\",\n    \"description\": nil,\n    \"feature_flags\": [\"cool-new-feature\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_event_type_out = svix.stream().event_type().patch(\"name\", StreamEventTypePatch {\n    name: Some(\"user.signup\".to_string()),\n    description: None,\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamEventTypeOut = await svix.Stream.EventType.PatchAsync(\"name\", new StreamEventTypePatch{\n    name: \"user.signup\",\n    description: null,\n    featureFlags: new string[] {\"cool-new-feature\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream event-type patch \"name\" '{\n    \"name\": \"user.signup\",\n    \"description\": null,\n    \"featureFlags\": [\"cool-new-feature\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/{name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"user.signup\",\n        \"description\": null,\n        \"featureFlags\": [\"cool-new-feature\"]\n    }'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update or create a event type for Streams.",
                "operationId": "v1.stream.event-type.update",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamEventTypeIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Stream Event Type",
                "tags": [
                    "Stream Event Types"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.update(\"name\", {\n    name: \"user.signup\",\n    description: null,\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamEventTypeOut = await svix.stream.eventType.update(\"name\", {\n    name: \"user.signup\",\n    description: null,\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_event_type_out = svix.stream.event_type.update(\"name\", StreamEventTypeIn(\n    name=\"user.signup\",\n    description=None,\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_event_type_out = await svix.stream.event_type.update(\"name\", StreamEventTypeIn(\n    name=\"user.signup\",\n    description=None,\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamEventTypeOut, err := svixClient.Stream.EventType.Update(ctx, \"name\", &StreamEventTypeIn{\n    Name: \"user.signup\",\n    Description: nil,\n    FeatureFlags: []string{\"cool-new-feature\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamEventTypeOut = svix.stream.eventType.update(\"name\", StreamEventTypeIn()\n    .name(\"user.signup\")\n    .description(null)\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamEventTypeOut streamEventTypeOut = svix.getStream().getEventType().update(\"name\", new StreamEventTypeIn()\n    .name(\"user.signup\")\n    .description(null)\n    .featureFlags(new String[]{\"cool-new-feature\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_event_type_out = svix.stream.event_type.update(\"name\", Svix::StreamEventTypeIn.new({\n    \"name\": \"user.signup\",\n    \"description\": nil,\n    \"feature_flags\": [\"cool-new-feature\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_event_type_out = svix.stream().event_type().update(\"name\", StreamEventTypeIn {\n    name: \"user.signup\".to_string(),\n    description: None,\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamEventTypeOut = await svix.Stream.EventType.UpdateAsync(\"name\", new StreamEventTypeIn{\n    name: \"user.signup\",\n    description: null,\n    featureFlags: new string[] {\"cool-new-feature\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream event-type update \"name\" '{\n    \"name\": \"user.signup\",\n    \"description\": null,\n    \"featureFlags\": [\"cool-new-feature\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/{name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"user.signup\",\n        \"description\": null,\n        \"featureFlags\": [\"cool-new-feature\"]\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/transformations/simulate": {
            "post": {
                "description": "Simulate the stream transformations endpoint",
                "operationId": "v1.stream.simulate-transformation",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamTransformationSimulateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamTransformationSimulateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Simulate Stream Transformation",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamTransformationSimulateOut = await svix.stream.simulateTransformation({\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamTransformationSimulateOut = await svix.stream.simulateTransformation({\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_transformation_simulate_out = svix.stream.simulate_transformation(StreamTransformationSimulateIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_transformation_simulate_out = await svix.stream.simulate_transformation(StreamTransformationSimulateIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamTransformationSimulateOut, err := svixClient.Stream.SimulateTransformation(ctx, &StreamTransformationSimulateIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamTransformationSimulateOut = svix.stream.simulateTransformation(StreamTransformationSimulateIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamTransformationSimulateOut streamTransformationSimulateOut = svix.getStream().simulateTransformation(new StreamTransformationSimulateIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_transformation_simulate_out = svix.stream.simulate_transformation(Svix::StreamTransformationSimulateIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_transformation_simulate_out = svix.stream().simulate_transformation(StreamTransformationSimulateIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamTransformationSimulateOut = await svix.Stream.SimulateTransformationAsync(new StreamTransformationSimulateIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream simulate-transformation '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/transformations/simulate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}": {
            "delete": {
                "description": "Delete a stream.",
                "operationId": "v1.stream.stream.delete",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.stream.delete(\"stream_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.stream.delete(\"stream_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.stream.delete(\"stream_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.stream.stream.delete(\"stream_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Stream.Stream.Delete(ctx, \"stream_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.stream.delete(\"stream_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getStream().delete(\"stream_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.stream.stream.delete(\"stream_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().stream().delete(\"stream_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Stream.Stream.DeleteAsync(\"stream_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream stream delete \"stream_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get a stream by id or uid.",
                "operationId": "v1.stream.stream.get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.get(\"stream_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.get(\"stream_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_out = svix.stream.stream.get(\"stream_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_out = await svix.stream.stream.get(\"stream_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamOut, err := svixClient.Stream.Stream.Get(ctx, \"stream_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamOut = svix.stream.stream.get(\"stream_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamOut streamOut = svix.getStream().getStream().get(\"stream_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_out = svix.stream.stream.get(\"stream_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_out = svix.stream().stream().get(\"stream_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamOut = await svix.Stream.Stream.GetAsync(\"stream_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream stream get \"stream_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Partially update a stream.",
                "operationId": "v1.stream.stream.patch",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.patch(\"stream_id\", {\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.patch(\"stream_id\", {\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_out = svix.stream.stream.patch(\"stream_id\", StreamPatch(\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_out = await svix.stream.stream.patch(\"stream_id\", StreamPatch(\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamOut, err := svixClient.Stream.Stream.Patch(ctx, \"stream_id\", &StreamPatch{\n    Uid: \"unique-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamOut = svix.stream.stream.patch(\"stream_id\", StreamPatch()\n    .uid(\"unique-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamOut streamOut = svix.getStream().getStream().patch(\"stream_id\", new StreamPatch()\n    .uid(\"unique-identifier\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_out = svix.stream.stream.patch(\"stream_id\", Svix::StreamPatch.new({\n    \"uid\": \"unique-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_out = svix.stream().stream().patch(\"stream_id\", StreamPatch {\n    uid: Some(\"unique-identifier\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamOut = await svix.Stream.Stream.PatchAsync(\"stream_id\", new StreamPatch{\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream stream patch \"stream_id\" '{\n    \"uid\": \"unique-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"uid\": \"unique-identifier\"\n    }'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update a stream.",
                "operationId": "v1.stream.stream.update",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.update(\"stream_id\", {\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamOut = await svix.stream.stream.update(\"stream_id\", {\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_out = svix.stream.stream.update(\"stream_id\", StreamIn(\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_out = await svix.stream.stream.update(\"stream_id\", StreamIn(\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamOut, err := svixClient.Stream.Stream.Update(ctx, \"stream_id\", &StreamIn{\n    Uid: \"unique-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamOut = svix.stream.stream.update(\"stream_id\", StreamIn()\n    .uid(\"unique-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamOut streamOut = svix.getStream().getStream().update(\"stream_id\", new StreamIn()\n    .uid(\"unique-identifier\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_out = svix.stream.stream.update(\"stream_id\", Svix::StreamIn.new({\n    \"uid\": \"unique-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_out = svix.stream().stream().update(\"stream_id\", StreamIn {\n    uid: Some(\"unique-identifier\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamOut = await svix.Stream.Stream.UpdateAsync(\"stream_id\", new StreamIn{\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream stream update \"stream_id\" '{\n    \"uid\": \"unique-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"uid\": \"unique-identifier\"\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/events": {
            "post": {
                "description": "Creates events on the Stream.",
                "operationId": "v1.stream.events.create",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateStreamIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateStreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Events",
                "tags": [
                    "Event"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const createStreamOut = await svix.stream.events.create(\"stream_id\", {\n    stream: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const createStreamOut = await svix.stream.events.create(\"stream_id\", {\n    stream: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "create_stream_out = svix.stream.events.create(\"stream_id\", CreateStreamIn(\n    stream=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "create_stream_out = await svix.stream.events.create(\"stream_id\", CreateStreamIn(\n    stream=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "createStreamOut, err := svixClient.Stream.Events.Create(ctx, \"stream_id\", &CreateStreamIn{\n    Stream: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val createStreamOut = svix.stream.events.create(\"stream_id\", CreateStreamIn()\n    .stream(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "CreateStreamOut createStreamOut = svix.getStream().getEvents().create(\"stream_id\", new CreateStreamIn()\n    .stream(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "create_stream_out = svix.stream.events.create(\"stream_id\", Svix::CreateStreamIn.new({\n    \"stream\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let create_stream_out = svix.stream().events().create(\"stream_id\", CreateStreamIn {\n    stream: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var createStreamOut = await svix.Stream.Events.CreateAsync(\"stream_id\", new CreateStreamIn{\n    stream: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream events create \"stream_id\" '{\n    \"stream\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/events' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"stream\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/events/latest": {
            "get": {
                "description": "Get the latest events from the stream",
                "operationId": "v1.stream.events.get-latest",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 20,
                            "format": "uint64",
                            "maximum": 50,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LatestEventsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Latest Stream Events",
                "tags": [
                    "Event"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const latestEventsOut = await svix.stream.events.getLatest(\"stream_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const latestEventsOut = await svix.stream.events.getLatest(\"stream_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "latest_events_out = svix.stream.events.get_latest(\"stream_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "latest_events_out = await svix.stream.events.get_latest(\"stream_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "latestEventsOut, err := svixClient.Stream.Events.GetLatest(ctx, \"stream_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val latestEventsOut = svix.stream.events.getLatest(\"stream_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "LatestEventsOut latestEventsOut = svix.getStream().getEvents().getLatest(\"stream_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "latest_events_out = svix.stream.events.get_latest(\"stream_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let latest_events_out = svix.stream().events().get_latest(\"stream_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var latestEventsOut = await svix.Stream.Events.GetLatestAsync(\"stream_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream events get-latest \"stream_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/events/latest' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink": {
            "get": {
                "description": "List of all the stream's sinks.",
                "operationId": "v1.stream.sink.list",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 27,
                            "minLength": 27,
                            "nullable": true,
                            "pattern": "^sink_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamSinkOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Sinks",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamSinkOut = await svix.stream.sink.list(\"stream_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseStreamSinkOut = await svix.stream.sink.list(\"stream_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_stream_sink_out = svix.stream.sink.list(\"stream_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_stream_sink_out = await svix.stream.sink.list(\"stream_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseStreamSinkOut, err := svixClient.Stream.Sink.List(ctx, \"stream_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseStreamSinkOut = svix.stream.sink.list(\"stream_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseStreamSinkOut listResponseStreamSinkOut = svix.getStream().getSink().list(\"stream_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_stream_sink_out = svix.stream.sink.list(\"stream_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_stream_sink_out = svix.stream().sink().list(\"stream_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseStreamSinkOut = await svix.Stream.Sink.ListAsync(\"stream_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink list \"stream_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Creates a new sink.",
                "operationId": "v1.stream.sink.create",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}": {
            "delete": {
                "description": "Delete a sink.",
                "operationId": "v1.stream.sink.delete",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.sink.delete(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.sink.delete(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.sink.delete(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.stream.sink.delete(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Stream.Sink.Delete(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.sink.delete(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getSink().delete(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.stream.sink.delete(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().sink().delete(\"stream_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Stream.Sink.DeleteAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink delete \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get a sink by id or uid.",
                "operationId": "v1.stream.sink.get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const streamSinkOut = await svix.stream.sink.get(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const streamSinkOut = await svix.stream.sink.get(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "stream_sink_out = svix.stream.sink.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "stream_sink_out = await svix.stream.sink.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "streamSinkOut, err := svixClient.Stream.Sink.Get(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val streamSinkOut = svix.stream.sink.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "StreamSinkOut streamSinkOut = svix.getStream().getSink().get(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "stream_sink_out = svix.stream.sink.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let stream_sink_out = svix.stream().sink().get(\"stream_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var streamSinkOut = await svix.Stream.Sink.GetAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink get \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Partially update a sink.",
                "operationId": "v1.stream.sink.patch",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update a sink.",
                "operationId": "v1.stream.sink.update",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/events": {
            "get": {
                "description": "Iterate over a stream of events.\n\nThe sink must be of type `poller` to use the poller endpoint.",
                "operationId": "v1.stream.events.get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventStreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Sink Stream Events",
                "tags": [
                    "Event"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventStreamOut = await svix.stream.events.get(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventStreamOut = await svix.stream.events.get(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_stream_out = svix.stream.events.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_stream_out = await svix.stream.events.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventStreamOut, err := svixClient.Stream.Events.Get(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventStreamOut = svix.stream.events.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventStreamOut eventStreamOut = svix.getStream().getEvents().get(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_stream_out = svix.stream.events.get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_stream_out = svix.stream().events().get(\"stream_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventStreamOut = await svix.Stream.Events.GetAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream events get \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/events' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/force-retry": {
            "post": {
                "description": "Forces a Sink to retry dispatch immediately (if the sink is retrying).",
                "operationId": "v1.stream.sink.force-retry",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Force Retry",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.sink.forceRetry(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.sink.forceRetry(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.sink.force_retry(\"stream_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.stream.sink.force_retry(\"stream_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Stream.Sink.ForceRetry(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.sink.forceRetry(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getSink().forceRetry(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.stream.sink.force_retry(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().sink().force_retry(\"stream_id\", \"sink_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Stream.Sink.ForceRetryAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink force-retry \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/force-retry' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/headers": {
            "get": {
                "description": "Get the HTTP sink headers. Only valid for `http` or `otelTracing` sinks.",
                "operationId": "v1.stream.sink-headers-get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.stream.sinkHeadersGet(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.stream.sinkHeadersGet(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_headers_out = svix.stream.sink_headers_get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_headers_out = await svix.stream.sink_headers_get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointHeadersOut, err := svixClient.Stream.SinkHeadersGet(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointHeadersOut = svix.stream.sinkHeadersGet(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointHeadersOut endpointHeadersOut = svix.getStream().sinkHeadersGet(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_headers_out = svix.stream.sink_headers_get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_headers_out = svix.stream().sink_headers_get(\"stream_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointHeadersOut = await svix.Stream.SinkHeadersGetAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink-headers-get \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Updates the Sink's headers. Only valid for `http` or `otelTracing` sinks.",
                "operationId": "v1.stream.sink-headers-patch",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HttpSinkHeadersPatchIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.stream.sinkHeadersPatch(\"stream_id\", \"sink_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.stream.sinkHeadersPatch(\"stream_id\", \"sink_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_headers_out = svix.stream.sink_headers_patch(\"stream_id\", \"sink_id\", HttpSinkHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_headers_out = await svix.stream.sink_headers_patch(\"stream_id\", \"sink_id\", HttpSinkHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointHeadersOut, err := svixClient.Stream.SinkHeadersPatch(ctx, \"stream_id\", \"sink_id\", &HttpSinkHeadersPatchIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointHeadersOut = svix.stream.sinkHeadersPatch(\"stream_id\", \"sink_id\", HttpSinkHeadersPatchIn()\n    .headers(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointHeadersOut endpointHeadersOut = svix.getStream().sinkHeadersPatch(\"stream_id\", \"sink_id\", new HttpSinkHeadersPatchIn()\n    .headers(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_headers_out = svix.stream.sink_headers_patch(\"stream_id\", \"sink_id\", Svix::HttpSinkHeadersPatchIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_headers_out = svix.stream().sink_headers_patch(\"stream_id\", \"sink_id\", HttpSinkHeadersPatchIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointHeadersOut = await svix.Stream.SinkHeadersPatchAsync(\"stream_id\", \"sink_id\", new HttpSinkHeadersPatchIn{\n    headers: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink-headers-patch \"stream_id\" \"sink_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/last-acked-event": {
            "get": {
                "description": "Get the latest event acked from the stream",
                "operationId": "v1.stream.sink.get-last-acked-event",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Last Acked Event",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventOut = await svix.stream.sink.getLastAckedEvent(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventOut = await svix.stream.sink.getLastAckedEvent(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_out = svix.stream.sink.get_last_acked_event(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_out = await svix.stream.sink.get_last_acked_event(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventOut, err := svixClient.Stream.Sink.GetLastAckedEvent(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventOut = svix.stream.sink.getLastAckedEvent(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventOut eventOut = svix.getStream().getSink().getLastAckedEvent(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_out = svix.stream.sink.get_last_acked_event(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_out = svix.stream().sink().get_last_acked_event(\"stream_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventOut = await svix.Stream.Sink.GetLastAckedEventAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink get-last-acked-event \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/last-acked-event' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/secret": {
            "get": {
                "description": "Get the sink's signing secret (only supported for http sinks)\n\nThis is used to verify the authenticity of the delivery.\n\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.stream.sink.get-secret",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const sinkSecretOut = await svix.stream.sink.getSecret(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const sinkSecretOut = await svix.stream.sink.getSecret(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "sink_secret_out = svix.stream.sink.get_secret(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "sink_secret_out = await svix.stream.sink.get_secret(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "sinkSecretOut, err := svixClient.Stream.Sink.GetSecret(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val sinkSecretOut = svix.stream.sink.getSecret(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SinkSecretOut sinkSecretOut = svix.getStream().getSink().getSecret(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "sink_secret_out = svix.stream.sink.get_secret(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let sink_secret_out = svix.stream().sink().get_secret(\"stream_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var sinkSecretOut = await svix.Stream.Sink.GetSecretAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink get-secret \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/secret/rotate": {
            "post": {
                "description": "Rotates the signing secret (only supported for http sinks).",
                "operationId": "v1.stream.sink.rotate-secret",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointSecretRotateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.stream.sink.rotateSecret(\"stream_id\", \"sink_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.stream.sink.rotateSecret(\"stream_id\", \"sink_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "empty_response = svix.stream.sink.rotate_secret(\"stream_id\", \"sink_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "empty_response = await svix.stream.sink.rotate_secret(\"stream_id\", \"sink_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "emptyResponse, err := svixClient.Stream.Sink.RotateSecret(ctx, \"stream_id\", \"sink_id\", &EndpointSecretRotateIn{\n    Key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val emptyResponse = svix.stream.sink.rotateSecret(\"stream_id\", \"sink_id\", EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EmptyResponse emptyResponse = svix.getStream().getSink().rotateSecret(\"stream_id\", \"sink_id\", new EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "empty_response = svix.stream.sink.rotate_secret(\"stream_id\", \"sink_id\", Svix::EndpointSecretRotateIn.new({\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let empty_response = svix.stream().sink().rotate_secret(\"stream_id\", \"sink_id\", EndpointSecretRotateIn {\n    key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var emptyResponse = await svix.Stream.Sink.RotateSecretAsync(\"stream_id\", \"sink_id\", new EndpointSecretRotateIn{\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink rotate-secret \"stream_id\" \"sink_id\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/skip": {
            "post": {
                "description": "Skip N events for a sink by advancing its consumer group position",
                "operationId": "v1.stream.sink.skip",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "n",
                        "schema": {
                            "default": 1,
                            "format": "uint64",
                            "maximum": 1000,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Skip N Events",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.sink.skip(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.sink.skip(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.sink.skip(\"stream_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.stream.sink.skip(\"stream_id\", \"sink_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Stream.Sink.Skip(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.sink.skip(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getSink().skip(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.stream.sink.skip(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().sink().skip(\"stream_id\", \"sink_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Stream.Sink.SkipAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink skip \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/skip' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/transformation": {
            "get": {
                "description": "Get the transformation code associated with this sink.",
                "operationId": "v1.stream.sink-transformation-get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const sinkTransformationOut = await svix.stream.sinkTransformationGet(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const sinkTransformationOut = await svix.stream.sinkTransformationGet(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "sink_transformation_out = svix.stream.sink_transformation_get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "sink_transformation_out = await svix.stream.sink_transformation_get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "sinkTransformationOut, err := svixClient.Stream.SinkTransformationGet(ctx, \"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val sinkTransformationOut = svix.stream.sinkTransformationGet(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SinkTransformationOut sinkTransformationOut = svix.getStream().sinkTransformationGet(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "sink_transformation_out = svix.stream.sink_transformation_get(\"stream_id\", \"sink_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let sink_transformation_out = svix.stream().sink_transformation_get(\"stream_id\", \"sink_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var sinkTransformationOut = await svix.Stream.SinkTransformationGetAsync(\"stream_id\", \"sink_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink-transformation-get \"stream_id\" \"sink_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this sink.",
                "operationId": "v1.stream.sink.transformation-partial-update",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SinkTransformIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Set Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.stream.sink.transformationPartialUpdate(\"stream_id\", \"sink_id\", {\n    code: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const emptyResponse = await svix.stream.sink.transformationPartialUpdate(\"stream_id\", \"sink_id\", {\n    code: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "empty_response = svix.stream.sink.transformation_partial_update(\"stream_id\", \"sink_id\", SinkTransformIn(\n    code=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "empty_response = await svix.stream.sink.transformation_partial_update(\"stream_id\", \"sink_id\", SinkTransformIn(\n    code=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "emptyResponse, err := svixClient.Stream.Sink.TransformationPartialUpdate(ctx, \"stream_id\", \"sink_id\", &SinkTransformIn{\n    Code: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val emptyResponse = svix.stream.sink.transformationPartialUpdate(\"stream_id\", \"sink_id\", SinkTransformIn()\n    .code(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EmptyResponse emptyResponse = svix.getStream().getSink().transformationPartialUpdate(\"stream_id\", \"sink_id\", new SinkTransformIn()\n    .code(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "empty_response = svix.stream.sink.transformation_partial_update(\"stream_id\", \"sink_id\", Svix::SinkTransformIn.new({\n    \"code\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let empty_response = svix.stream().sink().transformation_partial_update(\"stream_id\", \"sink_id\", SinkTransformIn {\n    code: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var emptyResponse = await svix.Stream.Sink.TransformationPartialUpdateAsync(\"stream_id\", \"sink_id\", new SinkTransformIn{\n    code: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stream sink transformation-partial-update \"stream_id\" \"sink_id\" '{\n    \"code\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/{stream_id}/sink/{sink_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"code\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/transformation-template": {
            "get": {
                "description": "List all transformation templates for an application.",
                "operationId": "v1.beta.connector.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "nullable": true,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ConnectorOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Connectors",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseConnectorOut = await svix.beta.connector.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseConnectorOut = await svix.beta.connector.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_connector_out = svix.beta.connector.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_connector_out = await svix.beta.connector.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseConnectorOut, err := svixClient.Beta.Connector.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseConnectorOut = svix.beta.connector.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseConnectorOut listResponseConnectorOut = svix.getBeta().getConnector().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_connector_out = svix.beta.connector.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_connector_out = svix.beta().connector().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseConnectorOut = await svix.Beta.Connector.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/transformation-template' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Create a new connector.",
                "operationId": "v1.beta.connector.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectorIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.create({\n    instructionsLink: null,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.create({\n    instructionsLink: null,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "connector_out = svix.beta.connector.create(ConnectorIn(\n    instructions_link=None,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    feature_flags=[\"cool-new-feature\"]\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "connector_out = await svix.beta.connector.create(ConnectorIn(\n    instructions_link=None,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    feature_flags=[\"cool-new-feature\"]\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "connectorOut, err := svixClient.Beta.Connector.Create(ctx, &ConnectorIn{\n    InstructionsLink: nil,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    FeatureFlags: []string{\"cool-new-feature\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val connectorOut = svix.beta.connector.create(ConnectorIn()\n    .instructionsLink(null)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ConnectorOut connectorOut = svix.getBeta().getConnector().create(new ConnectorIn()\n    .instructionsLink(null)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .featureFlags(new String[]{\"cool-new-feature\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "connector_out = svix.beta.connector.create(Svix::ConnectorIn.new({\n    \"instructions_link\": nil,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"feature_flags\": [\"cool-new-feature\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let connector_out = svix.beta().connector().create(ConnectorIn {\n    instructions_link: None,\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var connectorOut = await svix.Beta.Connector.CreateAsync(new ConnectorIn{\n    instructionsLink: null,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    featureFlags: new string[] {\"cool-new-feature\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector create '{\n    \"instructionsLink\": null,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"featureFlags\": [\"cool-new-feature\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/transformation-template' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"instructionsLink\": null,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"featureFlags\": [\"cool-new-feature\"]\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/transformation-template/generate": {
            "post": {
                "description": "Use OpenAI's Completion API to generate code for a connector.",
                "operationId": "v1.beta.connector.generate",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenerateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Generate",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const generateOut = await svix.beta.connector.generate({\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const generateOut = await svix.beta.connector.generate({\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "generate_out = svix.beta.connector.generate(GenerateIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "generate_out = await svix.beta.connector.generate(GenerateIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "generateOut, err := svixClient.Beta.Connector.Generate(ctx, &GenerateIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val generateOut = svix.beta.connector.generate(GenerateIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "GenerateOut generateOut = svix.getBeta().getConnector().generate(new GenerateIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "generate_out = svix.beta.connector.generate(Svix::GenerateIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let generate_out = svix.beta().connector().generate(GenerateIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var generateOut = await svix.Beta.Connector.GenerateAsync(new GenerateIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector generate '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/generate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/transformation-template/oauth/discord": {
            "post": {
                "description": "Get Discord Incoming webhook URL.",
                "operationId": "v1.beta.connector.oauth.discord",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthPayloadIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomingWebhookPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Authorize Discord",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const incomingWebhookPayloadOut = await svix.beta.connector.oauth.discord({\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const incomingWebhookPayloadOut = await svix.beta.connector.oauth.discord({\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "incoming_webhook_payload_out = svix.beta.connector.oauth.discord(OAuthPayloadIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "incoming_webhook_payload_out = await svix.beta.connector.oauth.discord(OAuthPayloadIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "incomingWebhookPayloadOut, err := svixClient.Beta.Connector.Oauth.Discord(ctx, &OAuthPayloadIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val incomingWebhookPayloadOut = svix.beta.connector.oauth.discord(OAuthPayloadIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IncomingWebhookPayloadOut incomingWebhookPayloadOut = svix.getBeta().getConnector().getOauth().discord(new OAuthPayloadIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "incoming_webhook_payload_out = svix.beta.connector.oauth.discord(Svix::OAuthPayloadIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let incoming_webhook_payload_out = svix.beta().connector().oauth().discord(OAuthPayloadIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var incomingWebhookPayloadOut = await svix.Beta.Connector.Oauth.DiscordAsync(new OAuthPayloadIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector oauth discord '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/oauth/discord' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/transformation-template/oauth/hubspot": {
            "post": {
                "description": "Get Hubspot access token using authorization code.",
                "operationId": "v1.beta.connector.oauth.hubspot",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthPayloadIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Authorize Hubspot",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const oAuthPayloadOut = await svix.beta.connector.oauth.hubspot({\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const oAuthPayloadOut = await svix.beta.connector.oauth.hubspot({\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "o_auth_payload_out = svix.beta.connector.oauth.hubspot(OAuthPayloadIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "o_auth_payload_out = await svix.beta.connector.oauth.hubspot(OAuthPayloadIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "oAuthPayloadOut, err := svixClient.Beta.Connector.Oauth.Hubspot(ctx, &OAuthPayloadIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val oAuthPayloadOut = svix.beta.connector.oauth.hubspot(OAuthPayloadIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OAuthPayloadOut oAuthPayloadOut = svix.getBeta().getConnector().getOauth().hubspot(new OAuthPayloadIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "o_auth_payload_out = svix.beta.connector.oauth.hubspot(Svix::OAuthPayloadIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let o_auth_payload_out = svix.beta().connector().oauth().hubspot(OAuthPayloadIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var oAuthPayloadOut = await svix.Beta.Connector.Oauth.HubspotAsync(new OAuthPayloadIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector oauth hubspot '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/oauth/hubspot' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/transformation-template/oauth/slack": {
            "post": {
                "description": "Get Slack Incoming webhook URL.",
                "operationId": "v1.beta.connector.oauth.slack",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthPayloadIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomingWebhookPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Authorize Slack",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const incomingWebhookPayloadOut = await svix.beta.connector.oauth.slack({\n\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const incomingWebhookPayloadOut = await svix.beta.connector.oauth.slack({\n\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "incoming_webhook_payload_out = svix.beta.connector.oauth.slack(OAuthPayloadIn(\n\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "incoming_webhook_payload_out = await svix.beta.connector.oauth.slack(OAuthPayloadIn(\n\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "incomingWebhookPayloadOut, err := svixClient.Beta.Connector.Oauth.Slack(ctx, &OAuthPayloadIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val incomingWebhookPayloadOut = svix.beta.connector.oauth.slack(OAuthPayloadIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IncomingWebhookPayloadOut incomingWebhookPayloadOut = svix.getBeta().getConnector().getOauth().slack(new OAuthPayloadIn()\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "incoming_webhook_payload_out = svix.beta.connector.oauth.slack(Svix::OAuthPayloadIn.new({\n\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let incoming_webhook_payload_out = svix.beta().connector().oauth().slack(OAuthPayloadIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var incomingWebhookPayloadOut = await svix.Beta.Connector.Oauth.SlackAsync(new OAuthPayloadIn{\n\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector oauth slack '{\n\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/oauth/slack' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/transformation-template/simulate": {
            "post": {
                "description": "Simulate running the transformation on the payload and code.",
                "operationId": "v1.beta.connector.simulate",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransformationSimulateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransformationSimulateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Simulate",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const transformationSimulateOut = await svix.beta.connector.simulate({\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const transformationSimulateOut = await svix.beta.connector.simulate({\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "transformation_simulate_out = svix.beta.connector.simulate(TransformationSimulateIn(\n    event_type=\"user.signup\",\n    channels=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "transformation_simulate_out = await svix.beta.connector.simulate(TransformationSimulateIn(\n    event_type=\"user.signup\",\n    channels=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "transformationSimulateOut, err := svixClient.Beta.Connector.Simulate(ctx, &TransformationSimulateIn{\n    EventType: \"user.signup\",\n    Channels: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val transformationSimulateOut = svix.beta.connector.simulate(TransformationSimulateIn()\n    .eventType(\"user.signup\")\n    .channels(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "TransformationSimulateOut transformationSimulateOut = svix.getBeta().getConnector().simulate(new TransformationSimulateIn()\n    .eventType(\"user.signup\")\n    .channels(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "transformation_simulate_out = svix.beta.connector.simulate(Svix::TransformationSimulateIn.new({\n    \"event_type\": \"user.signup\",\n    \"channels\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let transformation_simulate_out = svix.beta().connector().simulate(TransformationSimulateIn {\n    event_type: \"user.signup\".to_string(),\n    channels: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var transformationSimulateOut = await svix.Beta.Connector.SimulateAsync(new TransformationSimulateIn{\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector simulate '{\n    \"eventType\": \"user.signup\",\n    \"channels\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/simulate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventType\": \"user.signup\",\n        \"channels\": null\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/api/v1/transformation-template/{transformation_template_id}": {
            "delete": {
                "description": "Delete a connector.",
                "operationId": "v1.beta.connector.delete",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "transformation_template_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.beta.connector.delete(\"transformation_template_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.beta.connector.delete(\"transformation_template_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.beta.connector.delete(\"transformation_template_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.beta.connector.delete(\"transformation_template_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Beta.Connector.Delete(ctx, \"transformation_template_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.beta.connector.delete(\"transformation_template_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getBeta().getConnector().delete(\"transformation_template_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.beta.connector.delete(\"transformation_template_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.beta().connector().delete(\"transformation_template_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Beta.Connector.DeleteAsync(\"transformation_template_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector delete \"transformation_template_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/{transformation_template_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "get": {
                "description": "Get a connector.",
                "operationId": "v1.beta.connector.get",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "transformation_template_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.get(\"transformation_template_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.get(\"transformation_template_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "connector_out = svix.beta.connector.get(\"transformation_template_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "connector_out = await svix.beta.connector.get(\"transformation_template_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "connectorOut, err := svixClient.Beta.Connector.Get(ctx, \"transformation_template_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val connectorOut = svix.beta.connector.get(\"transformation_template_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ConnectorOut connectorOut = svix.getBeta().getConnector().get(\"transformation_template_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "connector_out = svix.beta.connector.get(\"transformation_template_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let connector_out = svix.beta().connector().get(\"transformation_template_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var connectorOut = await svix.Beta.Connector.GetAsync(\"transformation_template_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector get \"transformation_template_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/{transformation_template_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "patch": {
                "description": "Partially update a connector.",
                "operationId": "v1.beta.connector.patch",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "transformation_template_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectorPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.patch(\"transformation_template_id\", {\n    instructionsLink: null,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.patch(\"transformation_template_id\", {\n    instructionsLink: null,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "connector_out = svix.beta.connector.patch(\"transformation_template_id\", ConnectorPatch(\n    instructions_link=None,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "connector_out = await svix.beta.connector.patch(\"transformation_template_id\", ConnectorPatch(\n    instructions_link=None,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "connectorOut, err := svixClient.Beta.Connector.Patch(ctx, \"transformation_template_id\", &ConnectorPatch{\n    InstructionsLink: nil,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    FeatureFlags: []string{\"cool-new-feature\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val connectorOut = svix.beta.connector.patch(\"transformation_template_id\", ConnectorPatch()\n    .instructionsLink(null)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ConnectorOut connectorOut = svix.getBeta().getConnector().patch(\"transformation_template_id\", new ConnectorPatch()\n    .instructionsLink(null)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .featureFlags(new String[]{\"cool-new-feature\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "connector_out = svix.beta.connector.patch(\"transformation_template_id\", Svix::ConnectorPatch.new({\n    \"instructions_link\": nil,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"feature_flags\": [\"cool-new-feature\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let connector_out = svix.beta().connector().patch(\"transformation_template_id\", ConnectorPatch {\n    instructions_link: None,\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var connectorOut = await svix.Beta.Connector.PatchAsync(\"transformation_template_id\", new ConnectorPatch{\n    instructionsLink: null,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    featureFlags: new string[] {\"cool-new-feature\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector patch \"transformation_template_id\" '{\n    \"instructionsLink\": null,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"featureFlags\": [\"cool-new-feature\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/{transformation_template_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"instructionsLink\": null,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"featureFlags\": [\"cool-new-feature\"]\n    }'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update a connector.",
                "operationId": "v1.beta.connector.update",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "transformation_template_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectorUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.update(\"transformation_template_id\", {\n    instructionsLink: null,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const connectorOut = await svix.beta.connector.update(\"transformation_template_id\", {\n    instructionsLink: null,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    featureFlags: [\"cool-new-feature\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "connector_out = svix.beta.connector.update(\"transformation_template_id\", ConnectorUpdate(\n    instructions_link=None,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "connector_out = await svix.beta.connector.update(\"transformation_template_id\", ConnectorUpdate(\n    instructions_link=None,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    feature_flags=[\"cool-new-feature\"]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "connectorOut, err := svixClient.Beta.Connector.Update(ctx, \"transformation_template_id\", &ConnectorUpdate{\n    InstructionsLink: nil,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    FeatureFlags: []string{\"cool-new-feature\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val connectorOut = svix.beta.connector.update(\"transformation_template_id\", ConnectorUpdate()\n    .instructionsLink(null)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .featureFlags(arrayOf(\"cool-new-feature\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ConnectorOut connectorOut = svix.getBeta().getConnector().update(\"transformation_template_id\", new ConnectorUpdate()\n    .instructionsLink(null)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .featureFlags(new String[]{\"cool-new-feature\"})\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "connector_out = svix.beta.connector.update(\"transformation_template_id\", Svix::ConnectorUpdate.new({\n    \"instructions_link\": nil,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"feature_flags\": [\"cool-new-feature\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let connector_out = svix.beta().connector().update(\"transformation_template_id\", ConnectorUpdate {\n    instructions_link: None,\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var connectorOut = await svix.Beta.Connector.UpdateAsync(\"transformation_template_id\", new ConnectorUpdate{\n    instructionsLink: null,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    featureFlags: new string[] {\"cool-new-feature\"}\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix beta connector update \"transformation_template_id\" '{\n    \"instructionsLink\": null,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"featureFlags\": [\"cool-new-feature\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/transformation-template/{transformation_template_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"instructionsLink\": null,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"featureFlags\": [\"cool-new-feature\"]\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/dashboard/survey": {
            "post": {
                "description": "Submit a survey entry for a user",
                "operationId": "v1.dashboard.survey.submit",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SurveyIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SurveyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Submit Survey",
                "tags": [
                    "Survey"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const surveyOut = await svix.dashboard.survey.submit({\n    title: \"Welcome Questionnaire\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const surveyOut = await svix.dashboard.survey.submit({\n    title: \"Welcome Questionnaire\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "survey_out = svix.dashboard.survey.submit(SurveyIn(\n    title=\"Welcome Questionnaire\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "survey_out = await svix.dashboard.survey.submit(SurveyIn(\n    title=\"Welcome Questionnaire\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "surveyOut, err := svixClient.Dashboard.Survey.Submit(ctx, &SurveyIn{\n    Title: \"Welcome Questionnaire\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val surveyOut = svix.dashboard.survey.submit(SurveyIn()\n    .title(\"Welcome Questionnaire\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "SurveyOut surveyOut = svix.getDashboard().getSurvey().submit(new SurveyIn()\n    .title(\"Welcome Questionnaire\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "survey_out = svix.dashboard.survey.submit(Svix::SurveyIn.new({\n    \"title\": \"Welcome Questionnaire\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let survey_out = svix.dashboard().survey().submit(SurveyIn {\n    title: \"Welcome Questionnaire\".to_string(),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var surveyOut = await svix.Dashboard.Survey.SubmitAsync(new SurveyIn{\n    title: \"Welcome Questionnaire\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix dashboard survey submit '{\n    \"title\": \"Welcome Questionnaire\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/dashboard/survey' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"title\": \"Welcome Questionnaire\"\n    }'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/ingest/api/v1/source": {
            "get": {
                "description": "List of all the organization's Ingest Sources.",
                "operationId": "v1.ingest.source.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 26,
                            "minLength": 26,
                            "nullable": true,
                            "pattern": "^src_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_IngestSourceOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Ingest Sources",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIngestSourceOut = await svix.ingest.source.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIngestSourceOut = await svix.ingest.source.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_ingest_source_out = svix.ingest.source.list(options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_ingest_source_out = await svix.ingest.source.list(options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseIngestSourceOut, err := svixClient.Ingest.Source.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseIngestSourceOut = svix.ingest.source.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseIngestSourceOut listResponseIngestSourceOut = svix.getIngest().getSource().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_ingest_source_out = svix.ingest.source.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_ingest_source_out = svix.ingest().source().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseIngestSourceOut = await svix.Ingest.Source.ListAsync();"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest source list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create Ingest Source.",
                "operationId": "v1.ingest.source.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourceIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestSourceOut = await svix.ingest.source.create({\n    name: \"myGithubWebhook\",\n    uid: \"unique-identifier\",\n    type: \"github\",\n    config: {\n        secret: \"SECRET\"\n    },\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestSourceOut = await svix.ingest.source.create({\n    name: \"myGithubWebhook\",\n    uid: \"unique-identifier\",\n    type: \"github\",\n    config: {\n        secret: \"SECRET\"\n    },\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_source_out = svix.ingest.source.create(IngestSourceIn(\n    name=\"myGithubWebhook\",\n    uid=\"unique-identifier\",\n    type=\"github\",\n    config=GithubConfig(\n        secret=\"SECRET\"\n    ),\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_source_out = await svix.ingest.source.create(IngestSourceIn(\n    name=\"myGithubWebhook\",\n    uid=\"unique-identifier\",\n    type=\"github\",\n    config=GithubConfig(\n        secret=\"SECRET\"\n    ),\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestSourceOut, err := svixClient.Ingest.Source.Create(\n    ctx,\n    &IngestSourceIn{\n        Name: \"myGithubWebhook\",\n        Uid: \"unique-identifier\",\n        Type: IngestSourceInTypeGithub,\n        Config: GithubConfig{\n            Secret: \"SECRET\",\n        },\n    },\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestSourceOut = svix.ingest.source.create(IngestSourceIn(\n    name = \"myGithubWebhook\",\n    uid = \"unique-identifier\",\n    config = IngestSourceInConfig.Github(GithubConfig(\n        secret = \"SECRET\"\n    )),\n))"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestSourceOut ingestSourceOut = svix\n    .getIngest()\n    .getSource()\n    .create(new IngestSourceIn()\n        .name(\"myGithubWebhook\")\n        .uid(\"unique-identifier\")\n        .config(new IngestSourceInConfig.Github(new GithubConfig()\n        .secret(\"SECRET\")\n        ))\n    );"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_source_out = svix.ingest.source.create(Svix::IngestSourceIn.new({\n    \"name\": \"myGithubWebhook\",\n    \"uid\": \"unique-identifier\",\n    \"config\": Svix::IngestSourceInConfig::Github.new({\n        \"secret\": \"SECRET\"\n    })\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_source_out = svix.ingest().source().create(\n    IngestSourceIn {\n        name: \"myGithubWebhook\".to_owned(),\n        uid: Some(\"unique-identifier\".to_owned()),\n        config: IngestSourceInConfig::Github(GithubConfig {\n            secret: \"SECRET\".to_owned(),\n            ..Default::default()\n        }),\n        ..Default::default()\n    },\n    None,\n).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestSourceOut = await svix.Ingest.Source.CreateAsync(\n    new IngestSourceIn{\n        Name = \"myGithubWebhook\",\n        Uid = \"unique-identifier\",\n        Config = IngestSourceInConfig.Github(new GithubConfig {\n            Secret = \"SECRET\",\n        }),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest source create '{\n    \"name\": \"myGithubWebhook\",\n    \"uid\": \"unique-identifier\",\n    \"type\": \"github\",\n    \"config\": {\n        \"secret\": \"SECRET\"\n    }\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n    'https://api.eu.svix.com/ingest/api/v1/source' \\\n    -H 'Authorization: Bearer AUTH_TOKEN' \\\n    -H 'Accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"name\": \"myGithubWebhook\",\n        \"uid\": \"unique-identifier\",\n        \"type\": \"github\",\n        \"config\": {\n            \"secret\": \"SECRET\"\n        }\n    }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}": {
            "delete": {
                "description": "Delete an Ingest Source.",
                "operationId": "v1.ingest.source.delete",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.source.delete(\"source_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.source.delete(\"source_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.source.delete(\"source_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.ingest.source.delete(\"source_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Ingest.Source.Delete(ctx, \"source_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.source.delete(\"source_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest().getSource().delete(\"source_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.ingest.source.delete(\"source_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest().source().delete(\"source_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Ingest.Source.DeleteAsync(\"source_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest source delete \"source_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an Ingest Source by id or uid.",
                "operationId": "v1.ingest.source.get",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestSourceOut = await svix.ingest.source.get(\"source_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestSourceOut = await svix.ingest.source.get(\"source_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_source_out = svix.ingest.source.get(\"source_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_source_out = await svix.ingest.source.get(\"source_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestSourceOut, err := svixClient.Ingest.Source.Get(ctx, \"source_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestSourceOut = svix.ingest.source.get(\"source_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestSourceOut ingestSourceOut = svix.getIngest().getSource().get(\"source_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_source_out = svix.ingest.source.get(\"source_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_source_out = svix.ingest().source().get(\"source_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestSourceOut = await svix.Ingest.Source.GetAsync(\"source_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest source get \"source_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Patch an Ingest Source.",
                "operationId": "v1.ingest.source.patch",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourcePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestSourceOut = await svix.ingest.source.patch(\"source_id\", {\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestSourceOut = await svix.ingest.source.patch(\"source_id\", {\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_source_out = svix.ingest.source.patch(\"source_id\", IngestSourcePatch(\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_source_out = await svix.ingest.source.patch(\"source_id\", IngestSourcePatch(\n    uid=\"unique-identifier\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestSourceOut, err := svixClient.Ingest.Source.Patch(ctx, \"source_id\", &IngestSourcePatch{\n    Uid: \"unique-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestSourceOut = svix.ingest.source.patch(\"source_id\", IngestSourcePatch()\n    .uid(\"unique-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestSourceOut ingestSourceOut = svix.getIngest().getSource().patch(\"source_id\", new IngestSourcePatch()\n    .uid(\"unique-identifier\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_source_out = svix.ingest.source.patch(\"source_id\", Svix::IngestSourcePatch.new({\n    \"uid\": \"unique-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_source_out = svix.ingest().source().patch(\"source_id\", IngestSourcePatch {\n    uid: Some(\"unique-identifier\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestSourceOut = await svix.Ingest.Source.PatchAsync(\"source_id\", new IngestSourcePatch{\n    uid: \"unique-identifier\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest source patch \"source_id\" '{\n    \"uid\": \"unique-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"uid\": \"unique-identifier\"\n    }'"
                    }
                ],
                "x-hidden": true
            },
            "put": {
                "description": "Update an Ingest Source.",
                "operationId": "v1.ingest.source.update",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourceIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Source",
                "tags": [
                    "Ingest Source"
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/dashboard": {
            "post": {
                "description": "Get access to the Ingest Source Consumer Portal.",
                "operationId": "v1.ingest.dashboard",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourceConsumerPortalAccessIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Ingest Source Consumer Portal",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const dashboardAccessOut = await svix.ingest.dashboard(\"source_id\", {\n    expiry: null,\n    readOnly: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const dashboardAccessOut = await svix.ingest.dashboard(\"source_id\", {\n    expiry: null,\n    readOnly: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "dashboard_access_out = svix.ingest.dashboard(\"source_id\", IngestSourceConsumerPortalAccessIn(\n    expiry=None,\n    read_only=None\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "dashboard_access_out = await svix.ingest.dashboard(\"source_id\", IngestSourceConsumerPortalAccessIn(\n    expiry=None,\n    read_only=None\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "dashboardAccessOut, err := svixClient.Ingest.Dashboard(ctx, \"source_id\", &IngestSourceConsumerPortalAccessIn{\n    Expiry: nil,\n    ReadOnly: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val dashboardAccessOut = svix.ingest.dashboard(\"source_id\", IngestSourceConsumerPortalAccessIn()\n    .expiry(null)\n    .readOnly(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "DashboardAccessOut dashboardAccessOut = svix.getIngest().dashboard(\"source_id\", new IngestSourceConsumerPortalAccessIn()\n    .expiry(null)\n    .readOnly(null)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "dashboard_access_out = svix.ingest.dashboard(\"source_id\", Svix::IngestSourceConsumerPortalAccessIn.new({\n    \"expiry\": nil,\n    \"read_only\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let dashboard_access_out = svix.ingest().dashboard(\"source_id\", IngestSourceConsumerPortalAccessIn {\n    expiry: None,\n    read_only: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var dashboardAccessOut = await svix.Ingest.DashboardAsync(\"source_id\", new IngestSourceConsumerPortalAccessIn{\n    expiry: null,\n    readOnly: null\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest dashboard \"source_id\" '{\n    \"expiry\": null,\n    \"readOnly\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/dashboard' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"expiry\": null,\n        \"readOnly\": null\n    }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint": {
            "get": {
                "description": "List ingest endpoints.",
                "operationId": "v1.ingest.endpoint.list",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_IngestEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Ingest Endpoints",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIngestEndpointOut = await svix.ingest.endpoint.list(\"source_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIngestEndpointOut = await svix.ingest.endpoint.list(\"source_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_ingest_endpoint_out = svix.ingest.endpoint.list(\"source_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_ingest_endpoint_out = await svix.ingest.endpoint.list(\"source_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseIngestEndpointOut, err := svixClient.Ingest.Endpoint.List(ctx, \"source_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseIngestEndpointOut = svix.ingest.endpoint.list(\"source_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseIngestEndpointOut listResponseIngestEndpointOut = svix.getIngest().getEndpoint().list(\"source_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_ingest_endpoint_out = svix.ingest.endpoint.list(\"source_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_ingest_endpoint_out = svix.ingest().endpoint().list(\"source_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseIngestEndpointOut = await svix.Ingest.Endpoint.ListAsync(\"source_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint list \"source_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.create",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointOut = await svix.ingest.endpoint.create(\"source_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointOut = await svix.ingest.endpoint.create(\"source_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_endpoint_out = svix.ingest.endpoint.create(\"source_id\", IngestEndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_endpoint_out = await svix.ingest.endpoint.create(\"source_id\", IngestEndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestEndpointOut, err := svixClient.Ingest.Endpoint.Create(ctx, \"source_id\", &IngestEndpointIn{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n    Secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestEndpointOut = svix.ingest.endpoint.create(\"source_id\", IngestEndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestEndpointOut ingestEndpointOut = svix.getIngest().getEndpoint().create(\"source_id\", new IngestEndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_endpoint_out = svix.ingest.endpoint.create(\"source_id\", Svix::IngestEndpointIn.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_endpoint_out = svix.ingest().endpoint().create(\"source_id\", IngestEndpointIn {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n    secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestEndpointOut = await svix.Ingest.Endpoint.CreateAsync(\"source_id\", new IngestEndpointIn{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint create \"source_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}": {
            "delete": {
                "description": "Delete an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.delete",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.delete(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.delete(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.endpoint.delete(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.ingest.endpoint.delete(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Ingest.Endpoint.Delete(ctx, \"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.endpoint.delete(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest().getEndpoint().delete(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.ingest.endpoint.delete(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest().endpoint().delete(\"source_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Ingest.Endpoint.DeleteAsync(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint delete \"source_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.get",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointOut = await svix.ingest.endpoint.get(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointOut = await svix.ingest.endpoint.get(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_endpoint_out = svix.ingest.endpoint.get(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_endpoint_out = await svix.ingest.endpoint.get(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestEndpointOut, err := svixClient.Ingest.Endpoint.Get(ctx, \"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestEndpointOut = svix.ingest.endpoint.get(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestEndpointOut ingestEndpointOut = svix.getIngest().getEndpoint().get(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_endpoint_out = svix.ingest.endpoint.get(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_endpoint_out = svix.ingest().endpoint().get(\"source_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestEndpointOut = await svix.Ingest.Endpoint.GetAsync(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint get \"source_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Update an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.update",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointOut = await svix.ingest.endpoint.update(\"source_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointOut = await svix.ingest.endpoint.update(\"source_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_endpoint_out = svix.ingest.endpoint.update(\"source_id\", \"endpoint_id\", IngestEndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_endpoint_out = await svix.ingest.endpoint.update(\"source_id\", \"endpoint_id\", IngestEndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestEndpointOut, err := svixClient.Ingest.Endpoint.Update(ctx, \"source_id\", \"endpoint_id\", &IngestEndpointUpdate{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestEndpointOut = svix.ingest.endpoint.update(\"source_id\", \"endpoint_id\", IngestEndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestEndpointOut ingestEndpointOut = svix.getIngest().getEndpoint().update(\"source_id\", \"endpoint_id\", new IngestEndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_endpoint_out = svix.ingest.endpoint.update(\"source_id\", \"endpoint_id\", Svix::IngestEndpointUpdate.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_endpoint_out = svix.ingest().endpoint().update(\"source_id\", \"endpoint_id\", IngestEndpointUpdate {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestEndpointOut = await svix.Ingest.Endpoint.UpdateAsync(\"source_id\", \"endpoint_id\", new IngestEndpointUpdate{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint update \"source_id\" \"endpoint_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false\n    }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/headers": {
            "get": {
                "description": "Get the additional headers to be sent with the ingest.",
                "operationId": "v1.ingest.endpoint.get-headers",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Endpoint Headers",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointHeadersOut = await svix.ingest.endpoint.getHeaders(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointHeadersOut = await svix.ingest.endpoint.getHeaders(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_endpoint_headers_out = svix.ingest.endpoint.get_headers(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_endpoint_headers_out = await svix.ingest.endpoint.get_headers(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestEndpointHeadersOut, err := svixClient.Ingest.Endpoint.GetHeaders(ctx, \"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestEndpointHeadersOut = svix.ingest.endpoint.getHeaders(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestEndpointHeadersOut ingestEndpointHeadersOut = svix.getIngest().getEndpoint().getHeaders(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_endpoint_headers_out = svix.ingest.endpoint.get_headers(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_endpoint_headers_out = svix.ingest().endpoint().get_headers(\"source_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestEndpointHeadersOut = await svix.Ingest.Endpoint.GetHeadersAsync(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint get-headers \"source_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Set the additional headers to be sent to the endpoint.",
                "operationId": "v1.ingest.endpoint.update-headers",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointHeadersIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Ingest Endpoint Headers",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.updateHeaders(\"source_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.updateHeaders(\"source_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.endpoint.update_headers(\"source_id\", \"endpoint_id\", IngestEndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.ingest.endpoint.update_headers(\"source_id\", \"endpoint_id\", IngestEndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Ingest.Endpoint.UpdateHeaders(ctx, \"source_id\", \"endpoint_id\", &IngestEndpointHeadersIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.endpoint.updateHeaders(\"source_id\", \"endpoint_id\", IngestEndpointHeadersIn()\n    .headers(/* ... */)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest().getEndpoint().updateHeaders(\"source_id\", \"endpoint_id\", new IngestEndpointHeadersIn()\n    .headers(/* ... */)\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.ingest.endpoint.update_headers(\"source_id\", \"endpoint_id\", Svix::IngestEndpointHeadersIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest().endpoint().update_headers(\"source_id\", \"endpoint_id\", IngestEndpointHeadersIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Ingest.Endpoint.UpdateHeadersAsync(\"source_id\", \"endpoint_id\", new IngestEndpointHeadersIn{\n    headers: /* ... */\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint update-headers \"source_id\" \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret": {
            "get": {
                "description": "Get an ingest endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.ingest.endpoint.get-secret",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Endpoint Secret",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointSecretOut = await svix.ingest.endpoint.getSecret(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const ingestEndpointSecretOut = await svix.ingest.endpoint.getSecret(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "ingest_endpoint_secret_out = svix.ingest.endpoint.get_secret(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "ingest_endpoint_secret_out = await svix.ingest.endpoint.get_secret(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "ingestEndpointSecretOut, err := svixClient.Ingest.Endpoint.GetSecret(ctx, \"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val ingestEndpointSecretOut = svix.ingest.endpoint.getSecret(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IngestEndpointSecretOut ingestEndpointSecretOut = svix.getIngest().getEndpoint().getSecret(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "ingest_endpoint_secret_out = svix.ingest.endpoint.get_secret(\"source_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let ingest_endpoint_secret_out = svix.ingest().endpoint().get_secret(\"source_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var ingestEndpointSecretOut = await svix.Ingest.Endpoint.GetSecretAsync(\"source_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint get-secret \"source_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret/rotate": {
            "post": {
                "description": "Rotates an ingest endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
                "operationId": "v1.ingest.endpoint.rotate-secret",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointSecretIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Ingest Endpoint Secret",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.rotateSecret(\"source_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.rotateSecret(\"source_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.endpoint.rotate_secret(\"source_id\", \"endpoint_id\", IngestEndpointSecretIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.ingest.endpoint.rotate_secret(\"source_id\", \"endpoint_id\", IngestEndpointSecretIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Ingest.Endpoint.RotateSecret(ctx, \"source_id\", \"endpoint_id\", &IngestEndpointSecretIn{\n    Key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.endpoint.rotateSecret(\"source_id\", \"endpoint_id\", IngestEndpointSecretIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest().getEndpoint().rotateSecret(\"source_id\", \"endpoint_id\", new IngestEndpointSecretIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.ingest.endpoint.rotate_secret(\"source_id\", \"endpoint_id\", Svix::IngestEndpointSecretIn.new({\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest().endpoint().rotate_secret(\"source_id\", \"endpoint_id\", IngestEndpointSecretIn {\n    key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Ingest.Endpoint.RotateSecretAsync(\"source_id\", \"endpoint_id\", new IngestEndpointSecretIn{\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest endpoint rotate-secret \"source_id\" \"endpoint_id\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/in/{token}": {
            "get": {
                "description": "Non-legacy (using a token) ingest webhook.",
                "operationId": "v1.ingest",
                "parameters": [
                    {
                        "description": "The Source's ID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID.",
                            "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 26,
                            "minLength": 26,
                            "pattern": "^src_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "maxLength": 16,
                            "minLength": 16,
                            "pattern": "^[A-Za-z0-9]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {}
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestResponse"
                                }
                            }
                        },
                        "description": "Some providers need to generate responses to incoming ingest requests."
                    },
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Ingest",
                "tags": [
                    "Ingest Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/in/{token}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            },
            "post": {
                "description": "Non-legacy (using a token) ingest webhook.",
                "operationId": "v1.ingest",
                "parameters": [
                    {
                        "description": "The Source's ID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID.",
                            "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 26,
                            "minLength": 26,
                            "pattern": "^src_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "maxLength": 16,
                            "minLength": 16,
                            "pattern": "^[A-Za-z0-9]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {}
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestResponse"
                                }
                            }
                        },
                        "description": "Some providers need to generate responses to incoming ingest requests."
                    },
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Ingest",
                "tags": [
                    "Ingest Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/in/{token}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ],
                "x-hidden": true
            }
        },
        "/ingest/api/v1/source/{source_id}/token/rotate": {
            "post": {
                "description": "Rotate the Ingest Source's Url Token.\n\nThis will rotate the ingest source's token, which is used to\nconstruct the unique `ingestUrl` for the source. Previous tokens\nwill remain valid for 48 hours after rotation. The token can be\nrotated a maximum of three times within the 48-hour period.",
                "operationId": "v1.ingest.source.rotate-token",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RotateTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Ingest Token",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const rotateTokenOut = await svix.ingest.source.rotateToken(\"source_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const rotateTokenOut = await svix.ingest.source.rotateToken(\"source_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "rotate_token_out = svix.ingest.source.rotate_token(\"source_id\", options=...)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "rotate_token_out = await svix.ingest.source.rotate_token(\"source_id\", options=...)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "rotateTokenOut, err := svixClient.Ingest.Source.RotateToken(ctx, \"source_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val rotateTokenOut = svix.ingest.source.rotateToken(\"source_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "RotateTokenOut rotateTokenOut = svix.getIngest().getSource().rotateToken(\"source_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "rotate_token_out = svix.ingest.source.rotate_token(\"source_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let rotate_token_out = svix.ingest().source().rotate_token(\"source_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var rotateTokenOut = await svix.Ingest.Source.RotateTokenAsync(\"source_id\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix ingest source rotate-token \"source_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/token/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        }
    },
    "servers": [
        {
            "description": "The Svix EU region",
            "url": "https://api.eu.svix.com/"
        },
        {
            "description": "The Svix US region",
            "url": "https://api.us.svix.com/"
        }
    ],
    "tags": [
        {
            "description": "Consumer Applications are where messages are sent to. In most cases you would want to have one application for each of your users.",
            "name": "Application"
        },
        {
            "description": "Messages are the webhook events being sent.",
            "name": "Message"
        },
        {
            "description": "Attempts to deliver `Message`s to `Endpoint`s.",
            "name": "Message Attempt"
        },
        {
            "description": "Endpoints are the URLs messages will be sent to. Each application can have up to 50 endpoints and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).",
            "name": "Endpoint"
        },
        {
            "description": "Integrations are services your users connect an application to. An integration can manage the application and its endpoints.",
            "name": "Integration"
        },
        {
            "description": "Event types are identifiers denoting the type of message being sent. Event types are primarily used to decide which events are sent to which endpoint.",
            "name": "Event Type"
        },
        {
            "description": "Easily give your users access to our pre-built management UI.",
            "name": "Authentication"
        },
        {
            "description": "Health checks for the API.",
            "name": "Health"
        },
        {
            "description": "The webhooks the Svix service sends to notify you of events.",
            "name": "Webhook"
        },
        {
            "description": "The background tasks that have been executed for your environment.",
            "name": "Background Task"
        },
        {
            "description": "Generate statistics about your Svix utilization",
            "name": "Statistics"
        },
        {
            "description": "Configure where operational webhooks are sent to.",
            "name": "Webhook Endpoint"
        },
        {
            "description": "Manage your environments like development, staging and production.",
            "name": "Environment"
        },
        {
            "description": "Configure where Svix Ingest sends messages.",
            "name": "Ingest Endpoint"
        }
    ],
    "x-tagGroups": [
        {
            "name": "General",
            "tags": [
                "Application",
                "Event Type",
                "Background Task",
                "Environment"
            ]
        },
        {
            "name": "Application specific",
            "tags": [
                "Authentication",
                "Endpoint",
                "Message",
                "Message Attempt",
                "Integration"
            ]
        },
        {
            "name": "Ingest",
            "tags": [
                "Ingest Source",
                "Ingest Endpoint"
            ]
        },
        {
            "name": "Utility",
            "tags": [
                "Health"
            ]
        },
        {
            "name": "Operational Webhooks",
            "tags": [
                "Webhook",
                "Webhook Endpoint"
            ]
        },
        {
            "name": "Statistics",
            "tags": [
                "Statistics"
            ]
        }
    ],
    "x-webhooks": {
        "background_task.finished": {
            "post": {
                "description": "Sent when a background task is finished.",
                "operationId": "background_task.finished",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "data": {
                                        "appStats": [
                                            {
                                                "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                                "appUid": null,
                                                "messageDestinations": 343
                                            }
                                        ]
                                    },
                                    "status": "finished",
                                    "task": "application.stats",
                                    "taskId": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "background_task.finished"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/BackgroundTaskFinishedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "background_task.finished",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "endpoint.created": {
            "post": {
                "description": "Sent when an endpoint is created.",
                "operationId": "endpoint.created",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.created"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointCreatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.created",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "endpoint.deleted": {
            "post": {
                "description": "Sent when an endpoint is deleted.",
                "operationId": "endpoint.deleted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.deleted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDeletedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.deleted",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "endpoint.disabled": {
            "post": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "operationId": "endpoint.disabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier",
                                    "failSince": "2022-11-06T15:04:05Z",
                                    "trigger": "automatic"
                                },
                                "type": "endpoint.disabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDisabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.disabled",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "endpoint.enabled": {
            "post": {
                "description": "Sent when an endpoint has been enabled.",
                "operationId": "endpoint.enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.disabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointEnabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.enabled",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "endpoint.updated": {
            "post": {
                "description": "Sent when an endpoint is updated.",
                "operationId": "endpoint.updated",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.updated"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointUpdatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.updated",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "message.attempt.exhausted": {
            "post": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "operationId": "message.attempt.exhausted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.exhausted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptExhaustedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.exhausted",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "message.attempt.failing": {
            "post": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
                "operationId": "message.attempt.failing",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.failing"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptFailingEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.failing",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "message.attempt.recovered": {
            "post": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "operationId": "message.attempt.recovered",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 200,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.recovered"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptRecoveredEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.recovered",
                "tags": [
                    "Webhook"
                ]
            }
        }
    }
}
