{
    "components": {
        "schemas": {
            "ActiveApplicationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "endpoints": {
                        "items": {
                            "$ref": "#/components/schemas/ActiveEndpointOut"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "example": "My first application",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "endpoints",
                    "id",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "ActiveEndpointOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "updatedAt",
                    "url"
                ],
                "type": "object"
            },
            "AdobeSignConfig": {
                "properties": {
                    "clientId": {
                        "type": "string"
                    }
                },
                "required": [
                    "clientId"
                ],
                "type": "object"
            },
            "AdobeSignConfigOut": {
                "type": "object"
            },
            "AdobeSignResponse": {
                "properties": {
                    "xAdobeSignClientId": {
                        "type": "string"
                    }
                },
                "required": [
                    "xAdobeSignClientId"
                ],
                "type": "object"
            },
            "AggregateEventTypesOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "AggregatedEventTypes": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "explicitlySubscribedEventTypes": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "hasCatchAllEndpoint": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "appId",
                    "explicitlySubscribedEventTypes",
                    "hasCatchAllEndpoint"
                ],
                "type": "object"
            },
            "AirwallexConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "AirwallexConfigOut": {
                "type": "object"
            },
            "AlertEmailPatch": {
                "properties": {
                    "email": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AmazonS3PatchConfig": {
                "properties": {
                    "accessKeyId": {
                        "type": "string"
                    },
                    "bucket": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "secretAccessKey": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ApiTokenCensoredOut": {
                "properties": {
                    "censoredToken": {
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expiresAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ApplicationToken's ID.",
                        "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^key_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "censoredToken",
                    "createdAt",
                    "id"
                ],
                "type": "object"
            },
            "ApiTokenExpireIn": {
                "properties": {
                    "expiry": {
                        "default": 0,
                        "description": "How many seconds until the old key is expired.",
                        "format": "int32",
                        "maximum": 259200,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ApiTokenIn": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "ApiTokenOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expiresAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The GlobalApplicationToken's ID.",
                        "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 38,
                        "minLength": 38,
                        "pattern": "^global_key_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "token"
                ],
                "type": "object"
            },
            "ApiTokenUpdate": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "AppPortalAccessIn": {
                "properties": {
                    "application": {
                        "$ref": "#/components/schemas/ApplicationIn",
                        "description": "Optionally creates a new application while generating the access link.\n\nIf the application id or uid that is used in the path already exists, this argument is ignored.",
                        "nullable": true
                    },
                    "capabilities": {
                        "description": "Custom capabilities attached to the token, You can combine as many capabilities as necessary.\n\nThe `ViewBase` capability is always required\n\n- `ViewBase`: Basic read only permissions, does not allow the user to see the endpoint secret.\n\n- `ViewEndpointSecret`: Allows user to view the endpoint secret.\n\n- `ManageEndpointSecret`: Allows user to rotate and view the endpoint secret.\n\n- `ManageTransformations`: Allows user to modify the endpoint transformations.\n\n- `CreateAttempts`: Allows user to replay missing messages and send example messages.\n\n- `ManageEndpoint`: Allows user to read/modify any field or configuration of an endpoint (including secrets)",
                        "example": [
                            "ViewBase",
                            "ViewEndpointSecret"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/AppPortalCapability"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "expiry": {
                        "default": 604800,
                        "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
                        "format": "uint64",
                        "maximum": 604800,
                        "minimum": 3600,
                        "nullable": true,
                        "type": "integer"
                    },
                    "featureFlags": {
                        "description": "The set of feature flags the created token will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "readOnly": {
                        "deprecated": true,
                        "description": "Whether the app portal should be in read-only mode.",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sessionId": {
                        "description": "An optional session ID to attach to the token.\n\nWhen expiring tokens with \"Expire All\", you can include the session ID to only expire tokens that were created with that session ID.",
                        "example": "user_1FB8",
                        "maxLength": 64,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9@_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AppPortalAccessOut": {
                "properties": {
                    "token": {
                        "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "url"
                ],
                "type": "object"
            },
            "AppPortalCapability": {
                "enum": [
                    "ViewBase",
                    "ViewEndpointSecret",
                    "ManageEndpointSecret",
                    "ManageTransformations",
                    "CreateAttempts",
                    "ManageEndpoint"
                ],
                "type": "string"
            },
            "AppUsageStatsIn": {
                "properties": {
                    "appIds": {
                        "description": "Specific app IDs or UIDs to aggregate stats for.\n\nNote that if none of the given IDs or UIDs are resolved, a 422 response will be given.",
                        "items": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "since",
                    "until"
                ],
                "type": "object"
            },
            "AppUsageStatsOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    },
                    "unresolvedAppIds": {
                        "description": "Any app IDs or UIDs received in the request that weren't found.\n\nStats will be produced for all the others.",
                        "items": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task",
                    "unresolvedAppIds"
                ],
                "type": "object"
            },
            "ApplicationAlertEvent": {
                "enum": [
                    "endpoint.disabled",
                    "message.attempt.exhausted",
                    "stream.sink.disabled"
                ],
                "type": "string"
            },
            "ApplicationIn": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "example": "My first application",
                        "minLength": 1,
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the application.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "ApplicationMessageFailure": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "reason"
                ],
                "type": "object"
            },
            "ApplicationMessageIdPair": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "msgId"
                ],
                "type": "object"
            },
            "ApplicationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "example": "My first application",
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "ApplicationPatch": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ApplicationStats": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "messageDestinations": {
                        "format": "int",
                        "type": "integer"
                    }
                },
                "required": [
                    "appId",
                    "messageDestinations"
                ],
                "type": "object"
            },
            "ApplicationStatsOut": {
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "messageDestinations": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "appId",
                    "messageDestinations"
                ],
                "type": "object"
            },
            "ApplicationTokenExpireIn": {
                "properties": {
                    "expiry": {
                        "description": "How many seconds until the old key is expired.",
                        "example": 60,
                        "format": "int64",
                        "maximum": 259200,
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sessionIds": {
                        "description": "An optional list of session ids.\n\nIf any session ids are specified, only Application tokens created with that session id will be expired.",
                        "items": {
                            "example": "user_1FB8",
                            "maxLength": 64,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9@_-]+$",
                            "type": "string"
                        },
                        "maxItems": 1000,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AttemptStatisticsData": {
                "properties": {
                    "failureCount": {
                        "items": {
                            "format": "int",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "successCount": {
                        "items": {
                            "format": "int",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AttemptStatisticsResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AttemptStatisticsData"
                    },
                    "endDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "period": {
                        "$ref": "#/components/schemas/StatisticsPeriod"
                    },
                    "startDate": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "endDate",
                    "period",
                    "startDate"
                ],
                "type": "object"
            },
            "AzureBlobStorageConfig": {
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessKey",
                    "account",
                    "container"
                ],
                "type": "object"
            },
            "AzureBlobStoragePatchConfig": {
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BackgroundTaskFinishedEvent": {
                "description": "Sent when a background task is finished.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/BackgroundTaskFinishedEvent2"
                    },
                    "type": {
                        "default": "background_task.finished",
                        "enum": [
                            "background_task.finished"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "BackgroundTaskFinishedEvent2": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Data"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    },
                    "taskId": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "status",
                    "task",
                    "taskId"
                ],
                "type": "object"
            },
            "BackgroundTaskOut": {
                "properties": {
                    "data": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "data",
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "BackgroundTaskStatus": {
                "enum": [
                    "running",
                    "finished",
                    "failed"
                ],
                "type": "string"
            },
            "BackgroundTaskType": {
                "enum": [
                    "endpoint.replay",
                    "endpoint.recover",
                    "application.stats",
                    "message.broadcast",
                    "sdk.generate",
                    "event-type.aggregate",
                    "application.purge_content"
                ],
                "type": "string"
            },
            "BorderRadiusConfig": {
                "properties": {
                    "button": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    },
                    "card": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    },
                    "input": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "BorderRadiusEnum": {
                "enum": [
                    "none",
                    "lg",
                    "md",
                    "sm",
                    "full"
                ],
                "type": "string"
            },
            "CheckbookConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "CheckbookConfigOut": {
                "type": "object"
            },
            "ClientSecretJwtParamsIn": {
                "properties": {
                    "secretBase64": {
                        "description": "The base64-encoded secret used for signing the JWT.",
                        "type": "string"
                    },
                    "secretId": {
                        "description": "Optional secret identifier. If supplied, this will be populated in the JWT header in the `kid` field.",
                        "nullable": true,
                        "type": "string"
                    },
                    "signingAlgorithm": {
                        "$ref": "#/components/schemas/OauthJwsSigningAlgorithm",
                        "description": "The algorithm used to sign the JWT."
                    },
                    "tokenExpirySecs": {
                        "description": "Optional number of seconds after which the JWT should expire. Defaults to 300 seconds.",
                        "format": "uint64",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "secretBase64",
                    "signingAlgorithm"
                ],
                "type": "object"
            },
            "CompletionChoice": {
                "properties": {
                    "finish_reason": {
                        "type": "string"
                    },
                    "index": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "message": {
                        "$ref": "#/components/schemas/CompletionMessage"
                    }
                },
                "required": [
                    "finish_reason",
                    "index",
                    "message"
                ],
                "type": "object"
            },
            "CompletionMessage": {
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "role"
                ],
                "type": "object"
            },
            "ConnectorIn": {
                "properties": {
                    "description": {
                        "default": "",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "description": "Deprecated - prefer featureFlags instead.",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "instructions": {
                        "default": "",
                        "type": "string"
                    },
                    "instructionsLink": {
                        "default": null,
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind",
                        "default": "Custom"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "transformation": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    }
                },
                "required": [
                    "logo",
                    "name",
                    "transformation"
                ],
                "type": "object"
            },
            "ConnectorKind": {
                "enum": [
                    "Custom",
                    "AgenticCommerceProtocol",
                    "CloseCRM",
                    "CustomerIO",
                    "Discord",
                    "Hubspot",
                    "Inngest",
                    "Loops",
                    "Resend",
                    "Salesforce",
                    "Segment",
                    "Sendgrid",
                    "Slack",
                    "Teams",
                    "TriggerDev",
                    "Windmill",
                    "Zapier"
                ],
                "type": "string"
            },
            "ConnectorOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Connector's ID.",
                        "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 34,
                        "minLength": 34,
                        "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "instructions": {
                        "type": "string"
                    },
                    "instructionsLink": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "description": "The Environment's ID.",
                        "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^org_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "transformation": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "instructions",
                    "kind",
                    "logo",
                    "name",
                    "orgId",
                    "transformation",
                    "updatedAt"
                ],
                "type": "object"
            },
            "ConnectorPatch": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "instructions": {
                        "type": "string"
                    },
                    "instructionsLink": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "transformation": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ConnectorUpdate": {
                "properties": {
                    "description": {
                        "default": "",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "instructions": {
                        "default": "",
                        "type": "string"
                    },
                    "instructionsLink": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/ConnectorKind",
                        "default": "Custom"
                    },
                    "logo": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "default": "",
                        "type": "string"
                    },
                    "transformation": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    }
                },
                "required": [
                    "logo",
                    "transformation"
                ],
                "type": "object"
            },
            "CountOut": {
                "properties": {
                    "approximated": {
                        "description": "There's a ceiling to how many attempts we count. When the limit is reached, this will be `true` to indicate the actual count is higher than given.",
                        "type": "boolean"
                    },
                    "count": {
                        "description": "The count of attempts matching the query.",
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "approximated",
                    "count"
                ],
                "type": "object"
            },
            "CreateStreamEventsIn": {
                "properties": {
                    "events": {
                        "example": [
                            {
                                "eventType": "user.signup",
                                "payload": "{\"email\":\"test@example.com\",\"username\":\"test_user\"}"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/EventIn"
                        },
                        "type": "array"
                    },
                    "stream": {
                        "$ref": "#/components/schemas/StreamIn",
                        "description": "Optionally creates a new Stream alongside the events.\n\nIf the stream id or uid that is used in the path already exists, this argument is ignored.",
                        "nullable": true
                    }
                },
                "required": [
                    "events"
                ],
                "type": "object"
            },
            "CreateStreamEventsOut": {
                "type": "object"
            },
            "CreateTokenIn": {
                "properties": {
                    "expiry": {
                        "description": "How long the token will be valid for, in seconds.",
                        "format": "uint64",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the token.",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "CronConfig": {
                "properties": {
                    "contentType": {
                        "description": "Override the default content-type.\n\nRecommended if the payload is not JSON.",
                        "nullable": true,
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    },
                    "schedule": {
                        "type": "string"
                    }
                },
                "required": [
                    "payload",
                    "schedule"
                ],
                "type": "object"
            },
            "CustomColorPalette": {
                "properties": {
                    "backgroundHover": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "backgroundPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "backgroundSecondary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "buttonPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "interactiveAccent": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "navigationAccent": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "primary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "textDanger": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "textPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CustomStringsOverride": {
                "properties": {
                    "channelsHelp": {
                        "nullable": true,
                        "type": "string"
                    },
                    "channelsMany": {
                        "nullable": true,
                        "type": "string"
                    },
                    "channelsOne": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CustomThemeOverride": {
                "properties": {
                    "borderRadius": {
                        "$ref": "#/components/schemas/BorderRadiusConfig",
                        "nullable": true
                    },
                    "fontSize": {
                        "$ref": "#/components/schemas/FontSizeConfig",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "DashboardAccessOut": {
                "properties": {
                    "token": {
                        "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "url"
                ],
                "type": "object"
            },
            "Data": {
                "anyOf": [
                    {
                        "properties": {
                            "messages_sent": {
                                "format": "uint",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "messages_sent"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "messages_sent": {
                                "format": "uint",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "messages_sent"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "app_stats": {
                                "items": {
                                    "$ref": "#/components/schemas/ApplicationStatsOut"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "app_stats"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "messages_created": {
                                "items": {
                                    "$ref": "#/components/schemas/ApplicationMessageIdPair"
                                },
                                "type": "array"
                            },
                            "messages_failed": {
                                "items": {
                                    "$ref": "#/components/schemas/ApplicationMessageFailure"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "messages_created",
                            "messages_failed"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "event_types": {
                                "items": {
                                    "$ref": "#/components/schemas/AggregatedEventTypes"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "event_types"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "messages_purged": {
                                "format": "uint",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "messages_purged"
                        ],
                        "type": "object"
                    }
                ]
            },
            "DocusignConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DocusignConfigOut": {
                "type": "object"
            },
            "Duration": {
                "properties": {
                    "nanos": {
                        "format": "uint32",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "secs": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "nanos",
                    "secs"
                ],
                "type": "object"
            },
            "EasypostConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EasypostConfigOut": {
                "type": "object"
            },
            "EmptyResponse": {
                "type": "object"
            },
            "EndpointCreatedEvent": {
                "description": "Sent when an endpoint is created.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointCreatedEventData"
                    },
                    "type": {
                        "default": "endpoint.created",
                        "enum": [
                            "endpoint.created"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointCreatedEventData": {
                "description": "Sent when an endpoint is created, updated, or deleted",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDeletedEvent": {
                "description": "Sent when an endpoint is deleted.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointDeletedEventData"
                    },
                    "type": {
                        "default": "endpoint.deleted",
                        "enum": [
                            "endpoint.deleted"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointDeletedEventData": {
                "description": "Sent when an endpoint is created, updated, or deleted",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDisabledEvent": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointDisabledEventData"
                    },
                    "type": {
                        "default": "endpoint.disabled",
                        "enum": [
                            "endpoint.disabled"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointDisabledEventData": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "failSince": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/EndpointDisabledTrigger",
                        "default": "automatic"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDisabledTrigger": {
                "enum": [
                    "manual",
                    "automatic"
                ],
                "type": "string"
            },
            "EndpointEnabledEvent": {
                "description": "Sent when an endpoint has been enabled.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointEnabledEventData"
                    },
                    "type": {
                        "default": "endpoint.enabled",
                        "enum": [
                            "endpoint.enabled"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointEnabledEventData": {
                "description": "Sent when an endpoint has been enabled.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointHeadersIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "EndpointHeadersOut": {
                "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field.",
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    },
                    "sensitive": {
                        "example": [
                            "Authorization"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "headers",
                    "sensitive"
                ],
                "type": "object"
            },
            "EndpointHeadersPatchIn": {
                "properties": {
                    "deleteHeaders": {
                        "default": [],
                        "description": "A list of headers be be removed",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "headers": {
                        "additionalProperties": {
                            "nullable": true,
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "EndpointIn": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "default": 1,
                        "deprecated": true,
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "EndpointMessageOut": {
                "description": "A model containing information on a given message plus additional fields on the last attempt for that message.",
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "deliverAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "nextAttempt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "statusText": {
                        "$ref": "#/components/schemas/MessageStatusText"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "status",
                    "statusText",
                    "timestamp"
                ],
                "type": "object"
            },
            "EndpointMtlsConfigIn": {
                "properties": {
                    "identity": {
                        "description": "A PEM encoded private key and X509 certificate to identify the webhook sender.",
                        "type": "string"
                    },
                    "serverCaCert": {
                        "description": "A PEM encoded X509 certificate used to verify the webhook receiver's certificate.",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "identity"
                ],
                "type": "object"
            },
            "EndpointMtlsConfigOut": {
                "properties": {
                    "serverCaCert": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EndpointMtlsOut": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/EndpointMtlsConfigOut",
                        "nullable": true
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled"
                ],
                "type": "object"
            },
            "EndpointOauthConfigIn": {
                "properties": {
                    "authMethod": {
                        "$ref": "#/components/schemas/Oauth2AuthMethodInOut"
                    },
                    "clientId": {
                        "description": "The client ID. Required for all authentication types.",
                        "type": "string"
                    },
                    "clientSecret": {
                        "description": "Optional client secret. This is only used for `clientSecretBasic` and `clientSecretPost`.\n\nFor `clientSecretBasic`, the secret will be appended to the `Authorization` header. For `clientSecretPost`, this will be added to the body in a `client_secret` parameter.",
                        "nullable": true,
                        "type": "string"
                    },
                    "extraParams": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Extra parameters added to the request body as key-value pairs.",
                        "nullable": true,
                        "type": "object"
                    },
                    "grantType": {
                        "$ref": "#/components/schemas/Oauth2GrantTypeInOut",
                        "description": "The OAuth grant type."
                    },
                    "jwtParams": {
                        "$ref": "#/components/schemas/ClientSecretJwtParamsIn",
                        "description": "Optional JWT parameters. Only required for `clientSecretJwt`",
                        "nullable": true
                    },
                    "refreshToken": {
                        "description": "For `refreshToken` grant type.",
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "description": "Optional OAuth scopes added to the request body.",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "tokenUrl": {
                        "description": "The URL of the authorization server.",
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "authMethod",
                    "clientId",
                    "grantType",
                    "tokenUrl"
                ],
                "type": "object"
            },
            "EndpointOauthConfigOut": {
                "properties": {
                    "authMethod": {
                        "$ref": "#/components/schemas/Oauth2AuthMethodInOut"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "extraParams": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "grantType": {
                        "$ref": "#/components/schemas/Oauth2GrantTypeInOut"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "tokenUrl": {
                        "type": "string"
                    }
                },
                "required": [
                    "authMethod",
                    "clientId",
                    "grantType",
                    "tokenUrl"
                ],
                "type": "object"
            },
            "EndpointOauthOut": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/EndpointOauthConfigOut",
                        "nullable": true
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled"
                ],
                "type": "object"
            },
            "EndpointOut": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "deprecated": true,
                        "example": 1,
                        "format": "int32",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt",
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "EndpointPatch": {
                "properties": {
                    "channels": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    },
                    "version": {
                        "deprecated": true,
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "EndpointRateLimitStatus": {
                "enum": [
                    "Ok",
                    "RateLimited"
                ],
                "type": "string"
            },
            "EndpointRateLimitStatusOut": {
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/EndpointRateLimitStatus"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "EndpointSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "EndpointSecretRotateIn": {
                "properties": {
                    "key": {
                        "default": null,
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EndpointStats": {
                "properties": {
                    "fail": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "pending": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "sending": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "success": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "fail",
                    "pending",
                    "sending",
                    "success"
                ],
                "type": "object"
            },
            "EndpointTransformationOut": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EndpointTransformationPatch": {
                "properties": {
                    "code": {
                        "example": "function handler(webhook) { /* ... */ }",
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EndpointUpdate": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "default": 1,
                        "deprecated": true,
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "EndpointUpdatedEvent": {
                "description": "Sent when an endpoint is updated.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointUpdatedEventData"
                    },
                    "type": {
                        "default": "endpoint.updated",
                        "enum": [
                            "endpoint.updated"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointUpdatedEventData": {
                "description": "Sent when an endpoint is created, updated, or deleted",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EnvironmentIn": {
                "properties": {
                    "connectors": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectorIn"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "eventTypes": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeIn"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "settings": {
                        "additionalProperties": true,
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "EnvironmentModelIn": {
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/EnvironmentType"
                    }
                },
                "required": [
                    "name",
                    "type"
                ],
                "type": "object"
            },
            "EnvironmentModelOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Environment's ID.",
                        "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^org_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "$ref": "#/components/schemas/EnvironmentRegion"
                    },
                    "type": {
                        "$ref": "#/components/schemas/EnvironmentType"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "region",
                    "type",
                    "updatedAt"
                ],
                "type": "object"
            },
            "EnvironmentModelUpdate": {
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "EnvironmentOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "eventTypes": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeOut"
                        },
                        "type": "array"
                    },
                    "settings": {
                        "additionalProperties": true,
                        "nullable": true,
                        "type": "object"
                    },
                    "transformationTemplates": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectorOut"
                        },
                        "type": "array"
                    },
                    "version": {
                        "default": 1,
                        "format": "int",
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "eventTypes",
                    "settings",
                    "transformationTemplates"
                ],
                "type": "object"
            },
            "EnvironmentRegion": {
                "enum": [
                    "eu",
                    "us",
                    "in",
                    "au",
                    "ca",
                    "self-hosted"
                ],
                "type": "string"
            },
            "EnvironmentSettingsOut": {
                "properties": {
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "deprecated": true,
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageTags": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "logoUrl": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "showSvixBrandFooter": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EnvironmentType": {
                "enum": [
                    "development",
                    "production"
                ],
                "type": "string"
            },
            "EventExampleIn": {
                "properties": {
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "exampleIndex": {
                        "default": 0,
                        "description": "If the event type schema contains an array of examples, chooses which one to send.\n\nDefaults to the first example. Ignored if the schema doesn't contain an array of examples.",
                        "format": "uint",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "eventType"
                ],
                "type": "object"
            },
            "EventIn": {
                "properties": {
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "EventOut": {
                "properties": {
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "payload",
                    "timestamp"
                ],
                "type": "object"
            },
            "EventStreamOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EventOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "EventTypeExampleOut": {
                "properties": {
                    "example": {
                        "additionalProperties": true,
                        "example": {
                            "data": {
                                "email": "test@example.com",
                                "username": "test_user"
                            },
                            "type": "user.created"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "example"
                ],
                "type": "object"
            },
            "EventTypeFromOpenApi": {
                "properties": {
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "deprecated",
                    "description",
                    "name"
                ],
                "type": "object"
            },
            "EventTypeImportOpenApiIn": {
                "description": "Import a list of event types from webhooks defined in an OpenAPI spec.\n\nThe OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.",
                "properties": {
                    "dryRun": {
                        "default": false,
                        "description": "If `true`, return the event types that would be modified without actually modifying them.",
                        "type": "boolean"
                    },
                    "replaceAll": {
                        "default": false,
                        "description": "If `true`, all existing event types that are not in the spec will be archived.",
                        "type": "boolean"
                    },
                    "spec": {
                        "additionalProperties": true,
                        "description": "A pre-parsed JSON spec.",
                        "example": {
                            "info": {
                                "title": "Webhook Example",
                                "version": "1.0.0"
                            },
                            "openapi": "3.1.0",
                            "webhooks": {
                                "pet.new": {
                                    "post": {
                                        "requestBody": {
                                            "content": {
                                                "application/json": {
                                                    "schema": {
                                                        "properties": {
                                                            "id": {
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "tag": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "name"
                                                        ]
                                                    }
                                                }
                                            },
                                            "description": "Information about a new pet in the system"
                                        },
                                        "responses": {
                                            "200": {
                                                "description": "Return a 200 status to indicate that the data was received successfully"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "specRaw": {
                        "description": "A string, parsed by the server as YAML or JSON.",
                        "example": "\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EventTypeImportOpenApiOut": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EventTypeImportOpenApiOutData"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            },
            "EventTypeImportOpenApiOutData": {
                "properties": {
                    "modified": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "to_modify": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeFromOpenApi"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "modified"
                ],
                "type": "object"
            },
            "EventTypeIn": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "deprecated": {
                        "default": false,
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "description": "Deprecated - prefer featureFlags instead.",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "description",
                    "name"
                ],
                "type": "object"
            },
            "EventTypeOut": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "deprecated",
                    "description",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "EventTypePatch": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "EventTypeSchemaIn": {
                "properties": {
                    "schema": {
                        "additionalProperties": true,
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "schema"
                ],
                "type": "object"
            },
            "EventTypeUpdate": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "deprecated": {
                        "default": false,
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "default": null,
                        "deprecated": true,
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "groupName": {
                        "default": null,
                        "description": "The event type group's name",
                        "example": "user",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": true,
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "description"
                ],
                "type": "object"
            },
            "ExportEventTypeOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "ExpungeAllContentsOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "FontSizeConfig": {
                "properties": {
                    "base": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "GenerateIn": {
                "properties": {
                    "prompt": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt"
                ],
                "type": "object"
            },
            "GenerateOut": {
                "properties": {
                    "choices": {
                        "items": {
                            "$ref": "#/components/schemas/CompletionChoice"
                        },
                        "type": "array"
                    },
                    "created": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "model": {
                        "type": "string"
                    },
                    "object": {
                        "type": "string"
                    }
                },
                "required": [
                    "choices",
                    "created",
                    "id",
                    "model",
                    "object"
                ],
                "type": "object"
            },
            "GithubConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GithubConfigOut": {
                "type": "object"
            },
            "GlobalApiTokenCensoredOut": {
                "properties": {
                    "censoredToken": {
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expiresAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The GlobalApplicationToken's ID.",
                        "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 38,
                        "minLength": 38,
                        "pattern": "^global_key_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "required": [
                    "censoredToken",
                    "createdAt",
                    "id"
                ],
                "type": "object"
            },
            "GoogleCloudStorageConfig": {
                "description": "Configuration for a Google Cloud Storage sink.\n\nWrite stream events into the named bucket using the supplied Google Cloud credentials.",
                "properties": {
                    "bucket": {
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Google Cloud Credentials JSON Object as a string.",
                        "type": "string"
                    }
                },
                "required": [
                    "bucket",
                    "credentials"
                ],
                "type": "object"
            },
            "GoogleCloudStoragePatchConfig": {
                "properties": {
                    "bucket": {
                        "type": "string"
                    },
                    "credentials": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "detail"
                ],
                "type": "object"
            },
            "HttpErrorOut": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "detail"
                ],
                "title": "HttpError",
                "type": "object"
            },
            "HttpPatchConfig": {
                "properties": {
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HttpSinkHeadersPatchIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "nullable": true,
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "HubspotConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HubspotConfigOut": {
                "type": "object"
            },
            "HubspotOauthConfigIn": {
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    }
                },
                "required": [
                    "refresh_token"
                ],
                "type": "object"
            },
            "InboundPathParams": {
                "properties": {
                    "app_id": {
                        "description": "The Application's ID or UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "inbound_token": {
                        "type": "string"
                    }
                },
                "required": [
                    "app_id",
                    "inbound_token"
                ],
                "type": "object"
            },
            "IncomingWebhookPayloadOut": {
                "properties": {
                    "channel": {
                        "nullable": true,
                        "type": "string"
                    },
                    "error": {
                        "nullable": true,
                        "type": "string"
                    },
                    "incomingWebhookUrl": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IngestEndpointDisabledEvent": {
                "description": "Sent when an ingest endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/IngestEndpointDisabledEventData"
                    },
                    "type": {
                        "default": "ingest.endpoint.disabled",
                        "enum": [
                            "ingest.endpoint.disabled"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "IngestEndpointDisabledEventData": {
                "description": "Sent when an ingest endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The Endpoint's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "failSince": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "sourceId": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/EndpointDisabledTrigger",
                        "default": "automatic"
                    }
                },
                "required": [
                    "endpointId",
                    "sourceId"
                ],
                "type": "object"
            },
            "IngestEndpointHeadersIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "IngestEndpointHeadersOut": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    },
                    "sensitive": {
                        "example": [
                            "Authorization"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "headers",
                    "sensitive"
                ],
                "type": "object"
            },
            "IngestEndpointIn": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "IngestEndpointOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt",
                    "url"
                ],
                "type": "object"
            },
            "IngestEndpointSecretIn": {
                "properties": {
                    "key": {
                        "default": null,
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IngestEndpointSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "IngestEndpointTransformationOut": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "IngestEndpointTransformationPatch": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "IngestEndpointUpdate": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "IngestLogOut": {
                "properties": {
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "error_text": {
                        "type": "string"
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "id": {
                        "description": "The ErrorLog's ID.",
                        "example": "log2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 25,
                        "minLength": 25,
                        "pattern": "^log[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "payload": {
                        "type": "string"
                    },
                    "source_id": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "status_code": {
                        "format": "int16",
                        "type": "integer"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "created_at",
                    "error_text",
                    "headers",
                    "id",
                    "payload",
                    "source_id",
                    "status_code",
                    "updated_at"
                ],
                "type": "object"
            },
            "IngestMessageAttemptExhaustedEvent": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/IngestMessageAttemptExhaustedEventData"
                    },
                    "type": {
                        "default": "ingest.message.attempt.exhausted",
                        "enum": [
                            "ingest.message.attempt.exhausted"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "IngestMessageAttemptExhaustedEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"ingest.message.attempt.exhausted\" type, after it's failed four times as a \"ingest.message.attempt.failing\" event, or after it's recovered as a \"ingest.message.attempt.recovered\" event.",
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "sourceId": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "lastAttempt",
                    "msgId",
                    "sourceId"
                ],
                "type": "object"
            },
            "IngestMessageAttemptFailingEvent": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `ingest.message.attempt.exhausted` which is sent after the last failure.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/IngestMessageAttemptFailingEventData"
                    },
                    "type": {
                        "default": "ingest.message.attempt.failing",
                        "enum": [
                            "ingest.message.attempt.failing"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "IngestMessageAttemptFailingEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"ingest.message.attempt.exhausted\" type, after it's failed four times as a \"ingest.message.attempt.failing\" event, or after it's recovered as a \"ingest.message.attempt.recovered\" event.",
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "sourceId": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "lastAttempt",
                    "msgId",
                    "sourceId"
                ],
                "type": "object"
            },
            "IngestMessageAttemptRecoveredEvent": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/IngestMessageAttemptRecoveredEventData"
                    },
                    "type": {
                        "default": "ingest.message.attempt.recovered",
                        "enum": [
                            "ingest.message.attempt.recovered"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "IngestMessageAttemptRecoveredEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"ingest.message.attempt.exhausted\" type, after it's failed four times as a \"ingest.message.attempt.failing\" event, or after it's recovered as a \"ingest.message.attempt.recovered\" event.",
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "sourceId": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "lastAttempt",
                    "msgId",
                    "sourceId"
                ],
                "type": "object"
            },
            "IngestPathWithToken": {
                "properties": {
                    "source_id": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "token": {
                        "maxLength": 16,
                        "minLength": 16,
                        "pattern": "^[A-Za-z0-9]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "source_id",
                    "token"
                ],
                "type": "object"
            },
            "IngestResponse": {
                "anyOf": [
                    {
                        "items": [
                            {
                                "description": "The IngestMessageUid's ID.",
                                "example": "whk_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                "maxLength": 31,
                                "minLength": 31,
                                "pattern": "^whk_[A-Za-z0-9]{27}$",
                                "type": "string"
                            },
                            {
                                "description": "The Source's ID.",
                                "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                                "maxLength": 26,
                                "minLength": 26,
                                "pattern": "^src_[A-Za-z0-9]{22}$",
                                "type": "string"
                            }
                        ],
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                    },
                    {
                        "$ref": "#/components/schemas/ZoomCrcResponse"
                    },
                    {
                        "$ref": "#/components/schemas/SlackChallengeResponse"
                    },
                    {
                        "$ref": "#/components/schemas/AdobeSignResponse"
                    }
                ],
                "description": "Some providers need to generate responses to incoming ingest requests."
            },
            "IngestSourceConsumerPortalAccessIn": {
                "properties": {
                    "expiry": {
                        "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
                        "format": "uint64",
                        "maximum": 604800,
                        "minimum": 3600,
                        "nullable": true,
                        "type": "integer"
                    },
                    "readOnly": {
                        "description": "Whether the app portal should be in read-only mode.",
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "IngestSourceIn": {
                "oneOf": [
                    {
                        "description": "Webhooks with no verification scheme or special handling.",
                        "properties": {
                            "type": {
                                "enum": [
                                    "generic-webhook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CronConfig"
                            },
                            "type": {
                                "enum": [
                                    "cron"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AdobeSignConfig"
                            },
                            "type": {
                                "enum": [
                                    "adobe-sign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "beehiiv"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "brex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CheckbookConfig"
                            },
                            "type": {
                                "enum": [
                                    "checkbook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "clerk"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/DocusignConfig"
                            },
                            "type": {
                                "enum": [
                                    "docusign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/EasypostConfig"
                            },
                            "type": {
                                "enum": [
                                    "easypost"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GithubConfig"
                            },
                            "type": {
                                "enum": [
                                    "github"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "guesty"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/HubspotConfig"
                            },
                            "type": {
                                "enum": [
                                    "hubspot"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "incident-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "lithic"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "nash"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/OrumIoConfig"
                            },
                            "type": {
                                "enum": [
                                    "orum-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PandaDocConfig"
                            },
                            "type": {
                                "enum": [
                                    "panda-doc"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PortIoConfig"
                            },
                            "type": {
                                "enum": [
                                    "port-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "pleo"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "replicate"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "resend"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/RutterConfig"
                            },
                            "type": {
                                "enum": [
                                    "rutter"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "safebase"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "sardine"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SegmentConfig"
                            },
                            "type": {
                                "enum": [
                                    "segment"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ShopifyConfig"
                            },
                            "type": {
                                "enum": [
                                    "shopify"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SlackConfig"
                            },
                            "type": {
                                "enum": [
                                    "slack"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/StripeConfig"
                            },
                            "type": {
                                "enum": [
                                    "stripe"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "stych"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "svix"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ZoomConfig"
                            },
                            "type": {
                                "enum": [
                                    "zoom"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/TelnyxConfig"
                            },
                            "type": {
                                "enum": [
                                    "telnyx"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VapiConfig"
                            },
                            "type": {
                                "enum": [
                                    "vapi"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "open-ai"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfig"
                            },
                            "type": {
                                "enum": [
                                    "render"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VeriffConfig"
                            },
                            "type": {
                                "enum": [
                                    "veriff"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AirwallexConfig"
                            },
                            "type": {
                                "enum": [
                                    "airwallex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "maxLength": 256,
                        "minLength": 2,
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Source's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "IngestSourceOut": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "generic-webhook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CronConfig"
                            },
                            "type": {
                                "enum": [
                                    "cron"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AdobeSignConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "adobe-sign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "beehiiv"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "brex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/CheckbookConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "checkbook"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "clerk"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/DocusignConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "docusign"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/EasypostConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "easypost"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GithubConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "github"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "guesty"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/HubspotConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "hubspot"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "incident-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "lithic"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "nash"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/OrumIoConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "orum-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PandaDocConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "panda-doc"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/PortIoConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "port-io"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "pleo"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "replicate"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "resend"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/RutterConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "rutter"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "safebase"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "sardine"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SegmentConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "segment"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ShopifyConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "shopify"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SlackConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "slack"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/StripeConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "stripe"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "stych"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "svix"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/ZoomConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "zoom"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/TelnyxConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "telnyx"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VapiConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "vapi"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "open-ai"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SvixConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "render"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/VeriffConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "veriff"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AirwallexConfigOut"
                            },
                            "type": {
                                "enum": [
                                    "airwallex"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Source's ID.",
                        "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 26,
                        "minLength": 26,
                        "pattern": "^src_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "ingestUrl": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Source's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "IngestSourcePatch": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "maxLength": 256,
                        "minLength": 2,
                        "type": "string"
                    },
                    "uid": {
                        "description": "The Source's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IntegrationIn": {
                "properties": {
                    "featureFlags": {
                        "description": "The set of feature flags the integration will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "IntegrationKeyOut": {
                "properties": {
                    "key": {
                        "example": "integsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "IntegrationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": [],
                        "description": "The set of feature flags the integration has access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Integration's ID.",
                        "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^integ_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "IntegrationUpdate": {
                "properties": {
                    "featureFlags": {
                        "description": "The set of feature flags the integration will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "LatestEventsOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EventOut"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            },
            "ListResponse_ActiveApplicationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ActiveApplicationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ApiTokenCensoredOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApiTokenCensoredOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ApplicationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApplicationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ApplicationStats_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApplicationStats"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_BackgroundTaskOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/BackgroundTaskOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_ConnectorOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectorOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EndpointMessageOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EndpointMessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EnvironmentModelOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentModelOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_EventTypeOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_GlobalApiTokenCensoredOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/GlobalApiTokenCensoredOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IngestEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IngestEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IngestLogOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IngestLogOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IngestSourceOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IngestSourceOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_IntegrationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IntegrationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageAttemptEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageAttemptEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageAttemptOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageAttemptOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_MessageOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_OperationalWebhookEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_SinkOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/SinkOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_StreamEventTypeOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/StreamEventTypeOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_StreamOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/StreamOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "ListResponse_StreamSinkOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/StreamSinkOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "MessageAttemptEndpointOut": {
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The MessageAttempt's ID.",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "msg": {
                        "$ref": "#/components/schemas/MessageOut",
                        "nullable": true
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "response": {
                        "example": "{}",
                        "type": "string"
                    },
                    "responseDurationMs": {
                        "description": "Response duration in milliseconds.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "responseStatusCode": {
                        "example": 200,
                        "format": "int16",
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "statusText": {
                        "$ref": "#/components/schemas/MessageStatusText"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "triggerType": {
                        "$ref": "#/components/schemas/MessageAttemptTriggerType"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "id",
                    "msgId",
                    "response",
                    "responseDurationMs",
                    "responseStatusCode",
                    "status",
                    "statusText",
                    "timestamp",
                    "triggerType",
                    "url"
                ],
                "type": "object"
            },
            "MessageAttemptExhaustedEvent": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptExhaustedEventData"
                    },
                    "type": {
                        "default": "message.attempt.exhausted",
                        "enum": [
                            "message.attempt.exhausted"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptExhaustedEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptFailedData": {
                "properties": {
                    "id": {
                        "description": "The MessageAttempt's ID.",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "responseStatusCode": {
                        "format": "int16",
                        "type": "integer"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "responseStatusCode",
                    "timestamp"
                ],
                "type": "object"
            },
            "MessageAttemptFailingEvent": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptFailingEventData"
                    },
                    "type": {
                        "default": "message.attempt.failing",
                        "enum": [
                            "message.attempt.failing"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptFailingEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptHeadersOut": {
                "properties": {
                    "responseHeaders": {
                        "items": {
                            "items": {
                                "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "sensitive": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "sentHeaders": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sensitive",
                    "sentHeaders"
                ],
                "type": "object"
            },
            "MessageAttemptOut": {
                "properties": {
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The MessageAttempt's ID.",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "msg": {
                        "$ref": "#/components/schemas/MessageOut",
                        "nullable": true
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "response": {
                        "example": "{}",
                        "type": "string"
                    },
                    "responseDurationMs": {
                        "description": "Response duration in milliseconds.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "responseStatusCode": {
                        "example": 200,
                        "format": "int16",
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "statusText": {
                        "$ref": "#/components/schemas/MessageStatusText"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "triggerType": {
                        "$ref": "#/components/schemas/MessageAttemptTriggerType"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "id",
                    "msgId",
                    "response",
                    "responseDurationMs",
                    "responseStatusCode",
                    "status",
                    "statusText",
                    "timestamp",
                    "triggerType",
                    "url"
                ],
                "type": "object"
            },
            "MessageAttemptRecoveredEvent": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptRecoveredEventData"
                    },
                    "type": {
                        "default": "message.attempt.recovered",
                        "enum": [
                            "message.attempt.recovered"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptRecoveredEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The Application's ID.",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^app_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The Application's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The Message's UID.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptTriggerType": {
                "description": "The reason an attempt was made:\n\n- Scheduled = 0\n- Manual = 1",
                "enum": [
                    0,
                    1
                ],
                "title": "MessageAttemptTriggerType",
                "type": "integer",
                "x-enum-varnames": [
                    "Scheduled",
                    "Manual"
                ]
            },
            "MessageBroadcastIn": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by.",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "payloadRetentionHours": {
                        "default": null,
                        "description": "Optional number of hours to retain the message payload. Note that this is mutually exclusive with `payloadRetentionPeriod`.",
                        "format": "int64",
                        "maximum": 2160,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "payloadRetentionPeriod": {
                        "default": 90,
                        "description": "Optional number of days to retain the message payload. Defaults to 90. Note that this is mutually exclusive with `payloadRetentionHours`.",
                        "example": 90,
                        "format": "int64",
                        "maximum": 90,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "MessageBroadcastOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "MessageEndpointOut": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "nextAttempt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "statusText": {
                        "$ref": "#/components/schemas/MessageStatusText"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "deprecated": true,
                        "example": 1,
                        "format": "int32",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "status",
                    "statusText",
                    "updatedAt",
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "MessageEventsOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "MessageIn": {
                "properties": {
                    "application": {
                        "$ref": "#/components/schemas/ApplicationIn",
                        "description": "Optionally creates a new application alongside the message.\n\nIf the application id or uid that is used in the path already exists, this argument is ignored.",
                        "nullable": true
                    },
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "deliverAt": {
                        "description": "The date and time at which the message will be delivered.\n\nNote that this time is best-effort-only. Must be at least one minute and no more than 24 hours in the future.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "description": "JSON payload to send as the request body of the webhook.\n\nWe also support sending non-JSON payloads. Please contact us for more information.",
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "payloadRetentionHours": {
                        "default": null,
                        "description": "Optional number of hours to retain the message payload. Note that this is mutually exclusive with `payloadRetentionPeriod`.",
                        "format": "int64",
                        "maximum": 2160,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "payloadRetentionPeriod": {
                        "default": 90,
                        "description": "Optional number of days to retain the message payload. Defaults to 90. Note that this is mutually exclusive with `payloadRetentionHours`.",
                        "example": 90,
                        "format": "int64",
                        "maximum": 90,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "tags": {
                        "description": "List of free-form tags that can be filtered by when listing messages",
                        "example": [
                            "my_tag",
                            "other"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "maxItems": 5,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "transformationsParams": {
                        "additionalProperties": true,
                        "description": "Extra parameters to pass to Transformations (for future use)",
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "MessageOut": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "deliverAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "timestamp"
                ],
                "type": "object"
            },
            "MessagePrecheckIn": {
                "properties": {
                    "channels": {
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType"
                ],
                "type": "object"
            },
            "MessagePrecheckOut": {
                "properties": {
                    "active": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "active"
                ],
                "type": "object"
            },
            "MessageRawPayloadOut": {
                "properties": {
                    "payload": {
                        "example": "{\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"}",
                        "type": "string"
                    }
                },
                "required": [
                    "payload"
                ],
                "type": "object"
            },
            "MessageStatus": {
                "description": "The sending status of the message:\n\n- Success = 0\n- Pending = 1\n- Fail = 2\n- Sending = 3",
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "title": "MessageStatus",
                "type": "integer",
                "x-enum-varnames": [
                    "Success",
                    "Pending",
                    "Fail",
                    "Sending"
                ]
            },
            "MessageStatusText": {
                "enum": [
                    "success",
                    "pending",
                    "fail",
                    "sending"
                ],
                "type": "string"
            },
            "OAuthPayloadIn": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "redirectUri": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "redirectUri"
                ],
                "type": "object"
            },
            "OAuthPayloadOut": {
                "properties": {
                    "accessToken": {
                        "nullable": true,
                        "type": "string"
                    },
                    "error": {
                        "nullable": true,
                        "type": "string"
                    },
                    "refreshToken": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Oauth2AuthMethodInOut": {
                "description": "The method used for authenticating to the OAuth authorization server.\n\n`clientSecretJwt` will construct a JWT used for authentication with the oauth authorization server. This method is less commonly used and may not be supported by all oauth providers. `clientSecretBasic` will authenticate to the oauth authorization server using an `Authorization` header with the client secret as the value. This is the most common means of authentication. `clientSecretPost` will authenticate to the oauth authorization server by passing the client secret in a `client_secret` field in the request body. This method may not be supported by all oauth providers, and in general `clientSecretBasic` should be preferred.",
                "enum": [
                    "clientSecretJwt",
                    "clientSecretBasic",
                    "clientSecretPost"
                ],
                "type": "string"
            },
            "Oauth2GrantTypeInOut": {
                "enum": [
                    "clientCredentials",
                    "refreshToken"
                ],
                "type": "string"
            },
            "OauthJwsSigningAlgorithm": {
                "enum": [
                    "RS256"
                ],
                "type": "string"
            },
            "OneTimeTokenIn": {
                "properties": {
                    "oneTimeToken": {
                        "type": "string"
                    }
                },
                "required": [
                    "oneTimeToken"
                ],
                "type": "object"
            },
            "OneTimeTokenOut": {
                "properties": {
                    "capabilities": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "capabilities",
                    "token"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointHeadersIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointHeadersOut": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    },
                    "sensitive": {
                        "example": [
                            "Authorization"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "headers",
                    "sensitive"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointIn": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "message.attempt.failing"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "message.attempt.failing"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt",
                    "url"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointSecretIn": {
                "properties": {
                    "key": {
                        "default": null,
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OperationalWebhookEndpointSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "OperationalWebhookEndpointUpdate": {
                "properties": {
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "message.attempt.failing"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "Ordering": {
                "description": "Defines the ordering in a listing of results.",
                "enum": [
                    "ascending",
                    "descending"
                ],
                "type": "string"
            },
            "OrumIoConfig": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "OrumIoConfigOut": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "OtelConfig": {
                "properties": {
                    "additionalHeaders": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": null,
                        "nullable": true,
                        "type": "object"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "OtelConfigOut": {
                "properties": {
                    "additionalHeaders": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "svixManaged": {
                        "type": "boolean"
                    },
                    "url": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "svixManaged"
                ],
                "type": "object"
            },
            "OtelTracingPatchConfig": {
                "properties": {
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PandaDocConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "PandaDocConfigOut": {
                "type": "object"
            },
            "PollingEndpointConsumerSeekIn": {
                "properties": {
                    "after": {
                        "example": "2025-04-21T11:20:34Z",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "after"
                ],
                "type": "object"
            },
            "PollingEndpointConsumerSeekOut": {
                "properties": {
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "iterator"
                ],
                "type": "object"
            },
            "PollingEndpointMessageOut": {
                "description": "The MessageOut equivalent of polling endpoint",
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "deliverAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "example": {
                            "email": "test@example.com",
                            "type": "user.created",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "timestamp"
                ],
                "type": "object"
            },
            "PollingEndpointOut": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/PollingEndpointMessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done",
                    "iterator"
                ],
                "type": "object"
            },
            "PortIoConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "PortIoConfigOut": {
                "type": "object"
            },
            "RawMessageOut": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Message's ID.",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^msg_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "timestamp"
                ],
                "type": "object"
            },
            "RecoverIn": {
                "properties": {
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "since"
                ],
                "type": "object"
            },
            "RecoverOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "ReplayIn": {
                "properties": {
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "since"
                ],
                "type": "object"
            },
            "ReplayOut": {
                "properties": {
                    "id": {
                        "description": "The QueueBackgroundTask's ID.",
                        "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 33,
                        "minLength": 33,
                        "pattern": "^qtask_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "RetrySchedule": {
                "items": {
                    "$ref": "#/components/schemas/Duration"
                },
                "type": "array"
            },
            "RetryScheduleInOut": {
                "properties": {
                    "retrySchedule": {
                        "$ref": "#/components/schemas/RetrySchedule",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "RotatePollerTokenIn": {
                "properties": {
                    "expiry": {
                        "description": "How long the token will be valid for, in seconds. Can be up to 31,536,000 seconds (1 year).",
                        "format": "int64",
                        "maximum": 31536000,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "oldTokenExpiry": {
                        "default": 300,
                        "description": "Updates the previous token's expiration, in seconds.\n\nIf set to 0, the old token will immediately be revoked. Must be between 0 and 86,400 seconds (1 day).\n\nDefaults to 300 seconds (5 minutes).",
                        "format": "int64",
                        "maximum": 86400,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "RotateTokenOut": {
                "properties": {
                    "ingestUrl": {
                        "type": "string"
                    }
                },
                "required": [
                    "ingestUrl"
                ],
                "type": "object"
            },
            "RotatedUrlOut": {
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "RutterConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "RutterConfigOut": {
                "type": "object"
            },
            "S3Config": {
                "properties": {
                    "accessKeyId": {
                        "type": "string"
                    },
                    "bucket": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "secretAccessKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessKeyId",
                    "bucket",
                    "region",
                    "secretAccessKey"
                ],
                "type": "object"
            },
            "SegmentConfig": {
                "properties": {
                    "secret": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SegmentConfigOut": {
                "type": "object"
            },
            "SettingsInternalIn": {
                "properties": {
                    "applicationAlertEvents": {
                        "default": [],
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAlertEvent"
                        },
                        "type": "array"
                    },
                    "applicationAlertsDashboardUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "applicationAlertsLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableApplicationAlerts": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "default": false,
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "sendSvixWebhookHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SettingsInternalOut": {
                "properties": {
                    "applicationAlertEvents": {
                        "default": [],
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAlertEvent"
                        },
                        "type": "array"
                    },
                    "applicationAlertsDashboardUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "applicationAlertsLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableApplicationAlerts": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "default": false,
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "sendSvixWebhookHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showSvixBrandFooter": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "whitelabelLogo": {
                        "default": null,
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SettingsInternalPatch": {
                "properties": {
                    "applicationAlertEvents": {
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAlertEvent"
                        },
                        "type": "array"
                    },
                    "applicationAlertsDashboardUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "applicationAlertsLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableApplicationAlerts": {
                        "type": "boolean"
                    },
                    "enableChannels": {
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "sendSvixWebhookHeaders": {
                        "type": "boolean"
                    },
                    "showUseSvixPlay": {
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SettingsInternalUpdateOut": {
                "properties": {
                    "applicationAlertEvents": {
                        "default": [],
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAlertEvent"
                        },
                        "type": "array"
                    },
                    "applicationAlertsDashboardUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "applicationAlertsLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customFontFamilyUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customStringsOverride": {
                        "$ref": "#/components/schemas/CustomStringsOverride",
                        "nullable": true
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableApplicationAlerts": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointMtlsConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableEndpointOauthConfig": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMessageStream": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableMsgAtmptLog": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableOtlp": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointChannel": {
                        "default": false,
                        "type": "boolean"
                    },
                    "requireEndpointFilterTypes": {
                        "default": false,
                        "type": "boolean"
                    },
                    "retryPolicy": {
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "sendSvixWebhookHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "showUseSvixPlay": {
                        "default": true,
                        "type": "boolean"
                    },
                    "whitelabelHeaders": {
                        "default": false,
                        "type": "boolean"
                    },
                    "wipeSuccessfulPayload": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ShopifyConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "ShopifyConfigOut": {
                "type": "object"
            },
            "SinkHttpConfig": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "key": {
                        "default": null,
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "SinkIn": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "format": "uri",
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "url"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "eventStream"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "channels": {
                        "description": "List of message channels this sink listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the sink.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SinkOtelV1Config": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object"
            },
            "SinkOut": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "format": "uri",
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "url"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "eventStream"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all).",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name.",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The Endpoint's ID.",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 30,
                        "minLength": 30,
                        "pattern": "^ep_[A-Za-z0-9]{27}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint.",
                        "example": "unique-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt"
                ],
                "type": "object"
            },
            "SinkSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SinkStatus": {
                "enum": [
                    "enabled",
                    "paused",
                    "disabled",
                    "retrying"
                ],
                "type": "string"
            },
            "SinkStatusIn": {
                "enum": [
                    "enabled",
                    "disabled"
                ],
                "type": "string"
            },
            "SinkTransformIn": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SinkTransformationOut": {
                "properties": {
                    "code": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled"
                ],
                "type": "object"
            },
            "SkipParams": {
                "properties": {
                    "iterator": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SlackChallengeResponse": {
                "properties": {
                    "challenge": {
                        "type": "string"
                    }
                },
                "required": [
                    "challenge"
                ],
                "type": "object"
            },
            "SlackConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "SlackConfigOut": {
                "type": "object"
            },
            "StatisticsPeriod": {
                "description": "Period length for a statistics data point.",
                "enum": [
                    "OneDay",
                    "FiveMinutes"
                ],
                "type": "string"
            },
            "StatusCodeClass": {
                "description": "The different classes of HTTP status codes:\n\n- CodeNone = 0\n- Code1xx = 100\n- Code2xx = 200\n- Code3xx = 300\n- Code4xx = 400\n- Code5xx = 500",
                "enum": [
                    0,
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                "title": "StatusCodeClass",
                "type": "integer",
                "x-enum-varnames": [
                    "CodeNone",
                    "Code1xx",
                    "Code2xx",
                    "Code3xx",
                    "Code4xx",
                    "Code5xx"
                ]
            },
            "StreamAlertEmailPatch": {
                "properties": {
                    "email": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamEventTypeIn": {
                "properties": {
                    "archived": {
                        "default": false,
                        "type": "boolean"
                    },
                    "deprecated": {
                        "default": false,
                        "type": "boolean"
                    },
                    "description": {
                        "nullable": true,
                        "type": "string"
                    },
                    "featureFlags": {
                        "default": null,
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "StreamEventTypeOut": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "nullable": true,
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "archived",
                    "createdAt",
                    "deprecated",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "StreamEventTypePatch": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "description": {
                        "nullable": true,
                        "type": "string"
                    },
                    "featureFlags": {
                        "example": [
                            "cool-new-feature"
                        ],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamIn": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "description": "The stream's name.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "uid": {
                        "description": "An optional unique identifier for the stream.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "StreamOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The stream's ID.",
                        "example": "strm_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 27,
                        "minLength": 27,
                        "pattern": "^strm_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "description": "The stream's name.",
                        "nullable": true,
                        "type": "string"
                    },
                    "uid": {
                        "description": "The stream's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "updatedAt"
                ],
                "type": "object"
            },
            "StreamPatch": {
                "properties": {
                    "description": {
                        "description": "The Stream's description.",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "uid": {
                        "description": "An optional unique identifier for the stream.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamPortalAccessIn": {
                "properties": {
                    "expiry": {
                        "default": 604800,
                        "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
                        "format": "uint64",
                        "maximum": 604800,
                        "minimum": 3600,
                        "nullable": true,
                        "type": "integer"
                    },
                    "featureFlags": {
                        "description": "The set of feature flags the created token will have access to.",
                        "example": [],
                        "items": {
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "sessionId": {
                        "description": "An optional session ID to attach to the token.\n\nWhen expiring tokens with \"Expire All\", you can include the session ID to only expire tokens that were created with that session ID.",
                        "example": "user_1FB8",
                        "maxLength": 64,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9@_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamSinkIn": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "poller"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AzureBlobStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "azureBlobStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkOtelV1Config"
                            },
                            "type": {
                                "enum": [
                                    "otelTracing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkHttpConfig"
                            },
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/S3Config"
                            },
                            "type": {
                                "enum": [
                                    "amazonS3"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GoogleCloudStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "googleCloudStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "batchSize": {
                        "default": 100,
                        "description": "How many events will be batched in a request to the Sink.",
                        "example": 100,
                        "format": "uint16",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "eventTypes": {
                        "default": [],
                        "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "maxWaitSecs": {
                        "default": 0,
                        "description": "How long to wait before a batch of events is sent, if the `batchSize` is not reached.\n\nFor example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will send a request after 10 seconds or 100 events, whichever comes first.\n\nNote that we will never send an empty batch of events to the Sink.",
                        "format": "uint16",
                        "maximum": 300,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SinkStatusIn",
                        "default": "enabled",
                        "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `disabled`, events will not be dispatched to the sink until the sink is reenabled."
                    },
                    "uid": {
                        "description": "An optional unique identifier for the sink.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamSinkOut": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "poller"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AzureBlobStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "azureBlobStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkOtelV1Config"
                            },
                            "type": {
                                "enum": [
                                    "otelTracing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/SinkHttpConfig"
                            },
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/S3Config"
                            },
                            "type": {
                                "enum": [
                                    "amazonS3"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GoogleCloudStorageConfig"
                            },
                            "type": {
                                "enum": [
                                    "googleCloudStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "batchSize": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "currentIterator": {
                        "type": "string"
                    },
                    "eventTypes": {
                        "default": [],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "failureReason": {
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The sink's ID.",
                        "example": "sink_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 27,
                        "minLength": 27,
                        "pattern": "^sink_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "maxWaitSecs": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "nextRetryAt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SinkStatus"
                    },
                    "uid": {
                        "description": "The sink's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "batchSize",
                    "createdAt",
                    "currentIterator",
                    "id",
                    "maxWaitSecs",
                    "metadata",
                    "status",
                    "updatedAt"
                ],
                "type": "object"
            },
            "StreamSinkPatch": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "poller"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AzureBlobStoragePatchConfig"
                            },
                            "type": {
                                "enum": [
                                    "azureBlobStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/OtelTracingPatchConfig"
                            },
                            "type": {
                                "enum": [
                                    "otelTracing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/HttpPatchConfig"
                            },
                            "type": {
                                "enum": [
                                    "http"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/AmazonS3PatchConfig"
                            },
                            "type": {
                                "enum": [
                                    "amazonS3"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "config": {
                                "$ref": "#/components/schemas/GoogleCloudStoragePatchConfig"
                            },
                            "type": {
                                "enum": [
                                    "googleCloudStorage"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "batchSize": {
                        "default": null,
                        "example": 100,
                        "format": "uint16",
                        "maximum": 1000,
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "eventTypes": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "maxWaitSecs": {
                        "default": null,
                        "format": "uint16",
                        "maximum": 300,
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SinkStatusIn",
                        "default": null,
                        "nullable": true
                    },
                    "uid": {
                        "description": "The StreamSink's UID.",
                        "example": "unique-identifier",
                        "maxLength": 60,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StreamTransformationSimulateIn": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    },
                    "events": {
                        "items": {
                            "$ref": "#/components/schemas/EventIn"
                        },
                        "type": "array"
                    },
                    "type": {
                        "$ref": "#/components/schemas/StreamTransformationSimulateType"
                    }
                },
                "required": [
                    "code",
                    "events",
                    "type"
                ],
                "type": "object"
            },
            "StreamTransformationSimulateOut": {
                "properties": {
                    "output": {
                        "additionalProperties": true,
                        "type": "object"
                    }
                },
                "required": [
                    "output"
                ],
                "type": "object"
            },
            "StreamTransformationSimulateType": {
                "enum": [
                    "http",
                    "otelTracing",
                    "amazonS3",
                    "azureBlobStorage",
                    "googleCloudStorage"
                ],
                "type": "string"
            },
            "StripeConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "StripeConfigOut": {
                "type": "object"
            },
            "SurveyIn": {
                "properties": {
                    "content": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "title": {
                        "example": "Welcome Questionnaire",
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "title"
                ],
                "type": "object"
            },
            "SurveyOut": {
                "properties": {
                    "content": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Survey's ID.",
                        "example": "srvy_2yZwUhtgs5Ai8T9yRQJXA",
                        "maxLength": 27,
                        "minLength": 27,
                        "pattern": "^srvy_[A-Za-z0-9]{22}$",
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "userId": {
                        "description": "The User's ID.",
                        "example": "usr_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "maxLength": 31,
                        "minLength": 31,
                        "pattern": "^usr_[A-Za-z0-9]{27}$",
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "createdAt",
                    "id",
                    "title",
                    "userId"
                ],
                "type": "object"
            },
            "SvixConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "SvixConfigOut": {
                "type": "object"
            },
            "TelnyxConfig": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "TelnyxConfigOut": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicKey"
                ],
                "type": "object"
            },
            "TransformationHttpMethod": {
                "enum": [
                    "POST",
                    "PUT",
                    "PATCH"
                ],
                "type": "string"
            },
            "TransformationSimulateIn": {
                "properties": {
                    "channels": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "additionalProperties": true,
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "TransformationSimulateOut": {
                "properties": {
                    "cancel": {
                        "type": "boolean"
                    },
                    "method": {
                        "$ref": "#/components/schemas/TransformationHttpMethod",
                        "nullable": true
                    },
                    "payload": {
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "cancel",
                    "payload",
                    "url"
                ],
                "type": "object"
            },
            "ValidationError": {
                "description": "Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.",
                "properties": {
                    "loc": {
                        "description": "The location as a [`Vec`] of [`String`]s -- often in the form `[\"body\", \"field_name\"]`, `[\"query\", \"field_name\"]`, etc. They may, however, be arbitrarily deep.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "msg": {
                        "description": "The message accompanying the validation error item.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of error, often \"type_error\" or \"value_error\", but sometimes with more context like as \"value_error.number.not_ge\"",
                        "type": "string"
                    }
                },
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object"
            },
            "VapiConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "VapiConfigOut": {
                "type": "object"
            },
            "VeriffConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "VeriffConfigOut": {
                "type": "object"
            },
            "ZoomConfig": {
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "secret"
                ],
                "type": "object"
            },
            "ZoomConfigOut": {
                "type": "object"
            },
            "ZoomCrcResponse": {
                "properties": {
                    "encryptedToken": {
                        "type": "string"
                    },
                    "plainToken": {
                        "type": "string"
                    }
                },
                "required": [
                    "encryptedToken",
                    "plainToken"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "description": "HTTP Bearer token passed in the `Authorization` header",
                "scheme": "bearer",
                "type": "http"
            }
        }
    },
    "info": {
        "description": "Welcome to the Svix API documentation!\n\nUseful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)\n\n# Introduction\n\nThis is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).\n\n## Main concepts\n\nIn Svix you have four important entities you will be interacting with:\n\n- `messages`: these are the webhooks being sent. They can have contents and a few other properties.\n- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.\n- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).\n- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.\n\n\n## Authentication\n\nGet your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).\n\n<SecurityDefinitions />\n\n\n## Code samples\n\nThe code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).\n\n\n## Idempotency\n\nSvix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.\n\nTo perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.\n\nSvix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.\n\nPlease note that idempotency is only supported for `POST` requests.\n\n\n## Cross-Origin Resource Sharing\n\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n",
        "title": "Svix API",
        "version": "1.76.1",
        "x-logo": {
            "altText": "Svix Logo",
            "url": "https://www.svix.com/static/img/brand-padded.svg"
        }
    },
    "openapi": "3.1.0",
    "paths": {
        "/api/v1/app": {
            "get": {
                "description": "List of all the organization's applications.",
                "operationId": "v1.application.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^app_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApplicationOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Applications",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.application.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.application.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.application.list()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.application.list()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Application.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.application.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getApplication().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.application.list"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.application().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Application.List();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix application list"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create a new application.",
                "operationId": "v1.application.create",
                "parameters": [
                    {
                        "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
                        "in": "query",
                        "name": "get_if_exists",
                        "schema": {
                            "default": false,
                            "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.application.create({\n  name: \"My first application\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.application.create({\n  name: \"My first application\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.application.create(\n    ApplicationIn(\n        name=\"My first application\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.application.create(\n    ApplicationIn(\n        name=\"My first application\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Application.Create(\n\tctx,\n\tApplicationIn{\n\t\tName:      \"My first application\",\n\t\tRateLimit: ptr(uint16(1)),\n\t\tUid:       ptr(\"unique-identifier\"),\n\t\tMetadata:  nil,\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.application.create(\n        ApplicationIn(\n            name = \"My first application\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            metadata = mapOf(),\n        )\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getApplication()\n        .create(new ApplicationIn()\n            .name(\"My first application\")\n            .rateLimit(1L)\n            .uid(\"unique-identifier\")\n            .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .application\n  .create({name: \"My first application\", rateLimit: 1, uid: \"unique-identifier\", metadata: {}})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .application()\n    .create(\n        ApplicationIn {\n            name: \"My first application\".to_string(),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Application.Create(\n    new ApplicationIn\n    {\n        Name = \"My first application\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix application create '{\n    \"metadata\": {},\n    \"name\": \"My first application\",\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"metadata\": {},\n    \"name\": \"My first application\",\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/stats/usage": {
            "get": {
                "description": "Get basic statistics for all applications.",
                "operationId": "get_app_usage_stats_api_v1_app_stats_usage__get",
                "parameters": [
                    {
                        "description": "Filter the range to data after this date.",
                        "in": "query",
                        "name": "since",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data after this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data before this date.",
                        "in": "query",
                        "name": "until",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data before this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Limit the number of returned items.",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 50,
                            "description": "Limit the number of returned items.",
                            "format": "int",
                            "maximum": 250,
                            "nullable": true,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator to use (depends on the chosen ordering).",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator to use (depends on the chosen ordering).",
                            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^app_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApplicationStats_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Usage Stats",
                "tags": [
                    "Application"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}": {
            "delete": {
                "description": "Delete an application.",
                "operationId": "v1.application.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.application.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.application.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.application.delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.application.delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Application.Delete(ctx, \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.application.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getApplication().delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.application.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.application().delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string()).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Application.Delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix application delete \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an application.",
                "operationId": "v1.application.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.application.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.application.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.application.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.application.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Application.Get(ctx, \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.application.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getApplication().get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.application.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .application()\n    .get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Application.Get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix application get \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an application.",
                "operationId": "v1.application.patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.application.patch(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  name: \"sample string\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.application.patch(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  name: \"sample string\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.application.patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    ApplicationPatch(\n        name=\"sample string\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.application.patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    ApplicationPatch(\n        name=\"sample string\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Application.Patch(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tApplicationPatch{\n\t\tName:      ptr(\"sample string\"),\n\t\tRateLimit: NewNullable(uint16(1)),\n\t\tUid:       NewNullable(\"unique-identifier\"),\n\t\tMetadata:  nil,\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.application.patch(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        ApplicationPatch(\n            name = \"sample string\",\n            rateLimit = MaybeUnset.Present(1u),\n            uid = MaybeUnset.Present(\"unique-identifier\"),\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getApplication()\n        .patch(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new ApplicationPatch()\n                .name(\"sample string\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .application\n  .patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    {name: \"sample string\", rateLimit: 1, uid: \"unique-identifier\", metadata: {}}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .application()\n    .patch(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        ApplicationPatch {\n            name: Some(\"sample string\".to_string()),\n            rate_limit: js_option::JsOption::Some(1),\n            uid: js_option::JsOption::Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Application.Patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new ApplicationPatch\n    {\n        Name = \"sample string\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix application patch \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            },
            "put": {
                "description": "Update an application.",
                "operationId": "v1.application.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.application.update(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  name: \"My first application\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.application.update(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  name: \"My first application\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.application.update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    ApplicationIn(\n        name=\"My first application\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.application.update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    ApplicationIn(\n        name=\"My first application\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Application.Update(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tApplicationIn{\n\t\tName:      \"My first application\",\n\t\tRateLimit: ptr(uint16(1)),\n\t\tUid:       ptr(\"unique-identifier\"),\n\t\tMetadata:  nil,\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.application.update(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        ApplicationIn(\n            name = \"My first application\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getApplication()\n        .update(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new ApplicationIn()\n                .name(\"My first application\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .application\n  .update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    {name: \"My first application\", rateLimit: 1, uid: \"unique-identifier\", metadata: {}}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .application()\n    .update(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        ApplicationIn {\n            name: \"My first application\".to_string(),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Application.Update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new ApplicationIn\n    {\n        Name = \"My first application\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix application update \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"metadata\": {},\n    \"name\": \"My first application\",\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"metadata\": {},\n    \"name\": \"My first application\",\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}": {
            "get": {
                "description": "List attempts by endpoint id\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.\n",
                "operationId": "v1.message-attempt.list-by-endpoint",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the HTTP status code",
                        "explode": false,
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "description": "Filter response based on the HTTP status code",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the tag",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the tag",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` attempt content is included in the response",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` attempt content is included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true`, the message information is included in the response",
                        "in": "query",
                        "name": "with_msg",
                        "schema": {
                            "default": false,
                            "description": "When `true`, the message information is included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts By Endpoint",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.messageAttempt.listByEndpoint(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.messageAttempt.listByEndpoint(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message_attempt.list_by_endpoint(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message_attempt.list_by_endpoint(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.MessageAttempt.ListByEndpoint(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.messageAttempt.listByEndpoint(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessageAttempt()\n        .listByEndpoint(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.message_attempt.list_by_endpoint(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message_attempt()\n    .list_by_endpoint(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.MessageAttempt.ListByEndpoint(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message-attempt list-by-endpoint \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/attempt/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/count": {
            "get": {
                "description": "Like `v1.message-attempt.list-by-endpoint` but returning a count only.",
                "operationId": "v1.message-attempt.count-by-endpoint",
                "parameters": [
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the HTTP status code",
                        "explode": false,
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "description": "Filter response based on the HTTP status code",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the tag",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the tag",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CountOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Count Attempts By Endpoint",
                "tags": [
                    "Message Attempt"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/attempt/msg/{msg_id}": {
            "get": {
                "description": "List attempts by message ID.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.",
                "operationId": "v1.message-attempt.list-by-msg",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the HTTP status code",
                        "explode": false,
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "description": "Filter response based on the HTTP status code",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the tag",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the tag",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the attempts based on the attempted endpoint",
                        "in": "query",
                        "name": "endpoint_id",
                        "schema": {
                            "description": "Filter the attempts based on the attempted endpoint",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` attempt content is included in the response",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` attempt content is included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts By Msg",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.messageAttempt.listByMsg(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.messageAttempt.listByMsg(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message_attempt.list_by_msg(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message_attempt.list_by_msg(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.MessageAttempt.ListByMsg(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.messageAttempt.listByMsg(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessageAttempt()\n        .listByMsg(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.message_attempt.list_by_msg(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message_attempt()\n    .list_by_msg(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.MessageAttempt.ListByMsg(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message-attempt list-by-msg \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/attempt/msg/msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint": {
            "get": {
                "description": "List the application's endpoints.",
                "operationId": "v1.endpoint.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Endpoints",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.list(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.list(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.List(ctx, \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.endpoint.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint().list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.endpoint.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(), None)\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.List(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint list \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create a new endpoint for the application.\n\nWhen `secret` is `null` the secret is automatically generated (recommended).",
                "operationId": "v1.endpoint.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.create(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  description: \"An example endpoint name\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  url: \"https://example.com/webhook/\",\n  version: 1,\n  disabled: true,\n  filterTypes: [\"user.signup\", \"user.deleted\"],\n  channels: [\"project_123\", \"group_2\"],\n  secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  metadata: {},\n  headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.create(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  description: \"An example endpoint name\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  url: \"https://example.com/webhook/\",\n  version: 1,\n  disabled: true,\n  filterTypes: [\"user.signup\", \"user.deleted\"],\n  channels: [\"project_123\", \"group_2\"],\n  secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  metadata: {},\n  headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    EndpointIn(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        version=1,\n        disabled=True,\n        filter_types=[\n            \"user.signup\",\n            \"user.deleted\",\n        ],\n        channels=[\n            \"project_123\",\n            \"group_2\",\n        ],\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    EndpointIn(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        version=1,\n        disabled=True,\n        filter_types=[\n            \"user.signup\",\n            \"user.deleted\",\n        ],\n        channels=[\n            \"project_123\",\n            \"group_2\",\n        ],\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.Create(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tEndpointIn{\n\t\tDescription: ptr(\"An example endpoint name\"),\n\t\tRateLimit:   ptr(uint16(1)),\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tUrl:         \"https://example.com/webhook/\",\n\t\tVersion:     ptr(uint16(1)),\n\t\tDisabled:    ptr(true),\n\t\tFilterTypes: []string{\"user.signup\", \"user.deleted\"},\n\t\tChannels:    []string{\"project_123\", \"group_2\"},\n\t\tSecret:      ptr(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n\t\tMetadata:    nil,\n\t\tHeaders:     &map[string]string{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.create(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        EndpointIn(\n            description = \"An example endpoint name\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            url = \"https://example.com/webhook/\",\n            version = 1u,\n            disabled = true,\n            filterTypes = setOf(\"user.signup\", \"user.deleted\"),\n            channels = setOf(\"project_123\", \"group_2\"),\n            secret = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n            metadata = mapOf(),\n            headers = mapOf(\"X-Example\" to \"123\", \"X-Foobar\" to \"Bar\"),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .create(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new EndpointIn()\n                .description(\"An example endpoint name\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .url(URI.create(\"https://example.com/webhook/\"))\n                .version(1L)\n                .disabled(true)\n                .filterTypes(Set.of(\"user.signup\", \"user.deleted\"))\n                .channels(Set.of(\"project_123\", \"group_2\"))\n                .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n                .metadata(Map.of())\n                .headers(\n                    Map.ofEntries(Map.entry(\"X-Example\", \"123\"), Map.entry(\"X-Foobar\", \"Bar\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    {\n      description: \"An example endpoint name\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      url: \"https://example.com/webhook/\",\n      version: 1,\n      disabled: true,\n      filterTypes: [\"user.signup\", \"user.deleted\"],\n      channels: [\"project_123\", \"group_2\"],\n      secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n      metadata: {},\n      headers: {:\"X-Example\" => \"123\", :\"X-Foobar\" => \"Bar\"}\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .create(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        EndpointIn {\n            description: Some(\"An example endpoint name\".to_string()),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            url: \"https://example.com/webhook/\".to_string(),\n            version: Some(1),\n            disabled: Some(true),\n            filter_types: Some(\n                vec![\"user.signup\".to_string(), \"user.deleted\".to_string()],\n            ),\n            channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n            secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n            metadata: Some(HashMap::new()),\n            headers: Some(\n                HashMap::from([\n                    (\"X-Example\".to_string(), \"123\".to_string()),\n                    (\"X-Foobar\".to_string(), \"Bar\".to_string()),\n                ]),\n            ),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.Create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new EndpointIn\n    {\n        Description = \"An example endpoint name\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Url = \"https://example.com/webhook/\",\n        Version = 1,\n        Disabled = true,\n        FilterTypes = [\"user.signup\", \"user.deleted\"],\n        Channels = [\"project_123\", \"group_2\"],\n        Secret = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        Metadata = [],\n        Headers = new() { { \"X-Example\", \"123\" }, { \"X-Foobar\", \"Bar\" } },\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint create \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"channels\": [\n      \"project_123\",\n      \"group_2\"\n    ],\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"user.signup\",\n      \"user.deleted\"\n    ],\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    },\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"channels\": [\n      \"project_123\",\n      \"group_2\"\n    ],\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"user.signup\",\n      \"user.deleted\"\n    ],\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    },\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}": {
            "delete": {
                "description": "Delete an endpoint.",
                "operationId": "v1.endpoint.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.delete(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.endpoint.delete(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.endpoint.delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Endpoint.Delete(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.endpoint.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint()\n    .delete(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.Delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint delete \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an endpoint.",
                "operationId": "v1.endpoint.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.Get(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response =\n        svix.getEndpoint().get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.endpoint.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .get(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.Get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint get \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an endpoint.",
                "operationId": "v1.endpoint.patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.patch(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"sample string\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"sample string\",\n    version: 1,\n    disabled: true,\n    filterTypes: [],\n    channels: [],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.patch(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"sample string\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"sample string\",\n    version: 1,\n    disabled: true,\n    filterTypes: [],\n    channels: [],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointPatch(\n        description=\"sample string\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"sample string\",\n        version=1,\n        disabled=True,\n        filter_types=[],\n        channels=[],\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointPatch(\n        description=\"sample string\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"sample string\",\n        version=1,\n        disabled=True,\n        filter_types=[],\n        channels=[],\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.Patch(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tEndpointPatch{\n\t\tDescription: ptr(\"sample string\"),\n\t\tRateLimit:   NewNullable(uint16(1)),\n\t\tUid:         NewNullable(\"unique-identifier\"),\n\t\tUrl:         ptr(\"sample string\"),\n\t\tVersion:     ptr(uint16(1)),\n\t\tDisabled:    ptr(true),\n\t\tFilterTypes: NewNullable([]string{}),\n\t\tChannels:    NewNullable([]string{}),\n\t\tSecret:      NewNullable(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n\t\tMetadata:    nil,\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.patch(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n        EndpointPatch(\n            description = \"sample string\",\n            rateLimit = MaybeUnset.Present(1u),\n            uid = MaybeUnset.Present(\"unique-identifier\"),\n            url = \"https://example.com/\",\n            version = 1u,\n            disabled = true,\n            filterTypes = MaybeUnset.Present(setOf()),\n            channels = MaybeUnset.Present(setOf()),\n            secret = MaybeUnset.Present(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .patch(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new EndpointPatch()\n                .description(\"sample string\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .url(URI.create(\"https://example.com/\"))\n                .version(1L)\n                .disabled(true)\n                .filterTypes(Set.of())\n                .channels(Set.of())\n                .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {\n      description: \"sample string\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      url: \"sample string\",\n      version: 1,\n      disabled: true,\n      filterTypes: [],\n      channels: [],\n      secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n      metadata: {}\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .patch(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        EndpointPatch {\n            description: Some(\"sample string\".to_string()),\n            rate_limit: js_option::JsOption::Some(1),\n            uid: js_option::JsOption::Some(\"unique-identifier\".to_string()),\n            url: Some(\"sample string\".to_string()),\n            version: Some(1),\n            disabled: Some(true),\n            filter_types: js_option::JsOption::Some(vec![]),\n            channels: js_option::JsOption::Some(vec![]),\n            secret: js_option::JsOption::Some(\n                \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string(),\n            ),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.Patch(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new EndpointPatch\n    {\n        Description = \"sample string\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Url = \"sample string\",\n        Version = 1,\n        Disabled = true,\n        FilterTypes = MaybeUnset<List<string>?>.Set([]),\n        Channels = MaybeUnset<List<string>?>.Set([]),\n        Secret = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint patch \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"channels\": [],\n    \"description\": \"sample string\",\n    \"disabled\": true,\n    \"filterTypes\": [],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"sample string\",\n    \"version\": 1\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"channels\": [],\n    \"description\": \"sample string\",\n    \"disabled\": true,\n    \"filterTypes\": [],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"sample string\",\n    \"version\": 1\n  }'"
                    }
                ]
            },
            "put": {
                "description": "Update an endpoint.",
                "operationId": "v1.endpoint.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.update(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"An example endpoint name\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: true,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.update(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"An example endpoint name\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: true,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointUpdate(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        version=1,\n        disabled=True,\n        filter_types=[\n            \"user.signup\",\n            \"user.deleted\",\n        ],\n        channels=[\n            \"project_123\",\n            \"group_2\",\n        ],\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointUpdate(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        version=1,\n        disabled=True,\n        filter_types=[\n            \"user.signup\",\n            \"user.deleted\",\n        ],\n        channels=[\n            \"project_123\",\n            \"group_2\",\n        ],\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.Update(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tEndpointUpdate{\n\t\tDescription: ptr(\"An example endpoint name\"),\n\t\tRateLimit:   ptr(uint16(1)),\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tUrl:         \"https://example.com/webhook/\",\n\t\tVersion:     ptr(uint16(1)),\n\t\tDisabled:    ptr(true),\n\t\tFilterTypes: []string{\"user.signup\", \"user.deleted\"},\n\t\tChannels:    []string{\"project_123\", \"group_2\"},\n\t\tMetadata:    nil,\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.update(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n        EndpointUpdate(\n            description = \"An example endpoint name\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            url = \"https://example.com/webhook/\",\n            version = 1u,\n            disabled = true,\n            filterTypes = setOf(\"user.signup\", \"user.deleted\"),\n            channels = setOf(\"project_123\", \"group_2\"),\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .update(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new EndpointUpdate()\n                .description(\"An example endpoint name\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .url(URI.create(\"https://example.com/webhook/\"))\n                .version(1L)\n                .disabled(true)\n                .filterTypes(Set.of(\"user.signup\", \"user.deleted\"))\n                .channels(Set.of(\"project_123\", \"group_2\"))\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {\n      description: \"An example endpoint name\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      url: \"https://example.com/webhook/\",\n      version: 1,\n      disabled: true,\n      filterTypes: [\"user.signup\", \"user.deleted\"],\n      channels: [\"project_123\", \"group_2\"],\n      metadata: {}\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .update(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        EndpointUpdate {\n            description: Some(\"An example endpoint name\".to_string()),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            url: \"https://example.com/webhook/\".to_string(),\n            version: Some(1),\n            disabled: Some(true),\n            filter_types: Some(\n                vec![\"user.signup\".to_string(), \"user.deleted\".to_string()],\n            ),\n            channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.Update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new EndpointUpdate\n    {\n        Description = \"An example endpoint name\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Url = \"https://example.com/webhook/\",\n        Version = 1,\n        Disabled = true,\n        FilterTypes = [\"user.signup\", \"user.deleted\"],\n        Channels = [\"project_123\", \"group_2\"],\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint update \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"channels\": [\n      \"project_123\",\n      \"group_2\"\n    ],\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"user.signup\",\n      \"user.deleted\"\n    ],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"channels\": [\n      \"project_123\",\n      \"group_2\"\n    ],\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"user.signup\",\n      \"user.deleted\"\n    ],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/connector/oauth/hubspot": {
            "put": {
                "description": "Create / update endpoint Hubspot OAuth configuration.\n\nSpecific private endpoint just for us, to avoid exposing the Hubspot secret to the client.",
                "operationId": "v1.endpoint.update-hubspot-oauth-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HubspotOauthConfigIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Hubspot Oauth Config",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers": {
            "get": {
                "description": "Get the additional headers to be sent with the webhook.",
                "operationId": "v1.endpoint.get-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.getHeaders(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.getHeaders(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.get_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.get_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.GetHeaders(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.getHeaders(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .getHeaders(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.endpoint.get_headers(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .get_headers(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.GetHeaders(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint get-headers \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially set the additional headers to be sent with the webhook.",
                "operationId": "v1.endpoint.patch-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointHeadersPatchIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchHeaders(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n    deleteHeaders: [],\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.endpoint.patchHeaders(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n    deleteHeaders: [],\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.patch_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointHeadersPatchIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n        delete_headers=[],\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.endpoint.patch_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointHeadersPatchIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n        delete_headers=[],\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Endpoint.PatchHeaders(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tEndpointHeadersPatchIn{\n\t\tHeaders:       map[string]string{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n\t\tDeleteHeaders: []string{},\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.patchHeaders(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointHeadersPatchIn(\n        headers = mapOf(\"X-Example\" to \"123\", \"X-Foobar\" to \"Bar\"),\n        deleteHeaders = listOf(),\n    ),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint()\n        .patchHeaders(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new EndpointHeadersPatchIn()\n                .headers(Map.ofEntries(Map.entry(\"X-Example\", \"123\"), Map.entry(\"X-Foobar\", \"Bar\")))\n                .deleteHeaders(List.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .patch_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {headers: {:\"X-Example\" => \"123\", :\"X-Foobar\" => \"Bar\"}, deleteHeaders: []}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint()\n    .patch_headers(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        EndpointHeadersPatchIn {\n            headers: HashMap::from([\n                (\"X-Example\".to_string(), \"123\".to_string()),\n                (\"X-Foobar\".to_string(), \"Bar\".to_string()),\n            ]),\n            delete_headers: Some(vec![]),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.PatchHeaders(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new EndpointHeadersPatchIn\n    {\n        Headers = new() { { \"X-Example\", \"123\" }, { \"X-Foobar\", \"Bar\" } },\n        DeleteHeaders = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint patch-headers \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"deleteHeaders\": [],\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"deleteHeaders\": [],\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    }
                ]
            },
            "put": {
                "description": "Set the additional headers to be sent with the webhook.",
                "operationId": "v1.endpoint.update-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointHeadersIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateHeaders(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.endpoint.updateHeaders(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.update_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointHeadersIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.endpoint.update_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointHeadersIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Endpoint.UpdateHeaders(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tEndpointHeadersIn{Headers: map[string]string{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.updateHeaders(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointHeadersIn(headers = mapOf(\"X-Example\" to \"123\", \"X-Foobar\" to \"Bar\")),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint()\n        .updateHeaders(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new EndpointHeadersIn()\n                .headers(\n                    Map.ofEntries(Map.entry(\"X-Example\", \"123\"), Map.entry(\"X-Foobar\", \"Bar\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .update_headers(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {headers: {:\"X-Example\" => \"123\", :\"X-Foobar\" => \"Bar\"}}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint()\n    .update_headers(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        EndpointHeadersIn {\n            headers: HashMap::from([\n                (\"X-Example\".to_string(), \"123\".to_string()),\n                (\"X-Foobar\".to_string(), \"Bar\".to_string()),\n            ]),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.UpdateHeaders(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new EndpointHeadersIn\n    {\n        Headers = new() { { \"X-Example\", \"123\" }, { \"X-Foobar\", \"Bar\" } },\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint update-headers \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg": {
            "get": {
                "description": "List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.\n\nThe `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.\n",
                "operationId": "v1.message-attempt.list-attempted-messages",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^msg_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the message tags",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter response based on the message tags",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                        "explode": false,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` message payloads are included in the response",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` message payloads are included in the response",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EndpointMessageOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempted Messages",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.messageAttempt.listAttemptedMessages(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.messageAttempt.listAttemptedMessages(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message_attempt.list_attempted_messages(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message_attempt.list_attempted_messages(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.MessageAttempt.ListAttemptedMessages(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.messageAttempt.listAttemptedMessages(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessageAttempt()\n        .listAttemptedMessages(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message_attempt\n  .list_attempted_messages(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message_attempt()\n    .list_attempted_messages(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.MessageAttempt.ListAttemptedMessages(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message-attempt list-attempted-messages \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt": {
            "post": {
                "description": "Creates and sends a message to the specified endpoint.\n\nThe message attempt and response from the endpoint is returned.",
                "operationId": "create_message_attempt_for_endpoint",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message Attempt For Endpoint",
                "tags": [
                    "Message"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls": {
            "delete": {
                "description": "Delete endpoint mTLS configuration.",
                "operationId": "v1.endpoint.delete-mtls-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Endpoint Mtls Config",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "get": {
                "description": "Get endpoint mTLS configuration.",
                "operationId": "v1.endpoint.get-mtls",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointMtlsConfigOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Mtls Config",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Create / update endpoint mTLS configuration.",
                "operationId": "v1.endpoint.update-mtls-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointMtlsConfigIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint Mtls Config",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls-config": {
            "get": {
                "description": "Get endpoint mTLS status and configuration.\nThis is basically the same as v1.endpoint.get-mtls, but instead of returning a 404 when mTLS is not enabled, it returns a 200 with `enabled: false` and `config: null`.",
                "operationId": "v1.endpoint.get-mtls-2",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointMtlsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Mtls Config 2",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth": {
            "delete": {
                "description": "Delete endpoint OAuth configuration.",
                "operationId": "v1.endpoint.delete-oauth-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Endpoint Oauth Config",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "get": {
                "description": "Get endpoint OAuth configuration.",
                "operationId": "v1.endpoint.get-oauth",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOauthConfigOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Oauth Config",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Create / update endpoint OAuth configuration.",
                "operationId": "v1.endpoint.update-oauth-config",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointOauthConfigIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint Oauth Config",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth-config": {
            "get": {
                "description": "Get endpoint OAuth status and configuration.\nThis is basically the same as v1.endpoint.get-oauth, but instead of returning a 404 when OAuth is not enabled, it returns a 200 with `enabled: false` and `config: null`.",
                "operationId": "v1.endpoint.get-oauth-2",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOauthOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Oauth Config 2",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/rate-limit-status": {
            "get": {
                "description": "Get the endpoint's throttling status. Returns `Ok` if the endpoint rate-limit is not impacting delivery to it.",
                "operationId": "v1.endpoint.get-throttling-status",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointRateLimitStatusOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Throttling Status",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover": {
            "post": {
                "description": "Resend all failed messages since a given time.\n\nMessages that were sent successfully, even if failed initially, are not resent.",
                "operationId": "v1.endpoint.recover",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecoverIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecoverOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Recover Failed Webhooks",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.recover(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    since: new Date(\"2025-10-02T20:28:42+00:00\"),\n    until: new Date(\"2025-10-02T20:28:42+00:00\"),\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.recover(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    since: new Date(\"2025-10-02T20:28:42+00:00\"),\n    until: new Date(\"2025-10-02T20:28:42+00:00\"),\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.recover(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    RecoverIn(\n        since=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        until=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.recover(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    RecoverIn(\n        since=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        until=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.Recover(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tRecoverIn{\n\t\tSince: time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC),\n\t\tUntil: ptr(time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC)),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.recover(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n        RecoverIn(\n            since = Instant.parse(\"2025-10-02T20:28:42+00:00\"),\n            until = Instant.parse(\"2025-10-02T20:28:42+00:00\"),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .recover(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new RecoverIn()\n                .since(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\"))\n                .until(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\")));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .recover(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {since: \"2025-10-02T20:28:42+00:00\", until: \"2025-10-02T20:28:42+00:00\"}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .recover(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        RecoverIn {\n            since: \"2025-10-02T20:28:42+00:00\".to_string(),\n            until: Some(\"2025-10-02T20:28:42+00:00\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.Recover(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new RecoverIn\n    {\n        Since = DateTime.Parse(\"2025-10-02T20:28:42+00:00\"),\n        Until = DateTime.Parse(\"2025-10-02T20:28:42+00:00\"),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint recover \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"since\": \"2025-10-02T20:28:42+00:00\",\n    \"until\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/recover' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"since\": \"2025-10-02T20:28:42+00:00\",\n    \"until\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing": {
            "post": {
                "description": "Replays messages to the endpoint.\n\nOnly messages that were created after `since` will be sent.\nMessages that were previously sent to the endpoint are not resent.",
                "operationId": "v1.endpoint.replay-missing",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReplayIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReplayOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Replay Missing Webhooks",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.replayMissing(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    since: new Date(\"2025-10-02T20:28:42+00:00\"),\n    until: new Date(\"2025-10-02T20:28:42+00:00\"),\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.replayMissing(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    since: new Date(\"2025-10-02T20:28:42+00:00\"),\n    until: new Date(\"2025-10-02T20:28:42+00:00\"),\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.replay_missing(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    ReplayIn(\n        since=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        until=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.replay_missing(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    ReplayIn(\n        since=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        until=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.ReplayMissing(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tReplayIn{\n\t\tSince: time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC),\n\t\tUntil: ptr(time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC)),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.replayMissing(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n        ReplayIn(\n            since = Instant.parse(\"2025-10-02T20:28:42+00:00\"),\n            until = Instant.parse(\"2025-10-02T20:28:42+00:00\"),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .replayMissing(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new ReplayIn()\n                .since(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\"))\n                .until(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\")));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .replay_missing(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {since: \"2025-10-02T20:28:42+00:00\", until: \"2025-10-02T20:28:42+00:00\"}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .replay_missing(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        ReplayIn {\n            since: \"2025-10-02T20:28:42+00:00\".to_string(),\n            until: Some(\"2025-10-02T20:28:42+00:00\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.ReplayMissing(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new ReplayIn\n    {\n        Since = DateTime.Parse(\"2025-10-02T20:28:42+00:00\"),\n        Until = DateTime.Parse(\"2025-10-02T20:28:42+00:00\"),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint replay-missing \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"since\": \"2025-10-02T20:28:42+00:00\",\n    \"until\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/replay-missing' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"since\": \"2025-10-02T20:28:42+00:00\",\n    \"until\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret": {
            "get": {
                "description": "Get the endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.endpoint.get-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Secret",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.getSecret(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.getSecret(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.get_secret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.get_secret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.GetSecret(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.getSecret(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .getSecret(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.endpoint.get_secret(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .get_secret(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.GetSecret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint get-secret \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate": {
            "post": {
                "description": "Rotates the endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
                "operationId": "v1.endpoint.rotate-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointSecretRotateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Endpoint Secret",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.rotateSecret(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.endpoint.rotateSecret(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.rotate_secret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointSecretRotateIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.endpoint.rotate_secret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointSecretRotateIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Endpoint.RotateSecret(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tEndpointSecretRotateIn{Key: ptr(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.rotateSecret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointSecretRotateIn(key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint()\n        .rotateSecret(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new EndpointSecretRotateIn().key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .rotate_secret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint()\n    .rotate_secret(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        EndpointSecretRotateIn {\n            key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.RotateSecret(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new EndpointSecretRotateIn { Key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\" }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint rotate-secret \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example": {
            "post": {
                "description": "Send an example message for an event.",
                "operationId": "v1.endpoint.send-example",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventExampleIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Send Event Type Example Message",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.sendExample(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    eventType: \"user.signup\",\n    exampleIndex: 1,\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.sendExample(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    eventType: \"user.signup\",\n    exampleIndex: 1,\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.send_example(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EventExampleIn(\n        event_type=\"user.signup\",\n        example_index=1,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.send_example(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EventExampleIn(\n        event_type=\"user.signup\",\n        example_index=1,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.SendExample(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tEventExampleIn{EventType: \"user.signup\", ExampleIndex: ptr(uint64(1))},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.sendExample(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n        EventExampleIn(eventType = \"user.signup\", exampleIndex = 1u),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .sendExample(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new EventExampleIn().eventType(\"user.signup\").exampleIndex(1L));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .send_example(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {eventType: \"user.signup\", exampleIndex: 1}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .send_example(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        EventExampleIn {\n            event_type: \"user.signup\".to_string(),\n            example_index: Some(1),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.SendExample(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new EventExampleIn { EventType = \"user.signup\", ExampleIndex = 1 }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint send-example \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"eventType\": \"user.signup\",\n    \"exampleIndex\": 1\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/send-example' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"eventType\": \"user.signup\",\n    \"exampleIndex\": 1\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats": {
            "get": {
                "description": "Get basic statistics for the endpoint.",
                "operationId": "v1.endpoint.get-stats",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "until",
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointStats"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Endpoint Stats",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.getStats(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.getStats(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.get_stats(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.get_stats(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.GetStats(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.getStats(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .getStats(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.endpoint.get_stats(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .get_stats(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.GetStats(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint get-stats \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/stats' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation": {
            "get": {
                "description": "Get the transformation code associated with this endpoint.",
                "operationId": "v1.endpoint.transformation-get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Transformation",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.endpoint.transformationGet(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.endpoint.transformationGet(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.endpoint.transformation_get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.endpoint.transformation_get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Endpoint.TransformationGet(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.endpoint.transformationGet(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEndpoint()\n        .transformationGet(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.endpoint.transformation_get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .endpoint()\n    .transformation_get(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.TransformationGet(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint transformation-get \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this endpoint.",
                "operationId": "v1.endpoint.patch-transformation",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointTransformationPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint Transformation",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchTransformation(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    code: \"function handler(webhook) { /* ... */ }\",\n    enabled: true,\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.endpoint.patchTransformation(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    code: \"function handler(webhook) { /* ... */ }\",\n    enabled: true,\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.patch_transformation(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointTransformationPatch(\n        code=\"function handler(webhook) { /* ... */ }\",\n        enabled=True,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.endpoint.patch_transformation(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointTransformationPatch(\n        code=\"function handler(webhook) { /* ... */ }\",\n        enabled=True,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Endpoint.PatchTransformation(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tEndpointTransformationPatch{\n\t\tCode:    NewNullable(\"function handler(webhook) { /* ... */ }\"),\n\t\tEnabled: ptr(true),\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.patchTransformation(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    EndpointTransformationPatch(\n        code = MaybeUnset.Present(\"function handler(webhook) { /* ... */ }\"),\n        enabled = true,\n    ),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint()\n        .patchTransformation(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new EndpointTransformationPatch()\n                .code(\"function handler(webhook) { /* ... */ }\")\n                .enabled(true));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .endpoint\n  .patch_transformation(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {code: \"function handler(webhook) { /* ... */ }\", enabled: true}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint()\n    .patch_transformation(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        EndpointTransformationPatch {\n            code: js_option::JsOption::Some(\n                \"function handler(webhook) { /* ... */ }\".to_string(),\n            ),\n            enabled: Some(true),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Endpoint.PatchTransformation(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new EndpointTransformationPatch\n    {\n        Code = \"function handler(webhook) { /* ... */ }\",\n        Enabled = true,\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix endpoint patch-transformation \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"code\": \"function handler(webhook) { /* ... */ }\",\n    \"enabled\": true\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"code\": \"function handler(webhook) { /* ... */ }\",\n    \"enabled\": true\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate": {
            "post": {
                "description": "Simulate running the transformation on the payload and code.",
                "operationId": "v1.endpoint.transformation-simulate",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransformationSimulateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransformationSimulateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Simulate",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/events": {
            "get": {
                "description": "Reads the stream of created messages for an application.",
                "operationId": "v1.message.events",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type.",
                        "in": "query",
                        "name": "channels",
                        "schema": {
                            "description": "Filter response based on the event type.",
                            "items": {
                                "example": "project_1337",
                                "maxLength": 128,
                                "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageEventsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Message Events",
                "tags": [
                    "Message"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/inbound/msg/{inbound_token}": {
            "post": {
                "description": "Handles a raw inbound webhook for the application.",
                "operationId": "v1.inbound.msg",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "inbound_token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The event type's name",
                        "in": "query",
                        "name": "event_type",
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Handle Inbound",
                "tags": [
                    "Inbound"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/inbound/rotate-url": {
            "post": {
                "description": "Invalidates the previous inbound url (if one exists), producing a new inbound\nURL for this app.",
                "operationId": "v1.inbound.rotate-url",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RotatedUrlOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Url",
                "tags": [
                    "Inbound"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/integration": {
            "get": {
                "description": "List the application's integrations.",
                "operationId": "v1.integration.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_IntegrationOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Integrations",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.integration.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.integration.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.integration.list(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.integration.list(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Integration.List(ctx, \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.integration.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIntegration().list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.integration.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .integration()\n    .list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(), None)\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Integration.List(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix integration list \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/integration' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an integration.",
                "operationId": "v1.integration.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.integration.create(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  name: \"Example Integration\",\n  featureFlags: [],\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.integration.create(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  name: \"Example Integration\",\n  featureFlags: [],\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.integration.create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    IntegrationIn(\n        name=\"Example Integration\",\n        feature_flags=[],\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.integration.create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    IntegrationIn(\n        name=\"Example Integration\",\n        feature_flags=[],\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Integration.Create(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tIntegrationIn{Name: \"Example Integration\", FeatureFlags: []string{}},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.integration.create(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        IntegrationIn(name = \"Example Integration\", featureFlags = setOf()),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIntegration()\n        .create(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new IntegrationIn().name(\"Example Integration\").featureFlags(Set.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.integration.create(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {name: \"Example Integration\", featureFlags: []})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .integration()\n    .create(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        IntegrationIn {\n            name: \"Example Integration\".to_string(),\n            feature_flags: Some(vec![]),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Integration.Create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new IntegrationIn { Name = \"Example Integration\", FeatureFlags = [] }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix integration create \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"featureFlags\": [],\n    \"name\": \"Example Integration\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/integration' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"featureFlags\": [],\n    \"name\": \"Example Integration\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}": {
            "delete": {
                "description": "Delete an integration.",
                "operationId": "v1.integration.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.integration.delete(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.integration.delete(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.integration.delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.integration.delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Integration.Delete(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.integration.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIntegration()\n        .delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.integration.delete(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.integration()\n    .delete(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Integration.Delete(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix integration delete \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/integration/integ_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an integration.",
                "operationId": "v1.integration.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.integration.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.integration.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.integration.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.integration.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Integration.Get(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.integration.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIntegration()\n        .get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.integration.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .integration()\n    .get(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Integration.Get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix integration get \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/integration/integ_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Update an integration.",
                "operationId": "v1.integration.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.integration.update(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  {\n    name: \"Example Integration\",\n    featureFlags: [],\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.integration.update(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  {\n    name: \"Example Integration\",\n    featureFlags: [],\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.integration.update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    IntegrationUpdate(\n        name=\"Example Integration\",\n        feature_flags=[],\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.integration.update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    IntegrationUpdate(\n        name=\"Example Integration\",\n        feature_flags=[],\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Integration.Update(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tIntegrationUpdate{Name: \"Example Integration\", FeatureFlags: []string{}},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.integration.update(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        IntegrationUpdate(name = \"Example Integration\", featureFlags = setOf()),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIntegration()\n        .update(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new IntegrationUpdate().name(\"Example Integration\").featureFlags(Set.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .integration\n  .update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    {name: \"Example Integration\", featureFlags: []}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .integration()\n    .update(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        IntegrationUpdate {\n            name: \"Example Integration\".to_string(),\n            feature_flags: Some(vec![]),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Integration.Update(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new IntegrationUpdate { Name = \"Example Integration\", FeatureFlags = [] }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix integration update \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"featureFlags\": [],\n    \"name\": \"Example Integration\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/integration/integ_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"featureFlags\": [],\n    \"name\": \"Example Integration\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}/key": {
            "get": {
                "deprecated": true,
                "description": "Get an integration's key.",
                "operationId": "v1.integration.get-key",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationKeyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Integration Key",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.integration.getKey(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.integration.getKey(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.integration.get_key(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.integration.get_key(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Integration.GetKey(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.integration.getKey(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIntegration()\n        .getKey(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.integration.get_key(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .integration()\n    .get_key(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Integration.GetKey(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix integration get-key \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/integration/integ_1srOrx2ZWZBpBUvZwXKQmoEYga2/key' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}/key/rotate": {
            "post": {
                "description": "Rotate the integration's key. The previous key will be immediately revoked.",
                "operationId": "v1.integration.rotate-key",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Integration's ID.",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The Integration's ID.",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^integ_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationKeyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Integration Key",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.integration.rotateKey(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.integration.rotateKey(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.integration.rotate_key(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.integration.rotate_key(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Integration.RotateKey(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.integration.rotateKey(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIntegration()\n        .rotateKey(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.integration.rotate_key(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .integration()\n    .rotate_key(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Integration.RotateKey(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix integration rotate-key \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"integ_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/integration/integ_1srOrx2ZWZBpBUvZwXKQmoEYga2/key/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg": {
            "get": {
                "description": "List all of the application's messages.\n\nThe `before` and `after` parameters let you filter all items created before or after a certain date. These can be\nused alongside an iterator to paginate over results within a certain window.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.",
                "operationId": "v1.message.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^msg_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the channel.",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filter response based on the channel.",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created before a certain date.",
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "description": "Only include items created before a certain date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only include items created after a certain date.",
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "description": "Only include items created after a certain date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` message payloads are included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` message payloads are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter messages matching the provided tag.",
                        "in": "query",
                        "name": "tag",
                        "schema": {
                            "description": "Filter messages matching the provided tag.",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Messages",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.message.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.message.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message.list(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message.list(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Message.List(ctx, \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.message.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessage().list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.message.list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message()\n    .list(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(), None)\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.List(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message list \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Creates a new message and dispatches it to all of the application's endpoints.\n\nThe `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made.\nIf a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.\n\nThe `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types.\nMessages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.\n\nThe `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to 1MiB, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.",
                "operationId": "v1.message.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "When `true`, message payloads are included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true`, message payloads are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Payload too large"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.message.create(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  eventId: \"unique-identifier\",\n  eventType: \"user.signup\",\n  payload: { email: \"test@example.com\", type: \"user.created\", username: \"test_user\" },\n  channels: [\"project_123\", \"group_2\"],\n  application: {\n    name: \"My first application\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    metadata: {},\n  },\n  tags: [\"my_tag\", \"other\"],\n  transformationsParams: {},\n  deliverAt: new Date(\"2025-10-02T20:28:42+00:00\"),\n  payloadRetentionPeriod: 90,\n  payloadRetentionHours: 1,\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.message.create(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  eventId: \"unique-identifier\",\n  eventType: \"user.signup\",\n  payload: { email: \"test@example.com\", type: \"user.created\", username: \"test_user\" },\n  channels: [\"project_123\", \"group_2\"],\n  application: {\n    name: \"My first application\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    metadata: {},\n  },\n  tags: [\"my_tag\", \"other\"],\n  transformationsParams: {},\n  deliverAt: new Date(\"2025-10-02T20:28:42+00:00\"),\n  payloadRetentionPeriod: 90,\n  payloadRetentionHours: 1,\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message.create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    MessageIn(\n        event_id=\"unique-identifier\",\n        event_type=\"user.signup\",\n        payload={\n            \"email\": \"test@example.com\",\n            \"type\": \"user.created\",\n            \"username\": \"test_user\",\n        },\n        channels=[\n            \"project_123\",\n            \"group_2\",\n        ],\n        application=ApplicationIn(\n            name=\"My first application\",\n            rate_limit=1,\n            uid=\"unique-identifier\",\n            metadata={},\n        ),\n        tags=[\n            \"my_tag\",\n            \"other\",\n        ],\n        transformations_params={},\n        deliver_at=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        payload_retention_period=90,\n        payload_retention_hours=1,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message.create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    MessageIn(\n        event_id=\"unique-identifier\",\n        event_type=\"user.signup\",\n        payload={\n            \"email\": \"test@example.com\",\n            \"type\": \"user.created\",\n            \"username\": \"test_user\",\n        },\n        channels=[\n            \"project_123\",\n            \"group_2\",\n        ],\n        application=ApplicationIn(\n            name=\"My first application\",\n            rate_limit=1,\n            uid=\"unique-identifier\",\n            metadata={},\n        ),\n        tags=[\n            \"my_tag\",\n            \"other\",\n        ],\n        transformations_params={},\n        deliver_at=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        payload_retention_period=90,\n        payload_retention_hours=1,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Message.Create(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tMessageIn{\n\t\tEventId:   ptr(\"unique-identifier\"),\n\t\tEventType: \"user.signup\",\n\t\tPayload: map[string]any{\n\t\t\t\"email\":    \"test@example.com\",\n\t\t\t\"type\":     \"user.created\",\n\t\t\t\"username\": \"test_user\",\n\t\t},\n\t\tChannels: []string{\"project_123\", \"group_2\"},\n\t\tApplication: ptr(\n\t\t\tApplicationIn{\n\t\t\t\tName:      \"My first application\",\n\t\t\t\tRateLimit: ptr(uint16(1)),\n\t\t\t\tUid:       ptr(\"unique-identifier\"),\n\t\t\t\tMetadata:  nil,\n\t\t\t},\n\t\t),\n\t\tTags:                   []string{\"my_tag\", \"other\"},\n\t\tTransformationsParams:  nil,\n\t\tDeliverAt:              ptr(time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC)),\n\t\tPayloadRetentionPeriod: ptr(int64(90)),\n\t\tPayloadRetentionHours:  ptr(int64(1)),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.message.create(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        MessageIn(\n            eventId = \"unique-identifier\",\n            eventType = \"user.signup\",\n            payload =\n                \"{\\\"email\\\": \\\"test@example.com\\\",\\\"type\\\": \\\"user.created\\\",\\\"username\\\": \\\"test_user\\\"}\",\n            channels = setOf(\"project_123\", \"group_2\"),\n            application =\n                ApplicationIn(\n                    name = \"My first application\",\n                    rateLimit = 1u,\n                    uid = \"unique-identifier\",\n                    metadata = mapOf(),\n                ),\n            tags = setOf(\"my_tag\", \"other\"),\n            transformationsParams = mapOf(),\n            deliverAt = Instant.parse(\"2025-10-02T20:28:42+00:00\"),\n            payloadRetentionPeriod = 90,\n            payloadRetentionHours = 1,\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessage()\n        .create(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new MessageIn()\n                .eventId(\"unique-identifier\")\n                .eventType(\"user.signup\")\n                .payload(\"{\\\"email\\\": \\\"test@example.com\\\",\\\"type\\\": \\\"user.created\\\",\\\"username\\\":\"\n                    + \" \\\"test_user\\\"}\")\n                .channels(Set.of(\"project_123\", \"group_2\"))\n                .application(new ApplicationIn()\n                    .name(\"My first application\")\n                    .rateLimit(1L)\n                    .uid(\"unique-identifier\")\n                    .metadata(Map.of()))\n                .tags(Set.of(\"my_tag\", \"other\"))\n                .transformationsParams(Map.of())\n                .deliverAt(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\"))\n                .payloadRetentionPeriod(90L)\n                .payloadRetentionHours(1L));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message\n  .create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    {\n      eventId: \"unique-identifier\",\n      eventType: \"user.signup\",\n      payload: {\"email\" => \"test@example.com\", \"type\" => \"user.created\", \"username\" => \"test_user\"},\n      channels: [\"project_123\", \"group_2\"],\n      application: {name: \"My first application\", rateLimit: 1, uid: \"unique-identifier\", metadata: {}},\n      tags: [\"my_tag\", \"other\"],\n      transformationsParams: {},\n      deliverAt: \"2025-10-02T20:28:42+00:00\",\n      payloadRetentionPeriod: 90,\n      payloadRetentionHours: 1\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message()\n    .create(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        MessageIn {\n            event_id: Some(\"unique-identifier\".to_string()),\n            event_type: \"user.signup\".to_string(),\n            payload: serde_json::json!(\n                { \"email\" : \"test@example.com\", \"type\" : \"user.created\", \"username\" :\n                \"test_user\" }\n            ),\n            channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n            application: Some(ApplicationIn {\n                name: \"My first application\".to_string(),\n                rate_limit: Some(1),\n                uid: Some(\"unique-identifier\".to_string()),\n                metadata: Some(HashMap::new()),\n            }),\n            tags: Some(vec![\"my_tag\".to_string(), \"other\".to_string()]),\n            transformations_params: Some(serde_json::json!({})),\n            deliver_at: Some(\"2025-10-02T20:28:42+00:00\".to_string()),\n            payload_retention_period: Some(90),\n            payload_retention_hours: Some(1),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.Create(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new MessageIn\n    {\n        EventId = \"unique-identifier\",\n        EventType = \"user.signup\",\n        Payload = new Dictionary<string, string>\n        {\n            { \"email\", \"test@example.com\" },\n            { \"type\", \"user.created\" },\n            { \"username\", \"test_user\" },\n        },\n        Channels = [\"project_123\", \"group_2\"],\n        Application = new ApplicationIn\n        {\n            Name = \"My first application\",\n            RateLimit = 1,\n            Uid = \"unique-identifier\",\n            Metadata = [],\n        },\n        Tags = [\"my_tag\", \"other\"],\n        TransformationsParams = new Dictionary<string, string> { },\n        DeliverAt = DateTime.Parse(\"2025-10-02T20:28:42+00:00\"),\n        PayloadRetentionPeriod = 90,\n        PayloadRetentionHours = 1,\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message create \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"application\": {\n      \"metadata\": {},\n      \"name\": \"My first application\",\n      \"rateLimit\": 1,\n      \"uid\": \"unique-identifier\"\n    },\n    \"channels\": [\n      \"project_123\",\n      \"group_2\"\n    ],\n    \"deliverAt\": \"2025-10-02T20:28:42+00:00\",\n    \"eventId\": \"unique-identifier\",\n    \"eventType\": \"user.signup\",\n    \"payload\": {\n      \"email\": \"test@example.com\",\n      \"type\": \"user.created\",\n      \"username\": \"test_user\"\n    },\n    \"payloadRetentionHours\": 1,\n    \"payloadRetentionPeriod\": 90,\n    \"tags\": [\n      \"my_tag\",\n      \"other\"\n    ],\n    \"transformationsParams\": {}\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"application\": {\n      \"metadata\": {},\n      \"name\": \"My first application\",\n      \"rateLimit\": 1,\n      \"uid\": \"unique-identifier\"\n    },\n    \"channels\": [\n      \"project_123\",\n      \"group_2\"\n    ],\n    \"deliverAt\": \"2025-10-02T20:28:42+00:00\",\n    \"eventId\": \"unique-identifier\",\n    \"eventType\": \"user.signup\",\n    \"payload\": {\n      \"email\": \"test@example.com\",\n      \"type\": \"user.created\",\n      \"username\": \"test_user\"\n    },\n    \"payloadRetentionHours\": 1,\n    \"payloadRetentionPeriod\": 90,\n    \"tags\": [\n      \"my_tag\",\n      \"other\"\n    ],\n    \"transformationsParams\": {}\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/expunge-all-contents": {
            "post": {
                "description": "Delete all message payloads for the application.\n\nThis operation is only available in the <a href=\"https://svix.com/pricing\" target=\"_blank\">Enterprise</a> plan.",
                "operationId": "v1.message.expunge-all-contents",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpungeAllContentsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expunge all message contents",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.message.expungeAllContents(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.message.expungeAllContents(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message.expunge_all_contents(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message.expunge_all_contents(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Message.ExpungeAllContents(ctx, \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.message.expungeAllContents(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessage().expungeAllContents(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.message.expunge_all_contents(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message()\n    .expunge_all_contents(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(), None)\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.ExpungeAllContents(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message expunge-all-contents \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg/expunge-all-contents' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/precheck/active": {
            "post": {
                "description": "A pre-check call for `create.message` that checks whether endpoints are actively listening to\nthis message.",
                "operationId": "v1.message.precheck",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessagePrecheckIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagePrecheckOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message Precheck",
                "tags": [
                    "Message"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}": {
            "get": {
                "description": "Get a message by its ID or eventID.",
                "operationId": "v1.message.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "When `true` message payloads are included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "description": "When `true` message payloads are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Message",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.message.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.message.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Message.Get(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.message.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response =\n        svix.getMessage().get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.message.get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message()\n    .get(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.Get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message get \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg/msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}": {
            "get": {
                "description": "`msg_id`: Use a message id or a message `eventId`",
                "operationId": "v1.message-attempt.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The MessageAttempt's ID.",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The MessageAttempt's ID.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Attempt",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.messageAttempt.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n  \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.messageAttempt.get(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n  \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message_attempt.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message_attempt.get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.MessageAttempt.Get(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n\t\"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.messageAttempt.get(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n        \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessageAttempt()\n        .get(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n            \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message_attempt\n  .get(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\", \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message_attempt()\n    .get(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\".to_string(),\n        \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.MessageAttempt.Get(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message-attempt get \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\" \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg/msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f/attempt/atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content": {
            "delete": {
                "description": "Deletes the given attempt's response body.\n\nUseful when an endpoint accidentally returned sensitive content.\nThe message can't be replayed or resent once its payload has been deleted or expired.",
                "operationId": "v1.message-attempt.expunge-content",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The MessageAttempt's ID.",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The MessageAttempt's ID.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete attempt response body",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.expungeContent(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n  \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.messageAttempt.expungeContent(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n  \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message_attempt.expunge_content(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.message_attempt.expunge_content(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.MessageAttempt.ExpungeContent(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n\t\"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.messageAttempt.expungeContent(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessageAttempt()\n        .expungeContent(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n            \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message_attempt\n  .expunge_content(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message_attempt()\n    .expunge_content(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\".to_string(),\n        \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.MessageAttempt.ExpungeContent(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message-attempt expunge-content \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\" \"atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg/msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f/attempt/atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2/content' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers": {
            "get": {
                "description": "Calculate and return headers used on a given message attempt",
                "operationId": "v1.message-attempt.get-headers",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The MessageAttempt's ID.",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The MessageAttempt's ID.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Attempt Headers",
                "tags": [
                    "Message Attempt"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/content": {
            "delete": {
                "description": "Delete the given message's payload.\n\nUseful in cases when a message was accidentally sent with sensitive content.\nThe message can't be replayed or resent once its payload has been deleted or expired.",
                "operationId": "v1.message.expunge-content",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete message payload",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.message.expungeContent(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.message.expungeContent(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message.expunge_content(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.message.expunge_content(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Message.ExpungeContent(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.message.expungeContent(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessage()\n        .expungeContent(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.message.expunge_content(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message()\n    .expunge_content(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.ExpungeContent(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message expunge-content \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg/msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f/content' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/endpoint": {
            "get": {
                "description": "List endpoints attempted by a given message.\n\nAdditionally includes metadata about the latest message attempt.\nBy default, endpoints are listed in ascending order by ID.",
                "operationId": "v1.message-attempt.list-attempted-destinations",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempted Destinations",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.messageAttempt.listAttemptedDestinations(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.messageAttempt.listAttemptedDestinations(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message_attempt.list_attempted_destinations(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message_attempt.list_attempted_destinations(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.MessageAttempt.ListAttemptedDestinations(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.messageAttempt.listAttemptedDestinations(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessageAttempt()\n        .listAttemptedDestinations(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message_attempt\n  .list_attempted_destinations(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message_attempt()\n    .list_attempted_destinations(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.MessageAttempt.ListAttemptedDestinations(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message-attempt list-attempted-destinations \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg/msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend": {
            "post": {
                "description": "Resend a message to the specified endpoint.",
                "operationId": "v1.message-attempt.resend",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Resend Webhook",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.resend(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.messageAttempt.resend(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message_attempt.resend(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.message_attempt.resend(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.MessageAttempt.Resend(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.messageAttempt.resend(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessageAttempt()\n        .resend(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message_attempt\n  .resend(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message_attempt()\n    .resend(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.MessageAttempt.Resend(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message-attempt resend \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/msg/msg_33ZHzkmDazsPr4mDUsdzXJrGQ1f/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/resend' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/raw": {
            "get": {
                "description": "Get a message raw payload by its ID or eventID.",
                "operationId": "v1.message.get-raw-payload",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Message's ID or UID.",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The Message's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageRawPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Raw Message Payload",
                "tags": [
                    "Message"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/patch_alert_email": {
            "patch": {
                "description": "Patch the alert email for an application.",
                "operationId": "v1.application.patch-alert-email",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertEmailPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Alert Email",
                "tags": [
                    "Application"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/poller/{sink_id}": {
            "get": {
                "description": "Reads the stream of created messages for an application, filtered on the Sink's event types and Channels.",
                "operationId": "v1.message.poller.poll",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filters messages sent with this event type (optional).",
                        "in": "query",
                        "name": "event_type",
                        "schema": {
                            "description": "Filters messages sent with this event type (optional).",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filters messages sent with this channel (optional).",
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "description": "Filters messages sent with this channel (optional).",
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollingEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Poll",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.message.poller.poll(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.message.poller.poll(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message.poller.poll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message.poller.poll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Message.Poller.Poll(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.message.poller.poll(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessage()\n        .getPoller()\n        .poll(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.message.poller.poll(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message()\n    .poller()\n    .poll(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.Poller.Poll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message poller poll \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/poller/sink_31Dc11sPYY9aLDkwPuGMa' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/poller/{sink_id}/consumer/{consumer_id}": {
            "get": {
                "description": "Reads the stream of created messages for an application, filtered on the Sink's event types and\nChannels, using server-managed iterator tracking.",
                "operationId": "v1.message.poller.consumer-poll",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "consumer_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollingEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Consumer Poll",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.message.poller.consumerPoll(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  \"consumer_id\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.message.poller.consumerPoll(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  \"consumer_id\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message.poller.consumer_poll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    \"consumer_id\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message.poller.consumer_poll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    \"consumer_id\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Message.Poller.ConsumerPoll(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\t\"consumer_id\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.message.poller.consumerPoll(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        \"consumer_id\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessage()\n        .getPoller()\n        .consumerPoll(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"sink_31Dc11sPYY9aLDkwPuGMa\", \"consumer_id\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message\n  .poller\n  .consumer_poll(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", \"sink_31Dc11sPYY9aLDkwPuGMa\", \"consumer_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message()\n    .poller()\n    .consumer_poll(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        \"consumer_id\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.Poller.ConsumerPoll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    \"consumer_id\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message poller consumer-poll \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"sink_31Dc11sPYY9aLDkwPuGMa\" \"consumer_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/poller/sink_31Dc11sPYY9aLDkwPuGMa/consumer/consumer_id' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/poller/{sink_id}/consumer/{consumer_id}/seek": {
            "post": {
                "description": "Sets the starting offset for the consumer of a polling endpoint.",
                "operationId": "v1.message.poller.consumer-seek",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "consumer_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollingEndpointConsumerSeekIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollingEndpointConsumerSeekOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Consumer Seek",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.message.poller.consumerSeek(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  \"consumer_id\",\n  {\n    after: new Date(\"2025-10-02T20:28:42+00:00\"),\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.message.poller.consumerSeek(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  \"consumer_id\",\n  {\n    after: new Date(\"2025-10-02T20:28:42+00:00\"),\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.message.poller.consumer_seek(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    \"consumer_id\",\n    PollingEndpointConsumerSeekIn(\n        after=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.message.poller.consumer_seek(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    \"consumer_id\",\n    PollingEndpointConsumerSeekIn(\n        after=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Message.Poller.ConsumerSeek(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\t\"consumer_id\",\n\tPollingEndpointConsumerSeekIn{After: time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC)},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.message.poller.consumerSeek(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        \"consumer_id\",\n        PollingEndpointConsumerSeekIn(after = Instant.parse(\"2025-10-02T20:28:42+00:00\")),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getMessage()\n        .getPoller()\n        .consumerSeek(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            \"sink_31Dc11sPYY9aLDkwPuGMa\",\n            \"consumer_id\",\n            new PollingEndpointConsumerSeekIn()\n                .after(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\")));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .message\n  .poller\n  .consumer_seek(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    \"consumer_id\",\n    {after: \"2025-10-02T20:28:42+00:00\"}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .message()\n    .poller()\n    .consumer_seek(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        \"consumer_id\".to_string(),\n        PollingEndpointConsumerSeekIn {\n            after: \"2025-10-02T20:28:42+00:00\".to_string(),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Message.Poller.ConsumerSeek(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    \"consumer_id\",\n    new PollingEndpointConsumerSeekIn { After = DateTime.Parse(\"2025-10-02T20:28:42+00:00\") }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix message poller consumer-seek \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" \"sink_31Dc11sPYY9aLDkwPuGMa\" \"consumer_id\" '{\n    \"after\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/poller/sink_31Dc11sPYY9aLDkwPuGMa/consumer/consumer_id/seek' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"after\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/sink": {
            "get": {
                "description": "List the application's sinks.",
                "operationId": "v1.sink.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_SinkOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Sinks",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "post": {
                "description": "Create a new sink for the application.",
                "operationId": "v1.sink.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Sink",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/sink/{sink_id}": {
            "get": {
                "description": "Get a sink.",
                "operationId": "v1.sink.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink",
                "tags": [
                    "Endpoint"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stats": {
            "get": {
                "description": "Get basic statistics for the application.",
                "operationId": "v1.application.get-stats",
                "parameters": [
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "since",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "until",
                        "required": true,
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationStats"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Stats",
                "tags": [
                    "Application"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink": {
            "get": {
                "description": "List of all the stream's sinks.",
                "operationId": "v1.app.stream.sink.list",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 27,
                            "minLength": 27,
                            "nullable": true,
                            "pattern": "^sink_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamSinkOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Sinks",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "post": {
                "description": "Creates a new sink.",
                "operationId": "v1.app.stream.sink.create",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}": {
            "delete": {
                "description": "Delete a sink.",
                "operationId": "v1.app.stream.sink.delete",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "get": {
                "description": "Get a sink by id or uid.",
                "operationId": "v1.app.stream.sink.get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "patch": {
                "description": "Partially update a sink.",
                "operationId": "v1.app.stream.sink.patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Update a sink.",
                "operationId": "v1.app.stream.sink.update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/force-retry": {
            "post": {
                "description": "Forces a Sink to retry immediately (if dispatch is paused)",
                "operationId": "v1.app.stream.sink.force-retry",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Force Retry Sink",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/headers": {
            "get": {
                "description": "Get the HTTP sink headers",
                "operationId": "v1.app.stream.sink.headers-get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "patch": {
                "description": "Patch the HTTP sink headers",
                "operationId": "v1.app.stream.sink.headers-patch",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HttpSinkHeadersPatchIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/last-acked-event": {
            "get": {
                "description": "Get the latest event acked from the stream",
                "operationId": "v1.app.stream.sink.get-last-acked-event",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Last Acked Event",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/next-event": {
            "get": {
                "description": "Get the oldest event that has not been acked by the sink",
                "operationId": "v1.app.stream.sink.next-event",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Next Stream Sink Event",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/secret": {
            "get": {
                "description": "Get the sink's signing secret (only supported for http sinks)\n\nThis is used to verify the authenticity of the delivery\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.app.stream.sink.get-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/secret/rotate": {
            "post": {
                "description": "Rotates the signing secret (only supported for http sinks).",
                "operationId": "v1.app.stream.sink.rotate-secret",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointSecretRotateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/skip": {
            "post": {
                "description": "Skip the last n events from the sink",
                "operationId": "v1.app.stream.sink.skip",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SkipParams"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Skip N Events",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/app/{app_id}/stream/sink/{sink_id}/transformation": {
            "get": {
                "description": "Get the transformation code associated with this endpoint.",
                "operationId": "v1.app.stream.sink-transformation-get",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this sink.",
                "operationId": "v1.app.stream.sink.transformation-partial-update",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SinkTransformIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Set Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/app-portal-access/{app_id}": {
            "post": {
                "description": "Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.",
                "operationId": "v1.authentication.app-portal-access",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppPortalAccessIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppPortalAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Consumer App Portal Access",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.authentication.appPortalAccess(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  {\n    application: {\n      name: \"My first application\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      metadata: {},\n    },\n    readOnly: true,\n    capabilities: [],\n    featureFlags: [],\n    expiry: 1,\n    sessionId: \"user_1FB8\",\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.authentication.appPortalAccess(\n  \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n  {\n    application: {\n      name: \"My first application\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      metadata: {},\n    },\n    readOnly: true,\n    capabilities: [],\n    featureFlags: [],\n    expiry: 1,\n    sessionId: \"user_1FB8\",\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.authentication.app_portal_access(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    AppPortalAccessIn(\n        application=ApplicationIn(\n            name=\"My first application\",\n            rate_limit=1,\n            uid=\"unique-identifier\",\n            metadata={},\n        ),\n        read_only=True,\n        capabilities=[],\n        feature_flags=[],\n        expiry=1,\n        session_id=\"user_1FB8\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.authentication.app_portal_access(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    AppPortalAccessIn(\n        application=ApplicationIn(\n            name=\"My first application\",\n            rate_limit=1,\n            uid=\"unique-identifier\",\n            metadata={},\n        ),\n        read_only=True,\n        capabilities=[],\n        feature_flags=[],\n        expiry=1,\n        session_id=\"user_1FB8\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Authentication.AppPortalAccess(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tAppPortalAccessIn{\n\t\tApplication: ptr(\n\t\t\tApplicationIn{\n\t\t\t\tName:      \"My first application\",\n\t\t\t\tRateLimit: ptr(uint16(1)),\n\t\t\t\tUid:       ptr(\"unique-identifier\"),\n\t\t\t\tMetadata:  nil,\n\t\t\t},\n\t\t),\n\t\tReadOnly:     ptr(true),\n\t\tCapabilities: []AppPortalCapability{\"ViewBase\", \"ViewEndpointSecret\"},\n\t\tFeatureFlags: []string{},\n\t\tExpiry:       ptr(uint64(1)),\n\t\tSessionId:    ptr(\"user_1FB8\"),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.authentication.appPortalAccess(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n        AppPortalAccessIn(\n            application =\n                ApplicationIn(\n                    name = \"My first application\",\n                    rateLimit = 1u,\n                    uid = \"unique-identifier\",\n                    metadata = mapOf(),\n                ),\n            readOnly = true,\n            capabilities =\n                setOf(AppPortalCapability.VIEW_BASE, AppPortalCapability.VIEW_ENDPOINT_SECRET),\n            featureFlags = setOf(),\n            expiry = 1u,\n            sessionId = \"user_1FB8\",\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getAuthentication()\n        .appPortalAccess(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new AppPortalAccessIn()\n                .application(new ApplicationIn()\n                    .name(\"My first application\")\n                    .rateLimit(1L)\n                    .uid(\"unique-identifier\")\n                    .metadata(Map.of()))\n                .readOnly(true)\n                .capabilities(\n                    Set.of(AppPortalCapability.VIEW_BASE, AppPortalCapability.VIEW_ENDPOINT_SECRET))\n                .featureFlags(Set.of())\n                .expiry(1L)\n                .sessionId(\"user_1FB8\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .authentication\n  .app_portal_access(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    {\n      application: {name: \"My first application\", rateLimit: 1, uid: \"unique-identifier\", metadata: {}},\n      readOnly: true,\n      capabilities: [\"ViewBase\", \"ViewEndpointSecret\"],\n      featureFlags: [],\n      expiry: 1,\n      sessionId: \"user_1FB8\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .authentication()\n    .app_portal_access(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        AppPortalAccessIn {\n            application: Some(ApplicationIn {\n                name: \"My first application\".to_string(),\n                rate_limit: Some(1),\n                uid: Some(\"unique-identifier\".to_string()),\n                metadata: Some(HashMap::new()),\n            }),\n            read_only: Some(true),\n            capabilities: Some(vec![]),\n            feature_flags: Some(vec![]),\n            expiry: Some(1),\n            session_id: Some(\"user_1FB8\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Authentication.AppPortalAccess(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new AppPortalAccessIn\n    {\n        Application = new ApplicationIn\n        {\n            Name = \"My first application\",\n            RateLimit = 1,\n            Uid = \"unique-identifier\",\n            Metadata = [],\n        },\n        ReadOnly = true,\n        Capabilities = [AppPortalCapability.ViewBase, AppPortalCapability.ViewEndpointSecret],\n        FeatureFlags = [],\n        Expiry = 1,\n        SessionId = \"user_1FB8\",\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix authentication app-portal-access \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"application\": {\n      \"metadata\": {},\n      \"name\": \"My first application\",\n      \"rateLimit\": 1,\n      \"uid\": \"unique-identifier\"\n    },\n    \"capabilities\": [\n      \"ViewBase\",\n      \"ViewEndpointSecret\"\n    ],\n    \"expiry\": 1,\n    \"featureFlags\": [],\n    \"readOnly\": true,\n    \"sessionId\": \"user_1FB8\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app-portal-access/app_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"application\": {\n      \"metadata\": {},\n      \"name\": \"My first application\",\n      \"rateLimit\": 1,\n      \"uid\": \"unique-identifier\"\n    },\n    \"capabilities\": [\n      \"ViewBase\",\n      \"ViewEndpointSecret\"\n    ],\n    \"expiry\": 1,\n    \"featureFlags\": [],\n    \"readOnly\": true,\n    \"sessionId\": \"user_1FB8\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/auth/app/{app_id}/create-message-token": {
            "post": {
                "description": "Create a new access token that only allows creating messages inside this application.",
                "operationId": "v1.authentication.create-message-token",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Cmg Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/app/{app_id}/expire-all": {
            "post": {
                "description": "Expire all of the tokens associated with a specific application.",
                "operationId": "v1.authentication.expire-all",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationTokenExpireIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expire All",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.expireAll(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  expiry: 60,\n  sessionIds: [],\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.authentication.expireAll(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {\n  expiry: 60,\n  sessionIds: [],\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.authentication.expire_all(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    ApplicationTokenExpireIn(\n        expiry=60,\n        session_ids=[],\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.authentication.expire_all(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    ApplicationTokenExpireIn(\n        expiry=60,\n        session_ids=[],\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Authentication.ExpireAll(\n\tctx,\n\t\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n\tApplicationTokenExpireIn{Expiry: ptr(int64(60)), SessionIds: []string{}},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.authentication.expireAll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    ApplicationTokenExpireIn(expiry = 60, sessionIds = listOf()),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getAuthentication()\n        .expireAll(\n            \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n            new ApplicationTokenExpireIn().expiry(60L).sessionIds(List.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.authentication.expire_all(\"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\", {expiry: 60, sessionIds: []})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.authentication()\n    .expire_all(\n        \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string(),\n        ApplicationTokenExpireIn {\n            expiry: Some(60),\n            session_ids: Some(vec![]),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Authentication.ExpireAll(\n    \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n    new ApplicationTokenExpireIn { Expiry = 60, SessionIds = [] }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix authentication expire-all \"app_1srOrx2ZWZBpBUvZwXKQmoEYga2\" '{\n    \"expiry\": 60,\n    \"sessionIds\": []\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app/app_1srOrx2ZWZBpBUvZwXKQmoEYga2/expire-all' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"expiry\": 60,\n    \"sessionIds\": []\n  }'"
                    }
                ]
            }
        },
        "/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token": {
            "get": {
                "description": "Get the current auth token for the poller.",
                "operationId": "v1.authentication.get-poller-token",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Poller Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token/rotate": {
            "post": {
                "description": "Create a new auth token that can for the poller API.",
                "operationId": "v1.authentication.rotate-poller-token",
                "parameters": [
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RotatePollerTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Poller Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logout an app token.\n\nTrying to log out other tokens will fail.",
                "operationId": "v1.authentication.logout",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Logout",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.logout();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.authentication.logout();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.authentication.logout()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.authentication.logout()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Authentication.Logout(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.authentication.logout()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getAuthentication().logout();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.authentication.logout"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.authentication().logout(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Authentication.Logout();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix authentication logout"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/logout' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            }
        },
        "/api/v1/auth/one-time-token": {
            "post": {
                "description": "This is a one time token.",
                "operationId": "v1.authentication.exchange-one-time-token",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OneTimeTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OneTimeTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Exchange One Time Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/org-group-admin-token": {
            "get": {
                "description": "List all org group API tokens.",
                "operationId": "v1.authentication.org-group-admin-token.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_GlobalApiTokenCensoredOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Org Group Tokens",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "post": {
                "description": "Create a new auth token that can be used for all operations that aren't downstream for a app_id (so no apps, endpoints, messages, attempts, etc)",
                "operationId": "v1.authentication.org-group-admin-token.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Org Group Admin Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/org-group-admin-token/{key_id}": {
            "put": {
                "description": "Get the organization's settings (with dashboard-only fields exposed).",
                "operationId": "v1.authentication.org-group-admin-token.update",
                "parameters": [
                    {
                        "description": "The GlobalApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The GlobalApplicationToken's ID.",
                            "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 38,
                            "minLength": 38,
                            "pattern": "^global_key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalApiTokenCensoredOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Org Group Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/org-group-admin-token/{key_id}/expire": {
            "post": {
                "description": "Expire the selected API Token.",
                "operationId": "v1.authentication.org-group-admin-token.expire",
                "parameters": [
                    {
                        "description": "The GlobalApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The GlobalApplicationToken's ID.",
                            "example": "global_key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 38,
                            "minLength": 38,
                            "pattern": "^global_key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenExpireIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expire Org Group Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/auth/stream-portal-access/{stream_id}": {
            "post": {
                "description": "Use this function to get magic links (and authentication codes) for connecting your users to the Stream Consumer Portal.",
                "operationId": "v1.authentication.stream-portal-access",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamPortalAccessIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppPortalAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Stream Portal Access",
                "tags": [
                    "Stream Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.authentication.streamPortalAccess(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  {\n    featureFlags: [],\n    expiry: 1,\n    sessionId: \"user_1FB8\",\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.authentication.streamPortalAccess(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  {\n    featureFlags: [],\n    expiry: 1,\n    sessionId: \"user_1FB8\",\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.authentication.stream_portal_access(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamPortalAccessIn(\n        feature_flags=[],\n        expiry=1,\n        session_id=\"user_1FB8\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.authentication.stream_portal_access(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamPortalAccessIn(\n        feature_flags=[],\n        expiry=1,\n        session_id=\"user_1FB8\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Authentication.StreamPortalAccess(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\tStreamPortalAccessIn{\n\t\tFeatureFlags: []string{},\n\t\tExpiry:       ptr(uint64(1)),\n\t\tSessionId:    ptr(\"user_1FB8\"),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.authentication.streamPortalAccess(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        StreamPortalAccessIn(featureFlags = setOf(), expiry = 1u, sessionId = \"user_1FB8\"),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getAuthentication()\n        .streamPortalAccess(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            new StreamPortalAccessIn().featureFlags(Set.of()).expiry(1L).sessionId(\"user_1FB8\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .authentication\n  .stream_portal_access(\"strm_31Dc0DD72P5AddYUguyBd\", {featureFlags: [], expiry: 1, sessionId: \"user_1FB8\"})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .authentication()\n    .stream_portal_access(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        StreamPortalAccessIn {\n            feature_flags: Some(vec![]),\n            expiry: Some(1),\n            session_id: Some(\"user_1FB8\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Authentication.StreamPortalAccess(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    new StreamPortalAccessIn\n    {\n        FeatureFlags = [],\n        Expiry = 1,\n        SessionId = \"user_1FB8\",\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix authentication stream-portal-access \"strm_31Dc0DD72P5AddYUguyBd\" '{\n    \"expiry\": 1,\n    \"featureFlags\": [],\n    \"sessionId\": \"user_1FB8\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/stream-portal-access/strm_31Dc0DD72P5AddYUguyBd' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"expiry\": 1,\n    \"featureFlags\": [],\n    \"sessionId\": \"user_1FB8\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/auth/stream/{stream_id}/sink/{sink_id}/poller/token": {
            "get": {
                "description": "Get the current auth token for the stream poller.",
                "operationId": "v1.authentication.get-stream-poller-token",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Poller Token",
                "tags": [
                    "Stream Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.authentication.getStreamPollerToken(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.authentication.getStreamPollerToken(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.authentication.get_stream_poller_token(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.authentication.get_stream_poller_token(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Authentication.GetStreamPollerToken(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.authentication.getStreamPollerToken(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getAuthentication()\n        .getStreamPollerToken(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.authentication.get_stream_poller_token(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .authentication()\n    .get_stream_poller_token(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Authentication.GetStreamPollerToken(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix authentication get-stream-poller-token \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/auth/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/poller/token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/auth/stream/{stream_id}/sink/{sink_id}/poller/token/rotate": {
            "post": {
                "description": "Create a new auth token for the stream poller API.",
                "operationId": "v1.authentication.rotate-stream-poller-token",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RotatePollerTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Poller Token",
                "tags": [
                    "Stream Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.authentication.rotateStreamPollerToken(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    expiry: 1,\n    oldTokenExpiry: 1,\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.authentication.rotateStreamPollerToken(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    expiry: 1,\n    oldTokenExpiry: 1,\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.authentication.rotate_stream_poller_token(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    RotatePollerTokenIn(\n        expiry=1,\n        old_token_expiry=1,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.authentication.rotate_stream_poller_token(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    RotatePollerTokenIn(\n        expiry=1,\n        old_token_expiry=1,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Authentication.RotateStreamPollerToken(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tRotatePollerTokenIn{Expiry: ptr(int64(1)), OldTokenExpiry: ptr(int64(1))},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.authentication.rotateStreamPollerToken(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        RotatePollerTokenIn(expiry = 1, oldTokenExpiry = 1),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getAuthentication()\n        .rotateStreamPollerToken(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            \"sink_31Dc11sPYY9aLDkwPuGMa\",\n            new RotatePollerTokenIn().expiry(1L).oldTokenExpiry(1L));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .authentication\n  .rotate_stream_poller_token(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    {expiry: 1, oldTokenExpiry: 1}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .authentication()\n    .rotate_stream_poller_token(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        RotatePollerTokenIn {\n            expiry: Some(1),\n            old_token_expiry: Some(1),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Authentication.RotateStreamPollerToken(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    new RotatePollerTokenIn { Expiry = 1, OldTokenExpiry = 1 }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix authentication rotate-stream-poller-token \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\" '{\n    \"expiry\": 1,\n    \"oldTokenExpiry\": 1\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/poller/token/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"expiry\": 1,\n    \"oldTokenExpiry\": 1\n  }'"
                    }
                ]
            }
        },
        "/api/v1/background-task": {
            "get": {
                "description": "List background tasks executed in the past 90 days.",
                "operationId": "v1.background-task.list",
                "parameters": [
                    {
                        "description": "Filter the response based on the status.",
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/BackgroundTaskStatus",
                            "description": "Filter the response based on the status.",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the response based on the type.",
                        "in": "query",
                        "name": "task",
                        "schema": {
                            "$ref": "#/components/schemas/BackgroundTaskType",
                            "description": "Filter the response based on the type.",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "nullable": true,
                            "pattern": "^qtask_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_BackgroundTaskOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Background Tasks",
                "tags": [
                    "Background Task"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.backgroundTask.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.backgroundTask.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.background_task.list()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.background_task.list()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.BackgroundTask.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.backgroundTask.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getBackgroundTask().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.background_task.list"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.background_task().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.BackgroundTask.List();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix background-task list"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/background-task' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/background-task/{task_id}": {
            "get": {
                "description": "Get a background task by ID.",
                "operationId": "v1.background-task.get",
                "parameters": [
                    {
                        "description": "The QueueBackgroundTask's ID.",
                        "in": "path",
                        "name": "task_id",
                        "required": true,
                        "schema": {
                            "description": "The QueueBackgroundTask's ID.",
                            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 33,
                            "minLength": 33,
                            "pattern": "^qtask_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackgroundTaskOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Background Task",
                "tags": [
                    "Background Task"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.backgroundTask.get(\"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.backgroundTask.get(\"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.background_task.get(\n    \"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.background_task.get(\n    \"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.BackgroundTask.Get(ctx, \"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.backgroundTask.get(\"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getBackgroundTask().get(\"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.background_task.get(\"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .background_task()\n    .get(\"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.BackgroundTask.Get(\"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix background-task get \"qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/background-task/qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/connector": {
            "get": {
                "description": "List all transformation templates for an application.",
                "operationId": "v1.beta.connector.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "nullable": true,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ConnectorOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Connectors",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "post": {
                "description": "Create a new connector.",
                "operationId": "v1.beta.connector.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectorIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/connector/generate": {
            "post": {
                "description": "Use OpenAI's Completion API to generate code for a connector.",
                "operationId": "v1.beta.connector.generate",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenerateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Generate",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/connector/oauth/discord": {
            "post": {
                "description": "Get Discord Incoming webhook URL.",
                "operationId": "v1.beta.connector.oauth.discord",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthPayloadIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomingWebhookPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Authorize Discord",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/connector/oauth/hubspot": {
            "post": {
                "description": "Get Hubspot access token using authorization code.",
                "operationId": "v1.beta.connector.oauth.hubspot",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthPayloadIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Authorize Hubspot",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/connector/oauth/slack": {
            "post": {
                "description": "Get Slack Incoming webhook URL.",
                "operationId": "v1.beta.connector.oauth.slack",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthPayloadIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomingWebhookPayloadOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Authorize Slack",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/connector/simulate": {
            "post": {
                "description": "Simulate running the transformation on the payload and code.",
                "operationId": "v1.beta.connector.simulate",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransformationSimulateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransformationSimulateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Simulate",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/connector/{connector_id}": {
            "delete": {
                "description": "Delete a connector.",
                "operationId": "v1.beta.connector.delete",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "connector_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "get": {
                "description": "Get a connector.",
                "operationId": "v1.beta.connector.get",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "connector_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "patch": {
                "description": "Partially update a connector.",
                "operationId": "v1.beta.connector.patch",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "connector_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectorPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Update a connector.",
                "operationId": "v1.beta.connector.update",
                "parameters": [
                    {
                        "description": "The Connector's ID.",
                        "in": "path",
                        "name": "connector_id",
                        "required": true,
                        "schema": {
                            "description": "The Connector's ID.",
                            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 34,
                            "minLength": 34,
                            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectorUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectorOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Connector",
                "tags": [
                    "Transformation Template"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/environment/export": {
            "post": {
                "description": "Download a JSON file containing all org-settings and event types.",
                "operationId": "v1.environment.export",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Export Environment Configuration",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.environment.export();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.environment.export();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.environment.export()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.environment.export()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Environment.Export(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.environment.export()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEnvironment().export();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.environment.export"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.environment().export(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Environment.Export();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix environment export"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/environment/export' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/environment/import": {
            "post": {
                "description": "Import a configuration into the active organization.\n\nIt doesn't delete anything, only adds / updates what was passed to it.",
                "operationId": "v1.environment.import",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Import Environment Configuration",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.environment.import({\n  eventTypes: [],\n  settings: {},\n  connectors: [],\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.environment.import({\n  eventTypes: [],\n  settings: {},\n  connectors: [],\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.environment.import_(\n    EnvironmentIn(\n        event_types=[],\n        settings={},\n        connectors=[],\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.environment.import_(\n    EnvironmentIn(\n        event_types=[],\n        settings={},\n        connectors=[],\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Environment.Import(\n\tctx,\n\tEnvironmentIn{EventTypes: []EventTypeIn{}, Settings: nil, Connectors: []ConnectorIn{}},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.environment.import(\n    EnvironmentIn(eventTypes = listOf(), settings = mapOf(), connectors = listOf())\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEnvironment()\n        .import_(\n            new EnvironmentIn().eventTypes(List.of()).settings(Map.of()).connectors(List.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.environment.import({eventTypes: [], settings: {}, connectors: []})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.environment()\n    .import(\n        EnvironmentIn {\n            event_types: Some(vec![]),\n            settings: Some(serde_json::json!({})),\n            connectors: Some(vec![]),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Environment.Import(\n    new EnvironmentIn\n    {\n        EventTypes = [],\n        Settings = new Dictionary<string, string> { },\n        Connectors = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix environment import '{\n    \"connectors\": [],\n    \"eventTypes\": [],\n    \"settings\": {}\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/environment/import' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"connectors\": [],\n    \"eventTypes\": [],\n    \"settings\": {}\n  }'"
                    }
                ]
            }
        },
        "/api/v1/environment/settings": {
            "get": {
                "description": "Get the environment's settings.",
                "operationId": "v1.environment.get-settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentSettingsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Org Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/event-type": {
            "get": {
                "description": "Return the list of event types.",
                "operationId": "v1.event-type.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` archived (deleted but not expunged) items are included in the response.",
                        "in": "query",
                        "name": "include_archived",
                        "schema": {
                            "default": false,
                            "description": "When `true` archived (deleted but not expunged) items are included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When `true` the full item (including the schema) is included in the response.",
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": false,
                            "description": "When `true` the full item (including the schema) is included in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EventTypeOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Event Types",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.eventType.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.eventType.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.event_type.list()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.event_type.list()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.EventType.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.eventType.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEventType().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.event_type.list"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.event_type().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.EventType.List();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix event-type list"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create new or unarchive existing event type.\n\nUnarchiving an event type will allow endpoints to filter on it and messages to be sent with it.\nEndpoints filtering on the event type before archival will continue to filter on it.\nThis operation does not preserve the description and schemas.",
                "operationId": "v1.event-type.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.eventType.create({\n  name: \"user.signup\",\n  description: \"A user has signed up\",\n  archived: true,\n  deprecated: true,\n  schemas: {\n    \"1\": {\n      description: \"An invoice was paid by a user\",\n      properties: {\n        invoiceId: { description: \"The invoice id\", type: \"string\" },\n        userId: { description: \"The user id\", type: \"string\" },\n      },\n      required: [\"invoiceId\", \"userId\"],\n      title: \"Invoice Paid Event\",\n      type: \"object\",\n    },\n  },\n  groupName: \"user\",\n  featureFlags: [\"cool-new-feature\"],\n  featureFlag: \"sample string\",\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.eventType.create({\n  name: \"user.signup\",\n  description: \"A user has signed up\",\n  archived: true,\n  deprecated: true,\n  schemas: {\n    \"1\": {\n      description: \"An invoice was paid by a user\",\n      properties: {\n        invoiceId: { description: \"The invoice id\", type: \"string\" },\n        userId: { description: \"The user id\", type: \"string\" },\n      },\n      required: [\"invoiceId\", \"userId\"],\n      title: \"Invoice Paid Event\",\n      type: \"object\",\n    },\n  },\n  groupName: \"user\",\n  featureFlags: [\"cool-new-feature\"],\n  featureFlag: \"sample string\",\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.event_type.create(\n    EventTypeIn(\n        name=\"user.signup\",\n        description=\"A user has signed up\",\n        archived=True,\n        deprecated=True,\n        schemas={\n            \"1\": {\n                \"description\": \"An invoice was paid by a user\",\n                \"properties\": {\n                    \"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"},\n                    \"userId\": {\"description\": \"The user id\", \"type\": \"string\"},\n                },\n                \"required\": [\"invoiceId\", \"userId\"],\n                \"title\": \"Invoice Paid Event\",\n                \"type\": \"object\",\n            }\n        },\n        group_name=\"user\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        feature_flag=\"sample string\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.event_type.create(\n    EventTypeIn(\n        name=\"user.signup\",\n        description=\"A user has signed up\",\n        archived=True,\n        deprecated=True,\n        schemas={\n            \"1\": {\n                \"description\": \"An invoice was paid by a user\",\n                \"properties\": {\n                    \"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"},\n                    \"userId\": {\"description\": \"The user id\", \"type\": \"string\"},\n                },\n                \"required\": [\"invoiceId\", \"userId\"],\n                \"title\": \"Invoice Paid Event\",\n                \"type\": \"object\",\n            }\n        },\n        group_name=\"user\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        feature_flag=\"sample string\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.EventType.Create(\n\tctx,\n\tEventTypeIn{\n\t\tName:         \"user.signup\",\n\t\tDescription:  \"A user has signed up\",\n\t\tArchived:     ptr(true),\n\t\tDeprecated:   ptr(true),\n\t\tSchemas:      nil,\n\t\tGroupName:    ptr(\"user\"),\n\t\tFeatureFlags: []string{\"cool-new-feature\"},\n\t\tFeatureFlag:  ptr(\"sample string\"),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.eventType.create(\n        EventTypeIn(\n            name = \"user.signup\",\n            description = \"A user has signed up\",\n            archived = true,\n            deprecated = true,\n            schemas = mapOf(),\n            groupName = \"user\",\n            featureFlags = setOf(\"cool-new-feature\"),\n            featureFlag = \"sample string\",\n        )\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEventType()\n        .create(new EventTypeIn()\n            .name(\"user.signup\")\n            .description(\"A user has signed up\")\n            .archived(true)\n            .deprecated(true)\n            .schemas(Map.of())\n            .groupName(\"user\")\n            .featureFlags(Set.of(\"cool-new-feature\"))\n            .featureFlag(\"sample string\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .event_type\n  .create(\n    {\n      name: \"user.signup\",\n      description: \"A user has signed up\",\n      archived: true,\n      deprecated: true,\n      schemas: {},\n      groupName: \"user\",\n      featureFlags: [\"cool-new-feature\"],\n      featureFlag: \"sample string\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .event_type()\n    .create(\n        EventTypeIn {\n            name: \"user.signup\".to_string(),\n            description: \"A user has signed up\".to_string(),\n            archived: Some(true),\n            deprecated: Some(true),\n            schemas: Some(\n                serde_json::json!(\n                    { \"1\" : { \"description\" : \"An invoice was paid by a user\",\n                    \"properties\" : { \"invoiceId\" : { \"description\" :\n                    \"The invoice id\", \"type\" : \"string\" }, \"userId\" : { \"description\"\n                    : \"The user id\", \"type\" : \"string\" } }, \"required\" :\n                    [\"invoiceId\", \"userId\"], \"title\" : \"Invoice Paid Event\", \"type\" :\n                    \"object\" } }\n                ),\n            ),\n            group_name: Some(\"user\".to_string()),\n            feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n            feature_flag: Some(\"sample string\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.EventType.Create(\n    new EventTypeIn\n    {\n        Name = \"user.signup\",\n        Description = \"A user has signed up\",\n        Archived = true,\n        Deprecated = true,\n        Schemas = new Dictionary<string, string> { },\n        GroupName = \"user\",\n        FeatureFlags = [\"cool-new-feature\"],\n        FeatureFlag = \"sample string\",\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix event-type create '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"A user has signed up\",\n    \"featureFlag\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"groupName\": \"user\",\n    \"name\": \"user.signup\",\n    \"schemas\": {\n      \"1\": {\n        \"description\": \"An invoice was paid by a user\",\n        \"properties\": {\n          \"invoiceId\": {\n            \"description\": \"The invoice id\",\n            \"type\": \"string\"\n          },\n          \"userId\": {\n            \"description\": \"The user id\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"invoiceId\",\n          \"userId\"\n        ],\n        \"title\": \"Invoice Paid Event\",\n        \"type\": \"object\"\n      }\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"A user has signed up\",\n    \"featureFlag\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"groupName\": \"user\",\n    \"name\": \"user.signup\",\n    \"schemas\": {\n      \"1\": {\n        \"description\": \"An invoice was paid by a user\",\n        \"properties\": {\n          \"invoiceId\": {\n            \"description\": \"The invoice id\",\n            \"type\": \"string\"\n          },\n          \"userId\": {\n            \"description\": \"The user id\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"invoiceId\",\n          \"userId\"\n        ],\n        \"title\": \"Invoice Paid Event\",\n        \"type\": \"object\"\n      }\n    }\n  }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/export/openapi": {
            "post": {
                "description": "Exports event type definitions based on the OpenAPI schemas associated\nwith each existing event type.",
                "operationId": "v1.event-type.export-openapi",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExportEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Event Type Export From Openapi",
                "tags": [
                    "Event Type"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/event-type/import/openapi": {
            "post": {
                "description": "Given an OpenAPI spec, create new or update existing event types.\nIf an existing `archived` event type is updated, it will be unarchived.\n\nThe importer will convert all webhooks found in the either the `webhooks` or `x-webhooks`\ntop-level.",
                "operationId": "v1.event-type.import-openapi",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeImportOpenApiIn"
                            }
                        }
                    },
                    "description": "Import a list of event types from webhooks defined in an OpenAPI spec.\n\nThe OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeImportOpenApiOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Event Type Import From Openapi",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.eventType.importOpenapi({\n  dryRun: true,\n  replaceAll: true,\n  spec: {\n    info: { title: \"Webhook Example\", version: \"1.0.0\" },\n    openapi: \"3.1.0\",\n    webhooks: {\n      \"pet.new\": {\n        post: {\n          requestBody: {\n            content: {\n              \"application/json\": {\n                schema: {\n                  properties: {\n                    id: { format: \"int64\", type: \"integer\" },\n                    name: { type: \"string\" },\n                    tag: { type: \"string\" },\n                  },\n                  required: [\"id\", \"name\"],\n                },\n              },\n            },\n            description: \"Information about a new pet in the system\",\n          },\n          responses: {\n            \"200\": {\n              description:\n                \"Return a 200 status to indicate that the data was received successfully\",\n            },\n          },\n        },\n      },\n    },\n  },\n  specRaw: \"sample string\",\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.eventType.importOpenapi({\n  dryRun: true,\n  replaceAll: true,\n  spec: {\n    info: { title: \"Webhook Example\", version: \"1.0.0\" },\n    openapi: \"3.1.0\",\n    webhooks: {\n      \"pet.new\": {\n        post: {\n          requestBody: {\n            content: {\n              \"application/json\": {\n                schema: {\n                  properties: {\n                    id: { format: \"int64\", type: \"integer\" },\n                    name: { type: \"string\" },\n                    tag: { type: \"string\" },\n                  },\n                  required: [\"id\", \"name\"],\n                },\n              },\n            },\n            description: \"Information about a new pet in the system\",\n          },\n          responses: {\n            \"200\": {\n              description:\n                \"Return a 200 status to indicate that the data was received successfully\",\n            },\n          },\n        },\n      },\n    },\n  },\n  specRaw: \"sample string\",\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.event_type.import_openapi(\n    EventTypeImportOpenApiIn(\n        dry_run=True,\n        replace_all=True,\n        spec={\n            \"info\": {\"title\": \"Webhook Example\", \"version\": \"1.0.0\"},\n            \"openapi\": \"3.1.0\",\n            \"webhooks\": {\n                \"pet.new\": {\n                    \"post\": {\n                        \"requestBody\": {\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"properties\": {\n                                            \"id\": {\n                                                \"format\": \"int64\",\n                                                \"type\": \"integer\",\n                                            },\n                                            \"name\": {\"type\": \"string\"},\n                                            \"tag\": {\"type\": \"string\"},\n                                        },\n                                        \"required\": [\"id\", \"name\"],\n                                    }\n                                }\n                            },\n                            \"description\": \"Information about a new pet in the system\",\n                        },\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Return a 200 status to indicate that the data was received successfully\"\n                            }\n                        },\n                    }\n                }\n            },\n        },\n        spec_raw=\"sample string\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.event_type.import_openapi(\n    EventTypeImportOpenApiIn(\n        dry_run=True,\n        replace_all=True,\n        spec={\n            \"info\": {\"title\": \"Webhook Example\", \"version\": \"1.0.0\"},\n            \"openapi\": \"3.1.0\",\n            \"webhooks\": {\n                \"pet.new\": {\n                    \"post\": {\n                        \"requestBody\": {\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"properties\": {\n                                            \"id\": {\n                                                \"format\": \"int64\",\n                                                \"type\": \"integer\",\n                                            },\n                                            \"name\": {\"type\": \"string\"},\n                                            \"tag\": {\"type\": \"string\"},\n                                        },\n                                        \"required\": [\"id\", \"name\"],\n                                    }\n                                }\n                            },\n                            \"description\": \"Information about a new pet in the system\",\n                        },\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Return a 200 status to indicate that the data was received successfully\"\n                            }\n                        },\n                    }\n                }\n            },\n        },\n        spec_raw=\"sample string\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.EventType.ImportOpenapi(\n\tctx,\n\tEventTypeImportOpenApiIn{\n\t\tDryRun:     ptr(true),\n\t\tReplaceAll: ptr(true),\n\t\tSpec:       nil,\n\t\tSpecRaw:    ptr(\"sample string\"),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.eventType.importOpenapi(\n        EventTypeImportOpenApiIn(\n            dryRun = true,\n            replaceAll = true,\n            spec = mapOf(),\n            specRaw = \"sample string\",\n        )\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEventType()\n        .importOpenapi(new EventTypeImportOpenApiIn()\n            .dryRun(true)\n            .replaceAll(true)\n            .spec(Map.of())\n            .specRaw(\"sample string\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.event_type.import_openapi({dryRun: true, replaceAll: true, spec: {}, specRaw: \"sample string\"})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .event_type()\n    .import_openapi(\n        EventTypeImportOpenApiIn {\n            dry_run: Some(true),\n            replace_all: Some(true),\n            spec: Some(\n                serde_json::json!(\n                    { \"info\" : { \"title\" : \"Webhook Example\", \"version\" : \"1.0.0\" },\n                    \"openapi\" : \"3.1.0\", \"webhooks\" : { \"pet.new\" : { \"post\" : {\n                    \"requestBody\" : { \"content\" : { \"application/json\" : { \"schema\" :\n                    { \"properties\" : { \"id\" : { \"format\" : \"int64\", \"type\" :\n                    \"integer\" }, \"name\" : { \"type\" : \"string\" }, \"tag\" : { \"type\" :\n                    \"string\" } }, \"required\" : [\"id\", \"name\"] } } }, \"description\" :\n                    \"Information about a new pet in the system\" }, \"responses\" : {\n                    \"200\" : { \"description\" :\n                    \"Return a 200 status to indicate that the data was received successfully\"\n                    } } } } } }\n                ),\n            ),\n            spec_raw: Some(\"sample string\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.EventType.ImportOpenapi(\n    new EventTypeImportOpenApiIn\n    {\n        DryRun = true,\n        ReplaceAll = true,\n        Spec = new Dictionary<string, string> { },\n        SpecRaw = \"sample string\",\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix event-type import-openapi '{\n    \"dryRun\": true,\n    \"replaceAll\": true,\n    \"spec\": {\n      \"info\": {\n        \"title\": \"Webhook Example\",\n        \"version\": \"1.0.0\"\n      },\n      \"openapi\": \"3.1.0\",\n      \"webhooks\": {\n        \"pet.new\": {\n          \"post\": {\n            \"requestBody\": {\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"properties\": {\n                      \"id\": {\n                        \"format\": \"int64\",\n                        \"type\": \"integer\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      },\n                      \"tag\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"id\",\n                      \"name\"\n                    ]\n                  }\n                }\n              },\n              \"description\": \"Information about a new pet in the system\"\n            },\n            \"responses\": {\n              \"200\": {\n                \"description\": \"Return a 200 status to indicate that the data was received successfully\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"specRaw\": \"sample string\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type/import/openapi' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"dryRun\": true,\n    \"replaceAll\": true,\n    \"spec\": {\n      \"info\": {\n        \"title\": \"Webhook Example\",\n        \"version\": \"1.0.0\"\n      },\n      \"openapi\": \"3.1.0\",\n      \"webhooks\": {\n        \"pet.new\": {\n          \"post\": {\n            \"requestBody\": {\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"properties\": {\n                      \"id\": {\n                        \"format\": \"int64\",\n                        \"type\": \"integer\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      },\n                      \"tag\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"id\",\n                      \"name\"\n                    ]\n                  }\n                }\n              },\n              \"description\": \"Information about a new pet in the system\"\n            },\n            \"responses\": {\n              \"200\": {\n                \"description\": \"Return a 200 status to indicate that the data was received successfully\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"specRaw\": \"sample string\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/schema/generate-example": {
            "post": {
                "description": "Generates a fake example from the given JSONSchema.",
                "operationId": "v1.event-type.generate-example",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeSchemaIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeExampleOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Generate Schema Example",
                "tags": [
                    "Event Type"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/event-type/{event_type_name}": {
            "delete": {
                "description": "Archive an event type.\n\nEndpoints already configured to filter on an event type will continue to do so after archival.\nHowever, new messages can not be sent with it and endpoints can not filter on it.\nAn event type can be unarchived with the\n[create operation](#operation/create_event_type_api_v1_event_type__post).",
                "operationId": "v1.event-type.delete",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.",
                        "in": "query",
                        "name": "expunge",
                        "schema": {
                            "default": false,
                            "description": "By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.eventType.delete(\"user.signup\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.eventType.delete(\"user.signup\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.event_type.delete(\n    \"user.signup\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.event_type.delete(\n    \"user.signup\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.EventType.Delete(ctx, \"user.signup\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.eventType.delete(\"user.signup\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEventType().delete(\"user.signup\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.event_type.delete(\"user.signup\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.event_type().delete(\"user.signup\".to_string(), None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.EventType.Delete(\"user.signup\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix event-type delete \"user.signup\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/event-type/user.signup' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an event type.",
                "operationId": "v1.event-type.get",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.eventType.get(\"user.signup\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.eventType.get(\"user.signup\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.event_type.get(\n    \"user.signup\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.event_type.get(\n    \"user.signup\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.EventType.Get(ctx, \"user.signup\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.eventType.get(\"user.signup\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEventType().get(\"user.signup\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.event_type.get(\"user.signup\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.event_type().get(\"user.signup\".to_string()).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.EventType.Get(\"user.signup\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix event-type get \"user.signup\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/event-type/user.signup' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an event type.",
                "operationId": "v1.event-type.patch",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.eventType.patch(\"user.signup\", {\n  description: \"sample string\",\n  archived: true,\n  deprecated: true,\n  schemas: {\n    description: \"An invoice was paid by a user\",\n    properties: {\n      invoiceId: { description: \"The invoice id\", type: \"string\" },\n      userId: { description: \"The user id\", type: \"string\" },\n    },\n    required: [\"invoiceId\", \"userId\"],\n    title: \"Invoice Paid Event\",\n    type: \"object\",\n  },\n  featureFlags: [\"cool-new-feature\"],\n  featureFlag: \"sample string\",\n  groupName: \"user\",\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.eventType.patch(\"user.signup\", {\n  description: \"sample string\",\n  archived: true,\n  deprecated: true,\n  schemas: {\n    description: \"An invoice was paid by a user\",\n    properties: {\n      invoiceId: { description: \"The invoice id\", type: \"string\" },\n      userId: { description: \"The user id\", type: \"string\" },\n    },\n    required: [\"invoiceId\", \"userId\"],\n    title: \"Invoice Paid Event\",\n    type: \"object\",\n  },\n  featureFlags: [\"cool-new-feature\"],\n  featureFlag: \"sample string\",\n  groupName: \"user\",\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.event_type.patch(\n    \"user.signup\",\n    EventTypePatch(\n        description=\"sample string\",\n        archived=True,\n        deprecated=True,\n        schemas={\n            \"description\": \"An invoice was paid by a user\",\n            \"properties\": {\n                \"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"},\n                \"userId\": {\"description\": \"The user id\", \"type\": \"string\"},\n            },\n            \"required\": [\"invoiceId\", \"userId\"],\n            \"title\": \"Invoice Paid Event\",\n            \"type\": \"object\",\n        },\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        feature_flag=\"sample string\",\n        group_name=\"user\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.event_type.patch(\n    \"user.signup\",\n    EventTypePatch(\n        description=\"sample string\",\n        archived=True,\n        deprecated=True,\n        schemas={\n            \"description\": \"An invoice was paid by a user\",\n            \"properties\": {\n                \"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"},\n                \"userId\": {\"description\": \"The user id\", \"type\": \"string\"},\n            },\n            \"required\": [\"invoiceId\", \"userId\"],\n            \"title\": \"Invoice Paid Event\",\n            \"type\": \"object\",\n        },\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        feature_flag=\"sample string\",\n        group_name=\"user\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.EventType.Patch(\n\tctx,\n\t\"user.signup\",\n\tEventTypePatch{\n\t\tDescription:  ptr(\"sample string\"),\n\t\tArchived:     ptr(true),\n\t\tDeprecated:   ptr(true),\n\t\tSchemas:      NewUnsetNullable[map[string]any](),\n\t\tFeatureFlags: NewNullable([]string{\"cool-new-feature\"}),\n\t\tFeatureFlag:  NewNullable(\"sample string\"),\n\t\tGroupName:    NewNullable(\"user\"),\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.eventType.patch(\n        \"user.signup\",\n        EventTypePatch(\n            description = \"sample string\",\n            archived = true,\n            deprecated = true,\n            schemas = MaybeUnset.Present(mapOf()),\n            featureFlags = MaybeUnset.Present(setOf(\"cool-new-feature\")),\n            featureFlag = MaybeUnset.Present(\"sample string\"),\n            groupName = MaybeUnset.Present(\"user\"),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEventType()\n        .patch(\n            \"user.signup\",\n            new EventTypePatch()\n                .description(\"sample string\")\n                .archived(true)\n                .deprecated(true)\n                .schemas(Map.of())\n                .featureFlags(Set.of(\"cool-new-feature\"))\n                .featureFlag(\"sample string\")\n                .groupName(\"user\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .event_type\n  .patch(\n    \"user.signup\",\n    {\n      description: \"sample string\",\n      archived: true,\n      deprecated: true,\n      schemas: {},\n      featureFlags: [\"cool-new-feature\"],\n      featureFlag: \"sample string\",\n      groupName: \"user\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .event_type()\n    .patch(\n        \"user.signup\".to_string(),\n        EventTypePatch {\n            description: Some(\"sample string\".to_string()),\n            archived: Some(true),\n            deprecated: Some(true),\n            schemas: js_option::JsOption::Some(\n                serde_json::json!(\n                    { \"description\" : \"An invoice was paid by a user\", \"properties\" :\n                    { \"invoiceId\" : { \"description\" : \"The invoice id\", \"type\" :\n                    \"string\" }, \"userId\" : { \"description\" : \"The user id\", \"type\" :\n                    \"string\" } }, \"required\" : [\"invoiceId\", \"userId\"], \"title\" :\n                    \"Invoice Paid Event\", \"type\" : \"object\" }\n                ),\n            ),\n            feature_flags: js_option::JsOption::Some(\n                vec![\"cool-new-feature\".to_string()],\n            ),\n            feature_flag: js_option::JsOption::Some(\"sample string\".to_string()),\n            group_name: js_option::JsOption::Some(\"user\".to_string()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.EventType.Patch(\n    \"user.signup\",\n    new EventTypePatch\n    {\n        Description = \"sample string\",\n        Archived = true,\n        Deprecated = true,\n        Schemas = new Dictionary<string, string> { },\n        FeatureFlags = MaybeUnset<List<string>?>.Set([\"cool-new-feature\"]),\n        FeatureFlag = \"sample string\",\n        GroupName = \"user\",\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix event-type patch \"user.signup\" '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlag\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"groupName\": \"user\",\n    \"schemas\": {\n      \"description\": \"An invoice was paid by a user\",\n      \"properties\": {\n        \"invoiceId\": {\n          \"description\": \"The invoice id\",\n          \"type\": \"string\"\n        },\n        \"userId\": {\n          \"description\": \"The user id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"invoiceId\",\n        \"userId\"\n      ],\n      \"title\": \"Invoice Paid Event\",\n      \"type\": \"object\"\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/event-type/user.signup' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlag\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"groupName\": \"user\",\n    \"schemas\": {\n      \"description\": \"An invoice was paid by a user\",\n      \"properties\": {\n        \"invoiceId\": {\n          \"description\": \"The invoice id\",\n          \"type\": \"string\"\n        },\n        \"userId\": {\n          \"description\": \"The user id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"invoiceId\",\n        \"userId\"\n      ],\n      \"title\": \"Invoice Paid Event\",\n      \"type\": \"object\"\n    }\n  }'"
                    }
                ]
            },
            "put": {
                "description": "Update an event type.",
                "operationId": "v1.event-type.update",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.eventType.update(\"user.signup\", {\n  description: \"A user has signed up\",\n  archived: true,\n  deprecated: true,\n  schemas: {\n    \"1\": {\n      description: \"An invoice was paid by a user\",\n      properties: {\n        invoiceId: { description: \"The invoice id\", type: \"string\" },\n        userId: { description: \"The user id\", type: \"string\" },\n      },\n      required: [\"invoiceId\", \"userId\"],\n      title: \"Invoice Paid Event\",\n      type: \"object\",\n    },\n  },\n  featureFlags: [\"cool-new-feature\"],\n  featureFlag: \"sample string\",\n  groupName: \"user\",\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.eventType.update(\"user.signup\", {\n  description: \"A user has signed up\",\n  archived: true,\n  deprecated: true,\n  schemas: {\n    \"1\": {\n      description: \"An invoice was paid by a user\",\n      properties: {\n        invoiceId: { description: \"The invoice id\", type: \"string\" },\n        userId: { description: \"The user id\", type: \"string\" },\n      },\n      required: [\"invoiceId\", \"userId\"],\n      title: \"Invoice Paid Event\",\n      type: \"object\",\n    },\n  },\n  featureFlags: [\"cool-new-feature\"],\n  featureFlag: \"sample string\",\n  groupName: \"user\",\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.event_type.update(\n    \"user.signup\",\n    EventTypeUpdate(\n        description=\"A user has signed up\",\n        archived=True,\n        deprecated=True,\n        schemas={\n            \"1\": {\n                \"description\": \"An invoice was paid by a user\",\n                \"properties\": {\n                    \"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"},\n                    \"userId\": {\"description\": \"The user id\", \"type\": \"string\"},\n                },\n                \"required\": [\"invoiceId\", \"userId\"],\n                \"title\": \"Invoice Paid Event\",\n                \"type\": \"object\",\n            }\n        },\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        feature_flag=\"sample string\",\n        group_name=\"user\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.event_type.update(\n    \"user.signup\",\n    EventTypeUpdate(\n        description=\"A user has signed up\",\n        archived=True,\n        deprecated=True,\n        schemas={\n            \"1\": {\n                \"description\": \"An invoice was paid by a user\",\n                \"properties\": {\n                    \"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"},\n                    \"userId\": {\"description\": \"The user id\", \"type\": \"string\"},\n                },\n                \"required\": [\"invoiceId\", \"userId\"],\n                \"title\": \"Invoice Paid Event\",\n                \"type\": \"object\",\n            }\n        },\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        feature_flag=\"sample string\",\n        group_name=\"user\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.EventType.Update(\n\tctx,\n\t\"user.signup\",\n\tEventTypeUpdate{\n\t\tDescription:  \"A user has signed up\",\n\t\tArchived:     ptr(true),\n\t\tDeprecated:   ptr(true),\n\t\tSchemas:      nil,\n\t\tFeatureFlags: []string{\"cool-new-feature\"},\n\t\tFeatureFlag:  ptr(\"sample string\"),\n\t\tGroupName:    ptr(\"user\"),\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.eventType.update(\n        \"user.signup\",\n        EventTypeUpdate(\n            description = \"A user has signed up\",\n            archived = true,\n            deprecated = true,\n            schemas = mapOf(),\n            featureFlags = setOf(\"cool-new-feature\"),\n            featureFlag = \"sample string\",\n            groupName = \"user\",\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getEventType()\n        .update(\n            \"user.signup\",\n            new EventTypeUpdate()\n                .description(\"A user has signed up\")\n                .archived(true)\n                .deprecated(true)\n                .schemas(Map.of())\n                .featureFlags(Set.of(\"cool-new-feature\"))\n                .featureFlag(\"sample string\")\n                .groupName(\"user\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .event_type\n  .update(\n    \"user.signup\",\n    {\n      description: \"A user has signed up\",\n      archived: true,\n      deprecated: true,\n      schemas: {},\n      featureFlags: [\"cool-new-feature\"],\n      featureFlag: \"sample string\",\n      groupName: \"user\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .event_type()\n    .update(\n        \"user.signup\".to_string(),\n        EventTypeUpdate {\n            description: \"A user has signed up\".to_string(),\n            archived: Some(true),\n            deprecated: Some(true),\n            schemas: Some(\n                serde_json::json!(\n                    { \"1\" : { \"description\" : \"An invoice was paid by a user\",\n                    \"properties\" : { \"invoiceId\" : { \"description\" :\n                    \"The invoice id\", \"type\" : \"string\" }, \"userId\" : { \"description\"\n                    : \"The user id\", \"type\" : \"string\" } }, \"required\" :\n                    [\"invoiceId\", \"userId\"], \"title\" : \"Invoice Paid Event\", \"type\" :\n                    \"object\" } }\n                ),\n            ),\n            feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n            feature_flag: Some(\"sample string\".to_string()),\n            group_name: Some(\"user\".to_string()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.EventType.Update(\n    \"user.signup\",\n    new EventTypeUpdate\n    {\n        Description = \"A user has signed up\",\n        Archived = true,\n        Deprecated = true,\n        Schemas = new Dictionary<string, string> { },\n        FeatureFlags = [\"cool-new-feature\"],\n        FeatureFlag = \"sample string\",\n        GroupName = \"user\",\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix event-type update \"user.signup\" '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"A user has signed up\",\n    \"featureFlag\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"groupName\": \"user\",\n    \"schemas\": {\n      \"1\": {\n        \"description\": \"An invoice was paid by a user\",\n        \"properties\": {\n          \"invoiceId\": {\n            \"description\": \"The invoice id\",\n            \"type\": \"string\"\n          },\n          \"userId\": {\n            \"description\": \"The user id\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"invoiceId\",\n          \"userId\"\n        ],\n        \"title\": \"Invoice Paid Event\",\n        \"type\": \"object\"\n      }\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/event-type/user.signup' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"A user has signed up\",\n    \"featureFlag\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"groupName\": \"user\",\n    \"schemas\": {\n      \"1\": {\n        \"description\": \"An invoice was paid by a user\",\n        \"properties\": {\n          \"invoiceId\": {\n            \"description\": \"The invoice id\",\n            \"type\": \"string\"\n          },\n          \"userId\": {\n            \"description\": \"The user id\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"invoiceId\",\n          \"userId\"\n        ],\n        \"title\": \"Invoice Paid Event\",\n        \"type\": \"object\"\n      }\n    }\n  }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/{event_type_name}/retry-schedule": {
            "get": {
                "description": "Gets the retry schedule for messages using the given event type.",
                "operationId": "v1.event-type.get-retry-schedule",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryScheduleInOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Retry Schedule",
                "tags": [
                    "Event Type"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Sets a retry schedule for all messages using the given event type.",
                "operationId": "v1.event-type.update-retry-schedule",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RetryScheduleInOut"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryScheduleInOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Retry Schedule",
                "tags": [
                    "Event Type"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/events": {
            "get": {
                "description": "Reads the stream of operational webhook events for this environment.",
                "operationId": "v1.events",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type",
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "description": "Filter response based on the event type",
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter response based on the event type.",
                        "in": "query",
                        "name": "channels",
                        "schema": {
                            "description": "Filter response based on the event type.",
                            "items": {
                                "example": "project_1337",
                                "maxLength": 128,
                                "pattern": "^[a-zA-Z0-9\\-_.:]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageEventsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Events",
                "tags": [
                    "Events"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "Verify the API server is up and running.",
                "operationId": "v1.health.get",
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Health",
                "tags": [
                    "Health"
                ]
            }
        },
        "/api/v1/management/authentication/{env_id}/api-token": {
            "get": {
                "description": "List all API Tokens.",
                "operationId": "v1.management.authentication.list-api-tokens",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApiTokenCensoredOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Api Tokens",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "post": {
                "description": "Create a new API Token.",
                "operationId": "v1.management.authentication.create-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/management/authentication/{env_id}/api-token/{key_id}": {
            "get": {
                "description": "Get an API token",
                "operationId": "v1.management.authentication.get-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The ApplicationToken's ID.",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenCensoredOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Update an API token",
                "operationId": "v1.management.authentication.update-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The ApplicationToken's ID.",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTokenCensoredOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/management/authentication/{env_id}/api-token/{key_id}/expire": {
            "post": {
                "description": "Expire the selected API Token.",
                "operationId": "v1.management.authentication.expire-api-token",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ApplicationToken's ID.",
                        "in": "path",
                        "name": "key_id",
                        "required": true,
                        "schema": {
                            "description": "The ApplicationToken's ID.",
                            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^key_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiTokenExpireIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expire Api Token",
                "tags": [
                    "Authentication"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/management/environment": {
            "get": {
                "description": "List all environments.",
                "operationId": "v1.management.environment.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "nullable": true,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EnvironmentModelOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Environments",
                "tags": [
                    "Environment"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "post": {
                "description": "Create a new environment.",
                "operationId": "v1.management.environment.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentModelIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentModelOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Environment",
                "tags": [
                    "Environment"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/management/environment-settings": {
            "get": {
                "description": "Get the environments's settings",
                "operationId": "v1.management.environment-settings.get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsInternalOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Dashboard Organization Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "patch": {
                "description": "Patch environment settings",
                "operationId": "v1.management.environment-settings.patch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsInternalPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsInternalOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Environment Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Update the environment's settings",
                "operationId": "v1.management.environment-settings.update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsInternalIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsInternalUpdateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Dashboard Organization Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/management/environment-settings/customer-otel": {
            "delete": {
                "description": "Delete customer otel config.",
                "operationId": "v1.management.environment-settings.delete-otel-config",
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Otel Config",
                "tags": [
                    "Environment-Settings"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "get": {
                "description": "Get customer otel config.",
                "operationId": "v1.management.environment-settings.get-otel-config",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OtelConfigOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Otel Config",
                "tags": [
                    "Environment-Settings"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Update customer otel config.",
                "operationId": "v1.management.environment-settings.update-otel-config",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OtelConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Otel Config",
                "tags": [
                    "Environment-Settings"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/management/environment/{env_id}": {
            "delete": {
                "description": "Delete an environment.",
                "operationId": "v1.management.environment.delete",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Environment",
                "tags": [
                    "Environment"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "get": {
                "description": "Get an environment.",
                "operationId": "v1.management.environment.get",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentModelOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Environment",
                "tags": [
                    "Environment"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Update an environment.",
                "operationId": "v1.management.environment.update",
                "parameters": [
                    {
                        "description": "The Environment's ID.",
                        "in": "path",
                        "name": "env_id",
                        "required": true,
                        "schema": {
                            "description": "The Environment's ID.",
                            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 31,
                            "minLength": 31,
                            "pattern": "^org_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentModelUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentModelOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Environment",
                "tags": [
                    "Environment"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/msg/broadcast": {
            "post": {
                "description": "Creates a background task to send the same message to each application in your organization.",
                "operationId": "create_broadcast_message",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageBroadcastIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageBroadcastOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Broadcast Message",
                "tags": [
                    "Broadcast"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/operational-webhook/endpoint": {
            "get": {
                "description": "List operational webhook endpoints.",
                "operationId": "v1.operational-webhook.endpoint.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_OperationalWebhookEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Operational Webhook Endpoints",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.operational_webhook.endpoint.list()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.operational_webhook.endpoint.list()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.OperationalWebhook.Endpoint.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.operationalWebhook.endpoint.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getOperationalWebhook().getEndpoint().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.operational_webhook.endpoint.list"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.operational_webhook().endpoint().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.List();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint list"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.create({\n  description: \"An example endpoint name\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  url: \"https://example.com/webhook/\",\n  disabled: true,\n  filterTypes: [\"message.attempt.failing\"],\n  secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.create({\n  description: \"An example endpoint name\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  url: \"https://example.com/webhook/\",\n  disabled: true,\n  filterTypes: [\"message.attempt.failing\"],\n  secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.operational_webhook.endpoint.create(\n    OperationalWebhookEndpointIn(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        filter_types=[\n            \"message.attempt.failing\",\n        ],\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.operational_webhook.endpoint.create(\n    OperationalWebhookEndpointIn(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        filter_types=[\n            \"message.attempt.failing\",\n        ],\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.OperationalWebhook.Endpoint.Create(\n\tctx,\n\tOperationalWebhookEndpointIn{\n\t\tDescription: ptr(\"An example endpoint name\"),\n\t\tRateLimit:   ptr(uint16(1)),\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tUrl:         \"https://example.com/webhook/\",\n\t\tDisabled:    ptr(true),\n\t\tFilterTypes: []string{\"message.attempt.failing\"},\n\t\tSecret:      ptr(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n\t\tMetadata:    nil,\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.operationalWebhook.endpoint.create(\n        OperationalWebhookEndpointIn(\n            description = \"An example endpoint name\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            url = \"https://example.com/webhook/\",\n            disabled = true,\n            filterTypes = setOf(\"message.attempt.failing\"),\n            secret = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n            metadata = mapOf(),\n        )\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getOperationalWebhook()\n        .getEndpoint()\n        .create(new OperationalWebhookEndpointIn()\n            .description(\"An example endpoint name\")\n            .rateLimit(1L)\n            .uid(\"unique-identifier\")\n            .url(URI.create(\"https://example.com/webhook/\"))\n            .disabled(true)\n            .filterTypes(Set.of(\"message.attempt.failing\"))\n            .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n            .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .operational_webhook\n  .endpoint\n  .create(\n    {\n      description: \"An example endpoint name\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      url: \"https://example.com/webhook/\",\n      disabled: true,\n      filterTypes: [\"message.attempt.failing\"],\n      secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n      metadata: {}\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .operational_webhook()\n    .endpoint()\n    .create(\n        OperationalWebhookEndpointIn {\n            description: Some(\"An example endpoint name\".to_string()),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            url: \"https://example.com/webhook/\".to_string(),\n            disabled: Some(true),\n            filter_types: Some(vec![\"message.attempt.failing\".to_string()]),\n            secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.Create(\n    new OperationalWebhookEndpointIn\n    {\n        Description = \"An example endpoint name\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Url = \"https://example.com/webhook/\",\n        Disabled = true,\n        FilterTypes = [\"message.attempt.failing\"],\n        Secret = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint create '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"message.attempt.failing\"\n    ],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"message.attempt.failing\"\n    ],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}": {
            "delete": {
                "description": "Delete an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.delete",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.delete(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.operationalWebhook.endpoint.delete(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.operational_webhook.endpoint.delete(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.operational_webhook.endpoint.delete(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.OperationalWebhook.Endpoint.Delete(ctx, \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.operationalWebhook.endpoint.delete(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getOperationalWebhook().getEndpoint().delete(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.operational_webhook.endpoint.delete(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.operational_webhook()\n    .endpoint()\n    .delete(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.Delete(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint delete \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.get",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.get(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.get(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.operational_webhook.endpoint.get(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.operational_webhook.endpoint.get(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.OperationalWebhook.Endpoint.Get(ctx, \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.operationalWebhook.endpoint.get(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getOperationalWebhook().getEndpoint().get(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.operational_webhook.endpoint.get(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .operational_webhook()\n    .endpoint()\n    .get(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.Get(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint get \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Update an operational webhook endpoint.",
                "operationId": "v1.operational-webhook.endpoint.update",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Operational Webhook Endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.update(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"An example endpoint name\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: true,\n    filterTypes: [\"message.attempt.failing\"],\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.update(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"An example endpoint name\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: true,\n    filterTypes: [\"message.attempt.failing\"],\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.operational_webhook.endpoint.update(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointUpdate(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        filter_types=[\n            \"message.attempt.failing\",\n        ],\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.operational_webhook.endpoint.update(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointUpdate(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        filter_types=[\n            \"message.attempt.failing\",\n        ],\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.OperationalWebhook.Endpoint.Update(\n\tctx,\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tOperationalWebhookEndpointUpdate{\n\t\tDescription: ptr(\"An example endpoint name\"),\n\t\tRateLimit:   ptr(uint16(1)),\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tUrl:         \"https://example.com/webhook/\",\n\t\tDisabled:    ptr(true),\n\t\tFilterTypes: []string{\"message.attempt.failing\"},\n\t\tMetadata:    nil,\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.operationalWebhook.endpoint.update(\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n        OperationalWebhookEndpointUpdate(\n            description = \"An example endpoint name\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            url = \"https://example.com/webhook/\",\n            disabled = true,\n            filterTypes = setOf(\"message.attempt.failing\"),\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getOperationalWebhook()\n        .getEndpoint()\n        .update(\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new OperationalWebhookEndpointUpdate()\n                .description(\"An example endpoint name\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .url(URI.create(\"https://example.com/webhook/\"))\n                .disabled(true)\n                .filterTypes(Set.of(\"message.attempt.failing\"))\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .operational_webhook\n  .endpoint\n  .update(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {\n      description: \"An example endpoint name\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      url: \"https://example.com/webhook/\",\n      disabled: true,\n      filterTypes: [\"message.attempt.failing\"],\n      metadata: {}\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .operational_webhook()\n    .endpoint()\n    .update(\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        OperationalWebhookEndpointUpdate {\n            description: Some(\"An example endpoint name\".to_string()),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            url: \"https://example.com/webhook/\".to_string(),\n            disabled: Some(true),\n            filter_types: Some(vec![\"message.attempt.failing\".to_string()]),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.Update(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new OperationalWebhookEndpointUpdate\n    {\n        Description = \"An example endpoint name\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Url = \"https://example.com/webhook/\",\n        Disabled = true,\n        FilterTypes = [\"message.attempt.failing\"],\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint update \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"message.attempt.failing\"\n    ],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"filterTypes\": [\n      \"message.attempt.failing\"\n    ],\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}/headers": {
            "get": {
                "description": "Get the additional headers to be sent with the operational webhook.",
                "operationId": "v1.operational-webhook.endpoint.get-headers",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Operational Webhook Endpoint Headers",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.getHeaders(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.getHeaders(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.operational_webhook.endpoint.get_headers(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.operational_webhook.endpoint.get_headers(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.OperationalWebhook.Endpoint.GetHeaders(\n\tctx,\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.operationalWebhook.endpoint.getHeaders(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response =\n        svix.getOperationalWebhook().getEndpoint().getHeaders(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.operational_webhook.endpoint.get_headers(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .operational_webhook()\n    .endpoint()\n    .get_headers(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.GetHeaders(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint get-headers \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Set the additional headers to be sent with the operational webhook.",
                "operationId": "v1.operational-webhook.endpoint.update-headers",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointHeadersIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Operational Webhook Endpoint Headers",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.updateHeaders(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\", {\n  headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.operationalWebhook.endpoint.updateHeaders(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\", {\n  headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.operational_webhook.endpoint.update_headers(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointHeadersIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.operational_webhook.endpoint.update_headers(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointHeadersIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.OperationalWebhook.Endpoint.UpdateHeaders(\n\tctx,\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tOperationalWebhookEndpointHeadersIn{\n\t\tHeaders: map[string]string{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.operationalWebhook.endpoint.updateHeaders(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointHeadersIn(headers = mapOf(\"X-Example\" to \"123\", \"X-Foobar\" to \"Bar\")),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getOperationalWebhook()\n        .getEndpoint()\n        .updateHeaders(\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new OperationalWebhookEndpointHeadersIn()\n                .headers(\n                    Map.ofEntries(Map.entry(\"X-Example\", \"123\"), Map.entry(\"X-Foobar\", \"Bar\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .operational_webhook\n  .endpoint\n  .update_headers(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\", {headers: {:\"X-Example\" => \"123\", :\"X-Foobar\" => \"Bar\"}})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.operational_webhook()\n    .endpoint()\n    .update_headers(\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        OperationalWebhookEndpointHeadersIn {\n            headers: HashMap::from([\n                (\"X-Example\".to_string(), \"123\".to_string()),\n                (\"X-Foobar\".to_string(), \"Bar\".to_string()),\n            ]),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.UpdateHeaders(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new OperationalWebhookEndpointHeadersIn\n    {\n        Headers = new() { { \"X-Example\", \"123\" }, { \"X-Foobar\", \"Bar\" } },\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint update-headers \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}/secret": {
            "get": {
                "description": "Get an operational webhook endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.operational-webhook.endpoint.get-secret",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalWebhookEndpointSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Operational Webhook Endpoint Secret",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.getSecret(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.operationalWebhook.endpoint.getSecret(\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.operational_webhook.endpoint.get_secret(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.operational_webhook.endpoint.get_secret(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.OperationalWebhook.Endpoint.GetSecret(\n\tctx,\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.operationalWebhook.endpoint.getSecret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response =\n        svix.getOperationalWebhook().getEndpoint().getSecret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.operational_webhook.endpoint.get_secret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .operational_webhook()\n    .endpoint()\n    .get_secret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.GetSecret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint get-secret \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/operational-webhook/endpoint/{endpoint_id}/secret/rotate": {
            "post": {
                "description": "Rotates an operational webhook endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
                "operationId": "v1.operational-webhook.endpoint.rotate-secret",
                "parameters": [
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalWebhookEndpointSecretIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Operational Webhook Endpoint Secret",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.operationalWebhook.endpoint.rotateSecret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\", {\n  key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.operationalWebhook.endpoint.rotateSecret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\", {\n  key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.operational_webhook.endpoint.rotate_secret(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointSecretIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.operational_webhook.endpoint.rotate_secret(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointSecretIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.OperationalWebhook.Endpoint.RotateSecret(\n\tctx,\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tOperationalWebhookEndpointSecretIn{Key: ptr(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.operationalWebhook.endpoint.rotateSecret(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    OperationalWebhookEndpointSecretIn(key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getOperationalWebhook()\n        .getEndpoint()\n        .rotateSecret(\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new OperationalWebhookEndpointSecretIn().key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .operational_webhook\n  .endpoint\n  .rotate_secret(\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\", {key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.operational_webhook()\n    .endpoint()\n    .rotate_secret(\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        OperationalWebhookEndpointSecretIn {\n            key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.OperationalWebhook.Endpoint.RotateSecret(\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new OperationalWebhookEndpointSecretIn { Key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\" }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix operational-webhook endpoint rotate-secret \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stats/app/{app_id}/attempt": {
            "get": {
                "description": "Returns application-level statistics on message attempts",
                "operationId": "v1.stats.app-attempts",
                "parameters": [
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttemptStatisticsResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Attempt Stats",
                "tags": [
                    "Statistics"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt": {
            "get": {
                "description": "Returns endpoint-level statistics on message attempts.",
                "operationId": "v1.stats.endpoint-attempts",
                "parameters": [
                    {
                        "description": "Filter the range to data starting from this date.",
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "description": "Filter the range to data starting from this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter the range to data ending by this date.",
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "description": "Filter the range to data ending by this date.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The Application's ID or UID.",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The Application's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttemptStatisticsResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ep Stats",
                "tags": [
                    "Statistics"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stats/usage/app": {
            "post": {
                "description": "Creates a background task to calculate the message destinations for all applications in the environment.\n\nNote that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to\nretrieve the results of the operation.",
                "operationId": "v1.statistics.aggregate-app-stats",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppUsageStatsIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppUsageStatsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Aggregate App Stats",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.statistics.aggregateAppStats({\n  since: new Date(\"2025-10-02T20:28:42+00:00\"),\n  until: new Date(\"2025-10-02T20:28:42+00:00\"),\n  appIds: [],\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.statistics.aggregateAppStats({\n  since: new Date(\"2025-10-02T20:28:42+00:00\"),\n  until: new Date(\"2025-10-02T20:28:42+00:00\"),\n  appIds: [],\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.statistics.aggregate_app_stats(\n    AppUsageStatsIn(\n        since=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        until=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        app_ids=[],\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.statistics.aggregate_app_stats(\n    AppUsageStatsIn(\n        since=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        until=datetime.fromisoformat(\"2025-10-02T20:28:42+00:00\"),\n        app_ids=[],\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Statistics.AggregateAppStats(\n\tctx,\n\tAppUsageStatsIn{\n\t\tSince:  time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC),\n\t\tUntil:  time.Date(2025, 10, 2, 20, 28, 42, 0, time.UTC),\n\t\tAppIds: []string{},\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.statistics.aggregateAppStats(\n        AppUsageStatsIn(\n            since = Instant.parse(\"2025-10-02T20:28:42+00:00\"),\n            until = Instant.parse(\"2025-10-02T20:28:42+00:00\"),\n            appIds = setOf(),\n        )\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStatistics()\n        .aggregateAppStats(new AppUsageStatsIn()\n            .since(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\"))\n            .until(OffsetDateTime.parse(\"2025-10-02T20:28:42+00:00\"))\n            .appIds(Set.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .statistics\n  .aggregate_app_stats({since: \"2025-10-02T20:28:42+00:00\", until: \"2025-10-02T20:28:42+00:00\", appIds: []})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .statistics()\n    .aggregate_app_stats(\n        AppUsageStatsIn {\n            since: \"2025-10-02T20:28:42+00:00\".to_string(),\n            until: \"2025-10-02T20:28:42+00:00\".to_string(),\n            app_ids: Some(vec![]),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Statistics.AggregateAppStats(\n    new AppUsageStatsIn\n    {\n        Since = DateTime.Parse(\"2025-10-02T20:28:42+00:00\"),\n        Until = DateTime.Parse(\"2025-10-02T20:28:42+00:00\"),\n        AppIds = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix statistics aggregate-app-stats '{\n    \"appIds\": [],\n    \"since\": \"2025-10-02T20:28:42+00:00\",\n    \"until\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stats/usage/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"appIds\": [],\n    \"since\": \"2025-10-02T20:28:42+00:00\",\n    \"until\": \"2025-10-02T20:28:42+00:00\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stats/usage/event-types": {
            "put": {
                "description": "Creates a background task to calculate the listed event types for all apps in the organization.\n\nNote that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to\nretrieve the results of the operation.",
                "operationId": "v1.statistics.aggregate-event-types",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AggregateEventTypesOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Aggregate Event Types",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.statistics.aggregateEventTypes();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.statistics.aggregateEventTypes();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.statistics.aggregate_event_types()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.statistics.aggregate_event_types()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Statistics.AggregateEventTypes(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.statistics.aggregateEventTypes()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStatistics().aggregateEventTypes();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.statistics.aggregate_event_types"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.statistics().aggregate_event_types().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Statistics.AggregateEventTypes();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix statistics aggregate-event-types"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stats/usage/event-types' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/stream": {
            "get": {
                "description": "List of all the organization's streams.",
                "operationId": "v1.stream.stream.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "strm_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 27,
                            "minLength": 27,
                            "nullable": true,
                            "pattern": "^strm_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Streams",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.stream.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.stream.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.stream.list()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.stream.list()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Stream.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.stream.stream.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream().getStream().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.stream.list"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.stream().stream().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Stream.List();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream stream list"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Creates a new stream.",
                "operationId": "v1.stream.stream.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.stream.create({\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.stream.create({\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.stream.create(\n    StreamIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.stream.create(\n    StreamIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Stream.Create(\n\tctx,\n\tStreamIn{Name: \"sample string\", Uid: ptr(\"unique-identifier\"), Metadata: nil},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.stream.create(\n        StreamIn(name = \"sample string\", uid = \"unique-identifier\", metadata = mapOf())\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getStream()\n        .create(new StreamIn().name(\"sample string\").uid(\"unique-identifier\").metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.stream.create({name: \"sample string\", uid: \"unique-identifier\", metadata: {}})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .stream()\n    .create(\n        StreamIn {\n            name: \"sample string\".to_string(),\n            uid: Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Stream.Create(\n    new StreamIn\n    {\n        Name = \"sample string\",\n        Uid = \"unique-identifier\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream stream create '{\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/event-type": {
            "get": {
                "description": "List of all the organization's event types for streaming.",
                "operationId": "v1.stream.event-type.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Include archived (deleted but not expunged) items in the response.",
                        "in": "query",
                        "name": "include_archived",
                        "schema": {
                            "default": false,
                            "description": "Include archived (deleted but not expunged) items in the response.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamEventTypeOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Stream Event Types",
                "tags": [
                    "Stream Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.eventType.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.eventType.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.event_type.list()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.event_type.list()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.EventType.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.stream.eventType.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream().getEventType().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.event_type.list"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.stream().event_type().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.EventType.List();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream event-type list"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an event type for Streams.",
                "operationId": "v1.stream.event-type.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamEventTypeIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Stream Event Type",
                "tags": [
                    "Stream Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.eventType.create({\n  name: \"user.signup\",\n  description: \"sample string\",\n  featureFlags: [\"cool-new-feature\"],\n  deprecated: true,\n  archived: true,\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.eventType.create({\n  name: \"user.signup\",\n  description: \"sample string\",\n  featureFlags: [\"cool-new-feature\"],\n  deprecated: true,\n  archived: true,\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.event_type.create(\n    StreamEventTypeIn(\n        name=\"user.signup\",\n        description=\"sample string\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        deprecated=True,\n        archived=True,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.event_type.create(\n    StreamEventTypeIn(\n        name=\"user.signup\",\n        description=\"sample string\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        deprecated=True,\n        archived=True,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.EventType.Create(\n\tctx,\n\tStreamEventTypeIn{\n\t\tName:         \"user.signup\",\n\t\tDescription:  ptr(\"sample string\"),\n\t\tFeatureFlags: []string{\"cool-new-feature\"},\n\t\tDeprecated:   ptr(true),\n\t\tArchived:     ptr(true),\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.eventType.create(\n        StreamEventTypeIn(\n            name = \"user.signup\",\n            description = \"sample string\",\n            featureFlags = setOf(\"cool-new-feature\"),\n            deprecated = true,\n            archived = true,\n        )\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getEventType()\n        .create(new StreamEventTypeIn()\n            .name(\"user.signup\")\n            .description(\"sample string\")\n            .featureFlags(Set.of(\"cool-new-feature\"))\n            .deprecated(true)\n            .archived(true));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .event_type\n  .create(\n    {\n      name: \"user.signup\",\n      description: \"sample string\",\n      featureFlags: [\"cool-new-feature\"],\n      deprecated: true,\n      archived: true\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .event_type()\n    .create(\n        StreamEventTypeIn {\n            name: \"user.signup\".to_string(),\n            description: Some(\"sample string\".to_string()),\n            feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n            deprecated: Some(true),\n            archived: Some(true),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.EventType.Create(\n    new StreamEventTypeIn\n    {\n        Name = \"user.signup\",\n        Description = \"sample string\",\n        FeatureFlags = [\"cool-new-feature\"],\n        Deprecated = true,\n        Archived = true,\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream event-type create '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"name\": \"user.signup\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"name\": \"user.signup\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/event-type/{name}": {
            "delete": {
                "description": "Delete an event type.",
                "operationId": "v1.stream.event-type.delete",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "By default, event types are archived when \"deleted\". With this flag, they are deleted entirely.",
                        "in": "query",
                        "name": "expunge",
                        "schema": {
                            "default": false,
                            "description": "By default, event types are archived when \"deleted\". With this flag, they are deleted entirely.",
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Stream Event Type",
                "tags": [
                    "Stream Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.eventType.delete(\"name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.stream.eventType.delete(\"name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.event_type.delete(\n    \"name\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.stream.event_type.delete(\n    \"name\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Stream.EventType.Delete(ctx, \"name\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.eventType.delete(\"name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getEventType().delete(\"name\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.event_type.delete(\"name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().event_type().delete(\"name\".to_string(), None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.EventType.Delete(\"name\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream event-type delete \"name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/name' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an event type.",
                "operationId": "v1.stream.event-type.get",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Stream Event Type",
                "tags": [
                    "Stream Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.eventType.get(\"name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.eventType.get(\"name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.event_type.get(\n    \"name\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.event_type.get(\n    \"name\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.EventType.Get(ctx, \"name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.stream.eventType.get(\"name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream().getEventType().get(\"name\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.event_type.get(\"name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.stream().event_type().get(\"name\".to_string()).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.EventType.Get(\"name\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream event-type get \"name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/name' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Patch an event type for Streams.",
                "operationId": "v1.stream.event-type.patch",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamEventTypePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Stream Event Type",
                "tags": [
                    "Stream Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.eventType.patch(\"name\", {\n  name: \"user.signup\",\n  description: \"sample string\",\n  featureFlags: [\"cool-new-feature\"],\n  deprecated: true,\n  archived: true,\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.eventType.patch(\"name\", {\n  name: \"user.signup\",\n  description: \"sample string\",\n  featureFlags: [\"cool-new-feature\"],\n  deprecated: true,\n  archived: true,\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.event_type.patch(\n    \"name\",\n    StreamEventTypePatch(\n        name=\"user.signup\",\n        description=\"sample string\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        deprecated=True,\n        archived=True,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.event_type.patch(\n    \"name\",\n    StreamEventTypePatch(\n        name=\"user.signup\",\n        description=\"sample string\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        deprecated=True,\n        archived=True,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.EventType.Patch(\n\tctx,\n\t\"name\",\n\tStreamEventTypePatch{\n\t\tName:         NewNullable(\"user.signup\"),\n\t\tDescription:  NewNullable(\"sample string\"),\n\t\tFeatureFlags: NewNullable([]string{\"cool-new-feature\"}),\n\t\tDeprecated:   ptr(true),\n\t\tArchived:     ptr(true),\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.eventType.patch(\n        \"name\",\n        StreamEventTypePatch(\n            name = MaybeUnset.Present(\"user.signup\"),\n            description = MaybeUnset.Present(\"sample string\"),\n            featureFlags = MaybeUnset.Present(setOf(\"cool-new-feature\")),\n            deprecated = true,\n            archived = true,\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getEventType()\n        .patch(\n            \"name\",\n            new StreamEventTypePatch()\n                .name(\"user.signup\")\n                .description(\"sample string\")\n                .featureFlags(Set.of(\"cool-new-feature\"))\n                .deprecated(true)\n                .archived(true));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .event_type\n  .patch(\n    \"name\",\n    {\n      name: \"user.signup\",\n      description: \"sample string\",\n      featureFlags: [\"cool-new-feature\"],\n      deprecated: true,\n      archived: true\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .event_type()\n    .patch(\n        \"name\".to_string(),\n        StreamEventTypePatch {\n            name: js_option::JsOption::Some(\"user.signup\".to_string()),\n            description: js_option::JsOption::Some(\"sample string\".to_string()),\n            feature_flags: js_option::JsOption::Some(\n                vec![\"cool-new-feature\".to_string()],\n            ),\n            deprecated: Some(true),\n            archived: Some(true),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.EventType.Patch(\n    \"name\",\n    new StreamEventTypePatch\n    {\n        Name = \"user.signup\",\n        Description = \"sample string\",\n        FeatureFlags = MaybeUnset<List<string>?>.Set([\"cool-new-feature\"]),\n        Deprecated = true,\n        Archived = true,\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream event-type patch \"name\" '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"name\": \"user.signup\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/name' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"name\": \"user.signup\"\n  }'"
                    }
                ]
            },
            "put": {
                "description": "Update or create a event type for Streams.",
                "operationId": "v1.stream.event-type.update",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamEventTypeIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamEventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Stream Event Type",
                "tags": [
                    "Stream Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.eventType.update(\"name\", {\n  name: \"user.signup\",\n  description: \"sample string\",\n  featureFlags: [\"cool-new-feature\"],\n  deprecated: true,\n  archived: true,\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.eventType.update(\"name\", {\n  name: \"user.signup\",\n  description: \"sample string\",\n  featureFlags: [\"cool-new-feature\"],\n  deprecated: true,\n  archived: true,\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.event_type.update(\n    \"name\",\n    StreamEventTypeIn(\n        name=\"user.signup\",\n        description=\"sample string\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        deprecated=True,\n        archived=True,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.event_type.update(\n    \"name\",\n    StreamEventTypeIn(\n        name=\"user.signup\",\n        description=\"sample string\",\n        feature_flags=[\n            \"cool-new-feature\",\n        ],\n        deprecated=True,\n        archived=True,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.EventType.Update(\n\tctx,\n\t\"name\",\n\tStreamEventTypeIn{\n\t\tName:         \"user.signup\",\n\t\tDescription:  ptr(\"sample string\"),\n\t\tFeatureFlags: []string{\"cool-new-feature\"},\n\t\tDeprecated:   ptr(true),\n\t\tArchived:     ptr(true),\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.eventType.update(\n        \"name\",\n        StreamEventTypeIn(\n            name = \"user.signup\",\n            description = \"sample string\",\n            featureFlags = setOf(\"cool-new-feature\"),\n            deprecated = true,\n            archived = true,\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getEventType()\n        .update(\n            \"name\",\n            new StreamEventTypeIn()\n                .name(\"user.signup\")\n                .description(\"sample string\")\n                .featureFlags(Set.of(\"cool-new-feature\"))\n                .deprecated(true)\n                .archived(true));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .event_type\n  .update(\n    \"name\",\n    {\n      name: \"user.signup\",\n      description: \"sample string\",\n      featureFlags: [\"cool-new-feature\"],\n      deprecated: true,\n      archived: true\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .event_type()\n    .update(\n        \"name\".to_string(),\n        StreamEventTypeIn {\n            name: \"user.signup\".to_string(),\n            description: Some(\"sample string\".to_string()),\n            feature_flags: Some(vec![\"cool-new-feature\".to_string()]),\n            deprecated: Some(true),\n            archived: Some(true),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.EventType.Update(\n    \"name\",\n    new StreamEventTypeIn\n    {\n        Name = \"user.signup\",\n        Description = \"sample string\",\n        FeatureFlags = [\"cool-new-feature\"],\n        Deprecated = true,\n        Archived = true,\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream event-type update \"name\" '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"name\": \"user.signup\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stream/event-type/name' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"archived\": true,\n    \"deprecated\": true,\n    \"description\": \"sample string\",\n    \"featureFlags\": [\n      \"cool-new-feature\"\n    ],\n    \"name\": \"user.signup\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/transformations/simulate": {
            "post": {
                "description": "Simulate the stream transformations endpoint",
                "operationId": "v1.stream.simulate-transformation",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamTransformationSimulateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamTransformationSimulateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Simulate Stream Transformation",
                "tags": [
                    "Stream"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stream/{stream_id}": {
            "delete": {
                "description": "Delete a stream.",
                "operationId": "v1.stream.stream.delete",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.stream.delete(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.stream.stream.delete(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.stream.delete(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.stream.stream.delete(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Stream.Stream.Delete(ctx, \"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.stream.delete(\"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getStream().delete(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.stream.delete(\"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().stream().delete(\"strm_31Dc0DD72P5AddYUguyBd\".to_string()).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Stream.Delete(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream stream delete \"strm_31Dc0DD72P5AddYUguyBd\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get a stream by id or uid.",
                "operationId": "v1.stream.stream.get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.stream.get(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.stream.get(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.stream.get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.stream.get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Stream.Get(ctx, \"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.stream.stream.get(\"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream().getStream().get(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.stream.get(\"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .stream()\n    .get(\"strm_31Dc0DD72P5AddYUguyBd\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Stream.Get(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream stream get \"strm_31Dc0DD72P5AddYUguyBd\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update a stream.",
                "operationId": "v1.stream.stream.patch",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.stream.patch(\"strm_31Dc0DD72P5AddYUguyBd\", {\n  description: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.stream.patch(\"strm_31Dc0DD72P5AddYUguyBd\", {\n  description: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.stream.patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamPatch(\n        description=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.stream.patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamPatch(\n        description=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Stream.Patch(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\tStreamPatch{\n\t\tDescription: ptr(\"sample string\"),\n\t\tUid:         NewNullable(\"unique-identifier\"),\n\t\tMetadata:    nil,\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.stream.patch(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        StreamPatch(\n            description = \"sample string\",\n            uid = MaybeUnset.Present(\"unique-identifier\"),\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getStream()\n        .patch(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            new StreamPatch()\n                .description(\"sample string\")\n                .uid(\"unique-identifier\")\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .stream\n  .patch(\"strm_31Dc0DD72P5AddYUguyBd\", {description: \"sample string\", uid: \"unique-identifier\", metadata: {}})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .stream()\n    .patch(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        StreamPatch {\n            description: Some(\"sample string\".to_string()),\n            uid: js_option::JsOption::Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Stream.Patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    new StreamPatch\n    {\n        Description = \"sample string\",\n        Uid = \"unique-identifier\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream stream patch \"strm_31Dc0DD72P5AddYUguyBd\" '{\n    \"description\": \"sample string\",\n    \"metadata\": {},\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"description\": \"sample string\",\n    \"metadata\": {},\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            },
            "put": {
                "description": "Update a stream.",
                "operationId": "v1.stream.stream.update",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Stream",
                "tags": [
                    "Stream"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.stream.update(\"strm_31Dc0DD72P5AddYUguyBd\", {\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.stream.update(\"strm_31Dc0DD72P5AddYUguyBd\", {\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.stream.update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.stream.update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Stream.Update(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\tStreamIn{Name: \"sample string\", Uid: ptr(\"unique-identifier\"), Metadata: nil},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.stream.update(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        StreamIn(name = \"sample string\", uid = \"unique-identifier\", metadata = mapOf()),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getStream()\n        .update(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            new StreamIn().name(\"sample string\").uid(\"unique-identifier\").metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .stream\n  .update(\"strm_31Dc0DD72P5AddYUguyBd\", {name: \"sample string\", uid: \"unique-identifier\", metadata: {}})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .stream()\n    .update(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        StreamIn {\n            name: \"sample string\".to_string(),\n            uid: Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Stream.Update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    new StreamIn\n    {\n        Name = \"sample string\",\n        Uid = \"unique-identifier\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream stream update \"strm_31Dc0DD72P5AddYUguyBd\" '{\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/events": {
            "post": {
                "description": "Creates events on the Stream.",
                "operationId": "v1.stream.events.create",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateStreamEventsIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateStreamEventsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Events",
                "tags": [
                    "Event"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "Javascript",
                        "source": "await svix.stream.events.create(\"rock_inc_uid\", {\n  events: [\n    {\n      \"eventType\": \"user.signup\",\n      \"payload\": '{\"email\":\"test@example.com\",\"username\":\"test_user\"}'\n    }\n  ]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "Typescript",
                        "source": "await svix.stream.events.create(\"rock_inc_uid\", {\n  events: [\n    {\n      \"eventType\": \"user.signup\",\n      \"payload\": '{\"email\":\"test@example.com\",\"username\":\"test_user\"}'\n    }\n  ]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.events.create(\"rock_inc_uid\", CreateStreamEventsIn(\n  events=[\n    EventIn(\n      eventType=\"user.signup\",\n      payload='{\"email\":\"test@example.com\",\"username\":\"test_user\"}'\n    )\n  ]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.stream.events.create(\"rock_inc_uid\", CreateStreamEventsIn(\n  events=[\n    EventIn(\n      eventType=\"user.signup\",\n      payload='{\"email\":\"test@example.com\",\"username\":\"test_user\"}'\n    )\n  ]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "svixClient.Stream.Events.Create(\n  ctx,\n  \"rock_inc_uid\",\n  &svix.CreateStreamEventsIn{\n    Events: []svix.EventIn{\n      {\n        EventType: \"user.signup\",\n        Payload: \\`{\"email\":\"test@example.com\",\"username\":\"test_user\"}\\`,\n      }\n    },\n  })"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.events.create(\"rock_inc_uid\", CreateStreamEventsIn()\n    .events(arrayOf(\n      EventIn(\n        eventType = \"user.signup\",\n        payload = \\`{\"email\":\"test@example.com\",\"username\":\"test_user\"}\\`,\n      )\n    ))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getEvents().create(\"rock_inc_uid\", new CreateStreamEventsIn()\n    .events(new EventIn[]{\n      new EventIn()\n        .eventType(\"user.signup\")\n        .payload(\"{\\\"email\\\":\\\"test@example.com\\\",\\\"username\\\":\\\"test_user\\\"}\")\n    })\n);"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.stream.events.create(\"rock_inc_uid\", Svix::CreateStreamEventsIn.new({\n    \"events\": [\n      {\n        \"eventType\": \"user.signup\",\n        \"payload\": '{\"email\":\"test@example.com\",\"username\":\"test_user\"}'\n      }\n    ]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream().events().create(\"rock_inc_uid\", CreateStreamEventsIn {\n    events: vec![\n      EventIn {\n        event_type: \"user.signup\".into(),\n        payload: r#\"{\"email\":\"test@example.com\",\"username\":\"test_user\"}\"#.into()\n      }\n    ],\n    stream: None,\n}, None).await?;"
                    },
                    {
                        "label": "Php",
                        "lang": "Php",
                        "source": "$svix->stream->events->create(\n  'rock_inc_uid',\n  CreateStreamEventsIn::create(\n    events: [\n      [\n        'eventType' => 'user.signup',\n        'payload' => '{\"email\":\"test@example.com\",\"username\":\"test_user\"}'\n      ]\n    ],\n  )\n);"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Stream.Events.CreateAsync(\"stream_id\", new CreateStreamEventsIn{\n    events: new EventIn[] {\n      new EventIn(\n        eventType: \"user.signup\",\n        payload: \"{\\\\\"email\\\\\":\\\\\"test@example.com\\\\\",\\\\\"username\\\\\":\\\\\"test_user\\\\\"}\"\n      )\n    }\n});"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\\\n  'https://api.svix.com/api/v1/stream/rock_inc_uid/events' \\\\\n  -H 'accept: application/json' \\\\\n  -H \"Authorization: Bearer \\${AUTH_TOKEN}\" \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d '{\n  \"events\": [\n    {\n      \"eventType\":\"user.signup\",\n      \"payload\":\"{\\\\\"email\\\":\\\\\"test@example.com\\\\\",\\\\\"username\\\\\":\\\\\"test_user\\\\\"}\"\n    }\n  ],\n}'"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "Coming soon to Svix CLI"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/events/latest": {
            "get": {
                "description": "Get the latest events from the stream",
                "operationId": "v1.stream.events.get-latest",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 20,
                            "format": "uint64",
                            "maximum": 50,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LatestEventsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Latest Stream Events",
                "tags": [
                    "Event"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stream/{stream_id}/patch_alert_email": {
            "patch": {
                "description": "Patch the alert email for a stream.",
                "operationId": "v1.stream.stream.patch-alert-email",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamAlertEmailPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Alert Email",
                "tags": [
                    "Stream"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stream/{stream_id}/sink": {
            "get": {
                "description": "List of all the stream's sinks.",
                "operationId": "v1.stream.sink.list",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 27,
                            "minLength": 27,
                            "nullable": true,
                            "pattern": "^sink_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_StreamSinkOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Sinks",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.list(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.list(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.list(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.list(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.List(ctx, \"strm_31Dc0DD72P5AddYUguyBd\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.stream.sink.list(\"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream().getSink().list(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.sink.list(\"strm_31Dc0DD72P5AddYUguyBd\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .list(\"strm_31Dc0DD72P5AddYUguyBd\".to_string(), None)\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.List(\"strm_31Dc0DD72P5AddYUguyBd\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink list \"strm_31Dc0DD72P5AddYUguyBd\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Creates a new sink.",
                "operationId": "v1.stream.sink.create",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.create(\"strm_31Dc0DD72P5AddYUguyBd\", {\n  uid: \"unique-identifier\",\n  status: {},\n  batchSize: 100,\n  maxWaitSecs: 1,\n  eventTypes: [],\n  metadata: {},\n  type: \"azureBlobStorage\",\n  config: {\n    container: \"sample string\",\n    account: \"sample string\",\n    accessKey: \"sample string\",\n  },\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.create(\"strm_31Dc0DD72P5AddYUguyBd\", {\n  uid: \"unique-identifier\",\n  status: {},\n  batchSize: 100,\n  maxWaitSecs: 1,\n  eventTypes: [],\n  metadata: {},\n  type: \"azureBlobStorage\",\n  config: {\n    container: \"sample string\",\n    account: \"sample string\",\n    accessKey: \"sample string\",\n  },\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.create(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamSinkIn(\n        uid=\"unique-identifier\",\n        status=SinkStatusIn(),\n        batch_size=100,\n        max_wait_secs=1,\n        event_types=[],\n        metadata={},\n        type=\"azureBlobStorage\",\n        config=AzureBlobStorageConfig(\n            container=\"sample string\",\n            account=\"sample string\",\n            access_key=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.create(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    StreamSinkIn(\n        uid=\"unique-identifier\",\n        status=SinkStatusIn(),\n        batch_size=100,\n        max_wait_secs=1,\n        event_types=[],\n        metadata={},\n        type=\"azureBlobStorage\",\n        config=AzureBlobStorageConfig(\n            container=\"sample string\",\n            account=\"sample string\",\n            access_key=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.Create(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\tStreamSinkIn{\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tStatus:      ptr(SinkStatusIn{}),\n\t\tBatchSize:   ptr(uint16(100)),\n\t\tMaxWaitSecs: ptr(uint16(1)),\n\t\tEventTypes:  []string{},\n\t\tMetadata:    nil,\n\t\tConfig:      (AzureBlobStorageConfig{Container: \"sample string\", Account: \"sample string\", AccessKey: \"sample string\"}),\n\t\tType:        \"azureBlobStorage\",\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sink.create(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        StreamSinkIn(\n            uid = \"unique-identifier\",\n            status = SinkStatusIn(),\n            batchSize = 100u,\n            maxWaitSecs = 1u,\n            eventTypes = listOf(),\n            metadata = mapOf(),\n            config =\n                StreamSinkInConfig.AzureBlobStorage(\n                    AzureBlobStorageConfig(\n                        container = \"sample string\",\n                        account = \"sample string\",\n                        accessKey = \"sample string\",\n                    )\n                ),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getSink()\n        .create(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            new StreamSinkIn()\n                .uid(\"unique-identifier\")\n                .status(new SinkStatusIn())\n                .batchSize(100L)\n                .maxWaitSecs(1L)\n                .eventTypes(List.of())\n                .metadata(Map.of())\n                .config(new StreamSinkInConfig.AzureBlobStorage(new AzureBlobStorageConfig()\n                    .container(\"sample string\")\n                    .account(\"sample string\")\n                    .accessKey(\"sample string\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .sink\n  .create(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    {\n      uid: \"unique-identifier\",\n      status: {},\n      batchSize: 100,\n      maxWaitSecs: 1,\n      eventTypes: [],\n      metadata: {},\n      config: {container: \"sample string\", account: \"sample string\", accessKey: \"sample string\"},\n      type: \"azureBlobStorage\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .create(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        StreamSinkIn {\n            uid: Some(\"unique-identifier\".to_string()),\n            status: Some(SinkStatusIn {}),\n            batch_size: Some(100),\n            max_wait_secs: Some(1),\n            event_types: Some(vec![]),\n            metadata: Some(HashMap::new()),\n            config: StreamSinkInConfig::AzureBlobStorage(AzureBlobStorageConfig {\n                container: \"sample string\".to_string(),\n                account: \"sample string\".to_string(),\n                access_key: \"sample string\".to_string(),\n            }),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.Create(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    new StreamSinkIn\n    {\n        Uid = \"unique-identifier\",\n        Status = new SinkStatusIn { },\n        BatchSize = 100,\n        MaxWaitSecs = 1,\n        EventTypes = [],\n        Metadata = [],\n        Config = StreamSinkInConfig.AzureBlobStorage(\n            (\n                new AzureBlobStorageConfig\n                {\n                    Container = \"sample string\",\n                    Account = \"sample string\",\n                    AccessKey = \"sample string\",\n                }\n            )\n        ),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink create \"strm_31Dc0DD72P5AddYUguyBd\" '{\n    \"batchSize\": 100,\n    \"config\": {\n      \"accessKey\": \"sample string\",\n      \"account\": \"sample string\",\n      \"container\": \"sample string\"\n    },\n    \"eventTypes\": [],\n    \"maxWaitSecs\": 1,\n    \"metadata\": {},\n    \"status\": {},\n    \"type\": \"azureBlobStorage\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"batchSize\": 100,\n    \"config\": {\n      \"accessKey\": \"sample string\",\n      \"account\": \"sample string\",\n      \"container\": \"sample string\"\n    },\n    \"eventTypes\": [],\n    \"maxWaitSecs\": 1,\n    \"metadata\": {},\n    \"status\": {},\n    \"type\": \"azureBlobStorage\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}": {
            "delete": {
                "description": "Delete a sink.",
                "operationId": "v1.stream.sink.delete",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.stream.sink.delete(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.stream.sink.delete(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.stream.sink.delete(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.stream.sink.delete(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Stream.Sink.Delete(ctx, \"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.stream.sink.delete(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getStream().getSink().delete(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.sink.delete(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.stream()\n    .sink()\n    .delete(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.Delete(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink delete \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get a sink by id or uid.",
                "operationId": "v1.stream.sink.get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.get(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.get(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.Get(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.stream.sink.get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response =\n        svix.getStream().getSink().get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.sink.get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .get(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.Get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink get \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update a sink.",
                "operationId": "v1.stream.sink.patch",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.patch(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    uid: \"unique-identifier\",\n    status: {},\n    batchSize: 100,\n    maxWaitSecs: 1,\n    eventTypes: [],\n    metadata: {},\n    type: \"azureBlobStorage\",\n    config: {\n      container: \"sample string\",\n      account: \"sample string\",\n      accessKey: \"sample string\",\n    },\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.patch(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    uid: \"unique-identifier\",\n    status: {},\n    batchSize: 100,\n    maxWaitSecs: 1,\n    eventTypes: [],\n    metadata: {},\n    type: \"azureBlobStorage\",\n    config: {\n      container: \"sample string\",\n      account: \"sample string\",\n      accessKey: \"sample string\",\n    },\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    StreamSinkPatch(\n        uid=\"unique-identifier\",\n        status=SinkStatusIn(),\n        batch_size=100,\n        max_wait_secs=1,\n        event_types=[],\n        metadata={},\n        type=\"azureBlobStorage\",\n        config=AzureBlobStoragePatchConfig(\n            container=\"sample string\",\n            account=\"sample string\",\n            access_key=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    StreamSinkPatch(\n        uid=\"unique-identifier\",\n        status=SinkStatusIn(),\n        batch_size=100,\n        max_wait_secs=1,\n        event_types=[],\n        metadata={},\n        type=\"azureBlobStorage\",\n        config=AzureBlobStoragePatchConfig(\n            container=\"sample string\",\n            account=\"sample string\",\n            access_key=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.Patch(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tStreamSinkPatch{\n\t\tUid:         NewNullable(\"unique-identifier\"),\n\t\tStatus:      NewNullable(SinkStatusIn{}),\n\t\tBatchSize:   NewNullable(uint16(100)),\n\t\tMaxWaitSecs: NewNullable(uint16(1)),\n\t\tEventTypes:  []string{},\n\t\tMetadata:    nil,\n\t\tConfig:      (AzureBlobStoragePatchConfig{Container: ptr(\"sample string\"), Account: ptr(\"sample string\"), AccessKey: ptr(\"sample string\")}),\n\t\tType:        \"azureBlobStorage\",\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sink.patch(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        StreamSinkPatch(\n            uid = MaybeUnset.Present(\"unique-identifier\"),\n            status = MaybeUnset.Present(SinkStatusIn()),\n            batchSize = MaybeUnset.Present(100u),\n            maxWaitSecs = MaybeUnset.Present(1u),\n            eventTypes = listOf(),\n            metadata = mapOf(),\n            config =\n                StreamSinkPatchConfig.AzureBlobStorage(\n                    AzureBlobStoragePatchConfig(\n                        container = \"sample string\",\n                        account = \"sample string\",\n                        accessKey = \"sample string\",\n                    )\n                ),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getSink()\n        .patch(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            \"sink_31Dc11sPYY9aLDkwPuGMa\",\n            new StreamSinkPatch()\n                .uid(\"unique-identifier\")\n                .status(new SinkStatusIn())\n                .batchSize(100L)\n                .maxWaitSecs(1L)\n                .eventTypes(List.of())\n                .metadata(Map.of())\n                .config(new StreamSinkPatchConfig.AzureBlobStorage(new AzureBlobStoragePatchConfig()\n                    .container(\"sample string\")\n                    .account(\"sample string\")\n                    .accessKey(\"sample string\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .sink\n  .patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    {\n      uid: \"unique-identifier\",\n      status: {},\n      batchSize: 100,\n      maxWaitSecs: 1,\n      eventTypes: [],\n      metadata: {},\n      config: {container: \"sample string\", account: \"sample string\", accessKey: \"sample string\"},\n      type: \"azureBlobStorage\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .patch(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        StreamSinkPatch {\n            uid: js_option::JsOption::Some(\"unique-identifier\".to_string()),\n            status: js_option::JsOption::Some(SinkStatusIn {}),\n            batch_size: js_option::JsOption::Some(100),\n            max_wait_secs: js_option::JsOption::Some(1),\n            event_types: Some(vec![]),\n            metadata: Some(HashMap::new()),\n            config: StreamSinkPatchConfig::AzureBlobStorage(AzureBlobStoragePatchConfig {\n                container: Some(\"sample string\".to_string()),\n                account: Some(\"sample string\".to_string()),\n                access_key: Some(\"sample string\".to_string()),\n            }),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.Patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    new StreamSinkPatch\n    {\n        Uid = \"unique-identifier\",\n        Status = new SinkStatusIn { },\n        BatchSize = 100,\n        MaxWaitSecs = 1,\n        EventTypes = [],\n        Metadata = [],\n        Config = StreamSinkPatchConfig.AzureBlobStorage(\n            (\n                new AzureBlobStoragePatchConfig\n                {\n                    Container = \"sample string\",\n                    Account = \"sample string\",\n                    AccessKey = \"sample string\",\n                }\n            )\n        ),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink patch \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\" '{\n    \"batchSize\": 100,\n    \"config\": {\n      \"accessKey\": \"sample string\",\n      \"account\": \"sample string\",\n      \"container\": \"sample string\"\n    },\n    \"eventTypes\": [],\n    \"maxWaitSecs\": 1,\n    \"metadata\": {},\n    \"status\": {},\n    \"type\": \"azureBlobStorage\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"batchSize\": 100,\n    \"config\": {\n      \"accessKey\": \"sample string\",\n      \"account\": \"sample string\",\n      \"container\": \"sample string\"\n    },\n    \"eventTypes\": [],\n    \"maxWaitSecs\": 1,\n    \"metadata\": {},\n    \"status\": {},\n    \"type\": \"azureBlobStorage\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            },
            "put": {
                "description": "Update a sink.",
                "operationId": "v1.stream.sink.update",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StreamSinkIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamSinkOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Sink",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.update(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    uid: \"unique-identifier\",\n    status: {},\n    batchSize: 100,\n    maxWaitSecs: 1,\n    eventTypes: [],\n    metadata: {},\n    type: \"azureBlobStorage\",\n    config: {\n      container: \"sample string\",\n      account: \"sample string\",\n      accessKey: \"sample string\",\n    },\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.update(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    uid: \"unique-identifier\",\n    status: {},\n    batchSize: 100,\n    maxWaitSecs: 1,\n    eventTypes: [],\n    metadata: {},\n    type: \"azureBlobStorage\",\n    config: {\n      container: \"sample string\",\n      account: \"sample string\",\n      accessKey: \"sample string\",\n    },\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    StreamSinkIn(\n        uid=\"unique-identifier\",\n        status=SinkStatusIn(),\n        batch_size=100,\n        max_wait_secs=1,\n        event_types=[],\n        metadata={},\n        type=\"azureBlobStorage\",\n        config=AzureBlobStorageConfig(\n            container=\"sample string\",\n            account=\"sample string\",\n            access_key=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    StreamSinkIn(\n        uid=\"unique-identifier\",\n        status=SinkStatusIn(),\n        batch_size=100,\n        max_wait_secs=1,\n        event_types=[],\n        metadata={},\n        type=\"azureBlobStorage\",\n        config=AzureBlobStorageConfig(\n            container=\"sample string\",\n            account=\"sample string\",\n            access_key=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.Update(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tStreamSinkIn{\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tStatus:      ptr(SinkStatusIn{}),\n\t\tBatchSize:   ptr(uint16(100)),\n\t\tMaxWaitSecs: ptr(uint16(1)),\n\t\tEventTypes:  []string{},\n\t\tMetadata:    nil,\n\t\tConfig:      (AzureBlobStorageConfig{Container: \"sample string\", Account: \"sample string\", AccessKey: \"sample string\"}),\n\t\tType:        \"azureBlobStorage\",\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sink.update(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        StreamSinkIn(\n            uid = \"unique-identifier\",\n            status = SinkStatusIn(),\n            batchSize = 100u,\n            maxWaitSecs = 1u,\n            eventTypes = listOf(),\n            metadata = mapOf(),\n            config =\n                StreamSinkInConfig.AzureBlobStorage(\n                    AzureBlobStorageConfig(\n                        container = \"sample string\",\n                        account = \"sample string\",\n                        accessKey = \"sample string\",\n                    )\n                ),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getSink()\n        .update(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            \"sink_31Dc11sPYY9aLDkwPuGMa\",\n            new StreamSinkIn()\n                .uid(\"unique-identifier\")\n                .status(new SinkStatusIn())\n                .batchSize(100L)\n                .maxWaitSecs(1L)\n                .eventTypes(List.of())\n                .metadata(Map.of())\n                .config(new StreamSinkInConfig.AzureBlobStorage(new AzureBlobStorageConfig()\n                    .container(\"sample string\")\n                    .account(\"sample string\")\n                    .accessKey(\"sample string\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .sink\n  .update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    {\n      uid: \"unique-identifier\",\n      status: {},\n      batchSize: 100,\n      maxWaitSecs: 1,\n      eventTypes: [],\n      metadata: {},\n      config: {container: \"sample string\", account: \"sample string\", accessKey: \"sample string\"},\n      type: \"azureBlobStorage\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .update(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        StreamSinkIn {\n            uid: Some(\"unique-identifier\".to_string()),\n            status: Some(SinkStatusIn {}),\n            batch_size: Some(100),\n            max_wait_secs: Some(1),\n            event_types: Some(vec![]),\n            metadata: Some(HashMap::new()),\n            config: StreamSinkInConfig::AzureBlobStorage(AzureBlobStorageConfig {\n                container: \"sample string\".to_string(),\n                account: \"sample string\".to_string(),\n                access_key: \"sample string\".to_string(),\n            }),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.Update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    new StreamSinkIn\n    {\n        Uid = \"unique-identifier\",\n        Status = new SinkStatusIn { },\n        BatchSize = 100,\n        MaxWaitSecs = 1,\n        EventTypes = [],\n        Metadata = [],\n        Config = StreamSinkInConfig.AzureBlobStorage(\n            (\n                new AzureBlobStorageConfig\n                {\n                    Container = \"sample string\",\n                    Account = \"sample string\",\n                    AccessKey = \"sample string\",\n                }\n            )\n        ),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink update \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\" '{\n    \"batchSize\": 100,\n    \"config\": {\n      \"accessKey\": \"sample string\",\n      \"account\": \"sample string\",\n      \"container\": \"sample string\"\n    },\n    \"eventTypes\": [],\n    \"maxWaitSecs\": 1,\n    \"metadata\": {},\n    \"status\": {},\n    \"type\": \"azureBlobStorage\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"batchSize\": 100,\n    \"config\": {\n      \"accessKey\": \"sample string\",\n      \"account\": \"sample string\",\n      \"container\": \"sample string\"\n    },\n    \"eventTypes\": [],\n    \"maxWaitSecs\": 1,\n    \"metadata\": {},\n    \"status\": {},\n    \"type\": \"azureBlobStorage\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/events": {
            "get": {
                "description": "Iterate over a stream of events.\n\nThe sink must be of type `poller` to use the poller endpoint.",
                "operationId": "v1.stream.events.get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventStreamOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Poller Sink Stream Events",
                "tags": [
                    "Event"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.events.get(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.events.get(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.events.get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.events.get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Events.Get(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.stream.events.get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getEvents()\n        .get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.events.get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .events()\n    .get(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Events.Get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream events get \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/events' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/force-retry": {
            "post": {
                "description": "Forces a Sink to retry dispatch immediately (if the sink is retrying).",
                "operationId": "v1.stream.sink.force-retry",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Force Retry",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/headers": {
            "get": {
                "description": "Get the HTTP sink headers. Only valid for `http` or `otelTracing` sinks.",
                "operationId": "v1.stream.sink-headers-get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sinkHeadersGet(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sinkHeadersGet(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink_headers_get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink_headers_get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.SinkHeadersGet(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sinkHeadersGet(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response =\n        svix.getStream().sinkHeadersGet(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.sink_headers_get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink_headers_get(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.SinkHeadersGet(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink-headers-get \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Updates the Sink's headers. Only valid for `http` or `otelTracing` sinks.",
                "operationId": "v1.stream.sink-headers-patch",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HttpSinkHeadersPatchIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Sink Headers",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sinkHeadersPatch(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sinkHeadersPatch(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink_headers_patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    HttpSinkHeadersPatchIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink_headers_patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    HttpSinkHeadersPatchIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.SinkHeadersPatch(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tHttpSinkHeadersPatchIn{Headers: map[string]string{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sinkHeadersPatch(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        HttpSinkHeadersPatchIn(headers = mapOf(\"X-Example\" to \"123\", \"X-Foobar\" to \"Bar\")),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .sinkHeadersPatch(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            \"sink_31Dc11sPYY9aLDkwPuGMa\",\n            new HttpSinkHeadersPatchIn()\n                .headers(\n                    Map.ofEntries(Map.entry(\"X-Example\", \"123\"), Map.entry(\"X-Foobar\", \"Bar\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .sink_headers_patch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    {headers: {:\"X-Example\" => \"123\", :\"X-Foobar\" => \"Bar\"}}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink_headers_patch(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        HttpSinkHeadersPatchIn {\n            headers: HashMap::from([\n                (\"X-Example\".to_string(), \"123\".to_string()),\n                (\"X-Foobar\".to_string(), \"Bar\".to_string()),\n            ]),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.SinkHeadersPatch(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    new HttpSinkHeadersPatchIn\n    {\n        Headers = new() { { \"X-Example\", \"123\" }, { \"X-Foobar\", \"Bar\" } },\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink-headers-patch \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\" '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/last-acked-event": {
            "get": {
                "description": "Get the latest event acked from the stream",
                "operationId": "v1.stream.sink.get-last-acked-event",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Last Acked Event",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/next-event": {
            "get": {
                "description": "Get the oldest event that has not been acked by the sink",
                "operationId": "v1.stream.sink.events.get-next-event",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Next Stream Sink Event",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/secret": {
            "get": {
                "description": "Get the sink's signing secret (only supported for http sinks)\n\nThis is used to verify the authenticity of the delivery.\n\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.stream.sink.get-secret",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.getSecret(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.getSecret(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.get_secret(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.get_secret(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.GetSecret(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sink.getSecret(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getSink()\n        .getSecret(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.sink.get_secret(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .get_secret(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.GetSecret(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink get-secret \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/secret/rotate": {
            "post": {
                "description": "Rotates the signing secret (only supported for http sinks).",
                "operationId": "v1.stream.sink.rotate-secret",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointSecretRotateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Sink Secret",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.rotateSecret(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.rotateSecret(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.rotate_secret(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    EndpointSecretRotateIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.rotate_secret(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    EndpointSecretRotateIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.RotateSecret(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tEndpointSecretRotateIn{Key: ptr(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sink.rotateSecret(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        EndpointSecretRotateIn(key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getSink()\n        .rotateSecret(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            \"sink_31Dc11sPYY9aLDkwPuGMa\",\n            new EndpointSecretRotateIn().key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .sink\n  .rotate_secret(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    {key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .rotate_secret(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        EndpointSecretRotateIn {\n            key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.RotateSecret(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    new EndpointSecretRotateIn { Key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\" }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink rotate-secret \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    }
                ]
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/skip": {
            "post": {
                "description": "Skip events for a sink by moving its consumer group position event *after* the specified iterator.",
                "operationId": "v1.stream.sink.skip",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SkipParams"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Skip To Event",
                "tags": [
                    "Sink"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/api/v1/stream/{stream_id}/sink/{sink_id}/transformation": {
            "get": {
                "description": "Get the transformation code associated with this sink.",
                "operationId": "v1.stream.sink-transformation-get",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SinkTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sinkTransformationGet(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sinkTransformationGet(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink_transformation_get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink_transformation_get(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.SinkTransformationGet(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sinkTransformationGet(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .sinkTransformationGet(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.stream.sink_transformation_get(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink_transformation_get(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.SinkTransformationGet(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink-transformation-get \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this sink.",
                "operationId": "v1.stream.sink.transformation-partial-update",
                "parameters": [
                    {
                        "description": "The Stream's ID or UID.",
                        "in": "path",
                        "name": "stream_id",
                        "required": true,
                        "schema": {
                            "description": "The Stream's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The StreamSink's ID or UID.",
                        "in": "path",
                        "name": "sink_id",
                        "required": true,
                        "schema": {
                            "description": "The StreamSink's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SinkTransformIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmptyResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Set Sink Transformation",
                "tags": [
                    "Sink"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.stream.sink.transformationPartialUpdate(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    code: \"sample string\",\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.stream.sink.transformationPartialUpdate(\n  \"strm_31Dc0DD72P5AddYUguyBd\",\n  \"sink_31Dc11sPYY9aLDkwPuGMa\",\n  {\n    code: \"sample string\",\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.stream.sink.transformation_partial_update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    SinkTransformIn(\n        code=\"sample string\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.stream.sink.transformation_partial_update(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    SinkTransformIn(\n        code=\"sample string\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Stream.Sink.TransformationPartialUpdate(\n\tctx,\n\t\"strm_31Dc0DD72P5AddYUguyBd\",\n\t\"sink_31Dc11sPYY9aLDkwPuGMa\",\n\tSinkTransformIn{Code: ptr(\"sample string\")},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.stream.sink.transformationPartialUpdate(\n        \"strm_31Dc0DD72P5AddYUguyBd\",\n        \"sink_31Dc11sPYY9aLDkwPuGMa\",\n        SinkTransformIn(code = \"sample string\"),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getStream()\n        .getSink()\n        .transformationPartialUpdate(\n            \"strm_31Dc0DD72P5AddYUguyBd\",\n            \"sink_31Dc11sPYY9aLDkwPuGMa\",\n            new SinkTransformIn().code(\"sample string\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .stream\n  .sink\n  .transformation_partial_update(\"strm_31Dc0DD72P5AddYUguyBd\", \"sink_31Dc11sPYY9aLDkwPuGMa\", {code: \"sample string\"})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .stream()\n    .sink()\n    .transformation_partial_update(\n        \"strm_31Dc0DD72P5AddYUguyBd\".to_string(),\n        \"sink_31Dc11sPYY9aLDkwPuGMa\".to_string(),\n        SinkTransformIn {\n            code: Some(\"sample string\".to_string()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Stream.Sink.TransformationPartialUpdate(\n    \"strm_31Dc0DD72P5AddYUguyBd\",\n    \"sink_31Dc11sPYY9aLDkwPuGMa\",\n    new SinkTransformIn { Code = \"sample string\" }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix stream sink transformation-partial-update \"strm_31Dc0DD72P5AddYUguyBd\" \"sink_31Dc11sPYY9aLDkwPuGMa\" '{\n    \"code\": \"sample string\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/stream/strm_31Dc0DD72P5AddYUguyBd/sink/sink_31Dc11sPYY9aLDkwPuGMa/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"code\": \"sample string\"\n  }'"
                    }
                ]
            }
        },
        "/dashboard/survey": {
            "post": {
                "description": "Submit a survey entry for a user",
                "operationId": "v1.dashboard.survey.submit",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SurveyIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SurveyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Submit Survey",
                "tags": [
                    "Survey"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/ingest/api/v1/source": {
            "get": {
                "description": "List of all the organization's Ingest Sources.",
                "operationId": "v1.ingest.source.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 26,
                            "minLength": 26,
                            "nullable": true,
                            "pattern": "^src_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_IngestSourceOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Ingest Sources",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.source.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.source.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.source.list()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.source.list()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Source.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.ingest.source.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest().getSource().list();"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.source.list"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix.ingest().source().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Source.List();"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest source list"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create Ingest Source.",
                "operationId": "v1.ingest.source.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourceIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.source.create({\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n  type: \"cron\",\n  config: {\n    schedule: \"sample string\",\n    payload: \"sample string\",\n    contentType: \"sample string\",\n  },\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.source.create({\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n  type: \"cron\",\n  config: {\n    schedule: \"sample string\",\n    payload: \"sample string\",\n    contentType: \"sample string\",\n  },\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.source.create(\n    IngestSourceIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n        type=\"cron\",\n        config=CronConfig(\n            schedule=\"sample string\",\n            payload=\"sample string\",\n            content_type=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.source.create(\n    IngestSourceIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n        type=\"cron\",\n        config=CronConfig(\n            schedule=\"sample string\",\n            payload=\"sample string\",\n            content_type=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Source.Create(\n\tctx,\n\tIngestSourceIn{\n\t\tName:     \"sample string\",\n\t\tUid:      ptr(\"unique-identifier\"),\n\t\tMetadata: nil,\n\t\tConfig:   (CronConfig{Schedule: \"sample string\", Payload: \"sample string\", ContentType: ptr(\"sample string\")}),\n\t\tType:     \"cron\",\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.source.create(\n        IngestSourceIn(\n            name = \"sample string\",\n            uid = \"unique-identifier\",\n            metadata = mapOf(),\n            config =\n                IngestSourceInConfig.Cron(\n                    CronConfig(\n                        schedule = \"sample string\",\n                        payload = \"sample string\",\n                        contentType = \"sample string\",\n                    )\n                ),\n        )\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getSource()\n        .create(new IngestSourceIn()\n            .name(\"sample string\")\n            .uid(\"unique-identifier\")\n            .metadata(Map.of())\n            .config(new IngestSourceInConfig.Cron(new CronConfig()\n                .schedule(\"sample string\")\n                .payload(\"sample string\")\n                .contentType(\"sample string\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .ingest\n  .source\n  .create(\n    {\n      name: \"sample string\",\n      uid: \"unique-identifier\",\n      metadata: {},\n      config: {schedule: \"sample string\", payload: \"sample string\", contentType: \"sample string\"},\n      type: \"cron\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .source()\n    .create(\n        IngestSourceIn {\n            name: \"sample string\".to_string(),\n            uid: Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n            config: IngestSourceInConfig::Cron(CronConfig {\n                schedule: \"sample string\".to_string(),\n                payload: \"sample string\".to_string(),\n                content_type: Some(\"sample string\".to_string()),\n            }),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Source.Create(\n    new IngestSourceIn\n    {\n        Name = \"sample string\",\n        Uid = \"unique-identifier\",\n        Metadata = [],\n        Config = IngestSourceInConfig.Cron(\n            (\n                new CronConfig\n                {\n                    Schedule = \"sample string\",\n                    Payload = \"sample string\",\n                    ContentType = \"sample string\",\n                }\n            )\n        ),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest source create '{\n    \"config\": {\n      \"contentType\": \"sample string\",\n      \"payload\": \"sample string\",\n      \"schedule\": \"sample string\"\n    },\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"type\": \"cron\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"config\": {\n      \"contentType\": \"sample string\",\n      \"payload\": \"sample string\",\n      \"schedule\": \"sample string\"\n    },\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"type\": \"cron\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}": {
            "delete": {
                "description": "Delete an Ingest Source.",
                "operationId": "v1.ingest.source.delete",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.source.delete(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.ingest.source.delete(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.source.delete(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.ingest.source.delete(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Ingest.Source.Delete(ctx, \"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.source.delete(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest().getSource().delete(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.source.delete(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest().source().delete(\"src_31Dc4Mx7vQVLfxFgArIhq\".to_string()).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Source.Delete(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest source delete \"src_31Dc4Mx7vQVLfxFgArIhq\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an Ingest Source by id or uid.",
                "operationId": "v1.ingest.source.get",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.source.get(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.source.get(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.source.get(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.source.get(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Source.Get(ctx, \"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.ingest.source.get(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest().getSource().get(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.source.get(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .source()\n    .get(\"src_31Dc4Mx7vQVLfxFgArIhq\".to_string())\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Source.Get(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest source get \"src_31Dc4Mx7vQVLfxFgArIhq\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Patch an Ingest Source.",
                "operationId": "v1.ingest.source.patch",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourcePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Ingest Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "put": {
                "description": "Update an Ingest Source.",
                "operationId": "v1.ingest.source.update",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourceIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestSourceOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Source",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.source.update(\"src_31Dc4Mx7vQVLfxFgArIhq\", {\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n  type: \"cron\",\n  config: {\n    schedule: \"sample string\",\n    payload: \"sample string\",\n    contentType: \"sample string\",\n  },\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.source.update(\"src_31Dc4Mx7vQVLfxFgArIhq\", {\n  name: \"sample string\",\n  uid: \"unique-identifier\",\n  metadata: {},\n  type: \"cron\",\n  config: {\n    schedule: \"sample string\",\n    payload: \"sample string\",\n    contentType: \"sample string\",\n  },\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.source.update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    IngestSourceIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n        type=\"cron\",\n        config=CronConfig(\n            schedule=\"sample string\",\n            payload=\"sample string\",\n            content_type=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.source.update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    IngestSourceIn(\n        name=\"sample string\",\n        uid=\"unique-identifier\",\n        metadata={},\n        type=\"cron\",\n        config=CronConfig(\n            schedule=\"sample string\",\n            payload=\"sample string\",\n            content_type=\"sample string\",\n        ),\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Source.Update(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\tIngestSourceIn{\n\t\tName:     \"sample string\",\n\t\tUid:      ptr(\"unique-identifier\"),\n\t\tMetadata: nil,\n\t\tConfig:   (CronConfig{Schedule: \"sample string\", Payload: \"sample string\", ContentType: ptr(\"sample string\")}),\n\t\tType:     \"cron\",\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.source.update(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\",\n        IngestSourceIn(\n            name = \"sample string\",\n            uid = \"unique-identifier\",\n            metadata = mapOf(),\n            config =\n                IngestSourceInConfig.Cron(\n                    CronConfig(\n                        schedule = \"sample string\",\n                        payload = \"sample string\",\n                        contentType = \"sample string\",\n                    )\n                ),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getSource()\n        .update(\n            \"src_31Dc4Mx7vQVLfxFgArIhq\",\n            new IngestSourceIn()\n                .name(\"sample string\")\n                .uid(\"unique-identifier\")\n                .metadata(Map.of())\n                .config(new IngestSourceInConfig.Cron(new CronConfig()\n                    .schedule(\"sample string\")\n                    .payload(\"sample string\")\n                    .contentType(\"sample string\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .ingest\n  .source\n  .update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    {\n      name: \"sample string\",\n      uid: \"unique-identifier\",\n      metadata: {},\n      config: {schedule: \"sample string\", payload: \"sample string\", contentType: \"sample string\"},\n      type: \"cron\"\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .source()\n    .update(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        IngestSourceIn {\n            name: \"sample string\".to_string(),\n            uid: Some(\"unique-identifier\".to_string()),\n            metadata: Some(HashMap::new()),\n            config: IngestSourceInConfig::Cron(CronConfig {\n                schedule: \"sample string\".to_string(),\n                payload: \"sample string\".to_string(),\n                content_type: Some(\"sample string\".to_string()),\n            }),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Source.Update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    new IngestSourceIn\n    {\n        Name = \"sample string\",\n        Uid = \"unique-identifier\",\n        Metadata = [],\n        Config = IngestSourceInConfig.Cron(\n            (\n                new CronConfig\n                {\n                    Schedule = \"sample string\",\n                    Payload = \"sample string\",\n                    ContentType = \"sample string\",\n                }\n            )\n        ),\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest source update \"src_31Dc4Mx7vQVLfxFgArIhq\" '{\n    \"config\": {\n      \"contentType\": \"sample string\",\n      \"payload\": \"sample string\",\n      \"schedule\": \"sample string\"\n    },\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"type\": \"cron\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"config\": {\n      \"contentType\": \"sample string\",\n      \"payload\": \"sample string\",\n      \"schedule\": \"sample string\"\n    },\n    \"metadata\": {},\n    \"name\": \"sample string\",\n    \"type\": \"cron\",\n    \"uid\": \"unique-identifier\"\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/dashboard": {
            "post": {
                "description": "Get access to the Ingest Source Consumer Portal.",
                "operationId": "v1.ingest.dashboard",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSourceConsumerPortalAccessIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Ingest Source Consumer Portal",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.dashboard(\"src_31Dc4Mx7vQVLfxFgArIhq\", {\n  expiry: 1,\n  readOnly: true,\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.dashboard(\"src_31Dc4Mx7vQVLfxFgArIhq\", {\n  expiry: 1,\n  readOnly: true,\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.dashboard(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    IngestSourceConsumerPortalAccessIn(\n        expiry=1,\n        read_only=True,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.dashboard(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    IngestSourceConsumerPortalAccessIn(\n        expiry=1,\n        read_only=True,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Dashboard(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\tIngestSourceConsumerPortalAccessIn{Expiry: ptr(uint64(1)), ReadOnly: ptr(true)},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.dashboard(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\",\n        IngestSourceConsumerPortalAccessIn(expiry = 1u, readOnly = true),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .dashboard(\n            \"src_31Dc4Mx7vQVLfxFgArIhq\",\n            new IngestSourceConsumerPortalAccessIn().expiry(1L).readOnly(true));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.dashboard(\"src_31Dc4Mx7vQVLfxFgArIhq\", {expiry: 1, readOnly: true})"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .dashboard(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        IngestSourceConsumerPortalAccessIn {\n            expiry: Some(1),\n            read_only: Some(true),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Dashboard(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    new IngestSourceConsumerPortalAccessIn { Expiry = 1, ReadOnly = true }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest dashboard \"src_31Dc4Mx7vQVLfxFgArIhq\" '{\n    \"expiry\": 1,\n    \"readOnly\": true\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/dashboard' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"expiry\": 1,\n    \"readOnly\": true\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint": {
            "get": {
                "description": "List ingest endpoints.",
                "operationId": "v1.ingest.endpoint.list",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The iterator returned from a prior invocation",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The iterator returned from a prior invocation",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "maxLength": 30,
                            "minLength": 30,
                            "nullable": true,
                            "pattern": "^ep_[A-Za-z0-9]{27}$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_IngestEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Ingest Endpoints",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.endpoint.list(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.endpoint.list(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.endpoint.list(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.endpoint.list(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Endpoint.List(ctx, \"src_31Dc4Mx7vQVLfxFgArIhq\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.ingest.endpoint.list(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest().getEndpoint().list(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.endpoint.list(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .endpoint()\n    .list(\"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(), None)\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.List(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint list \"src_31Dc4Mx7vQVLfxFgArIhq\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.create",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.endpoint.create(\"src_31Dc4Mx7vQVLfxFgArIhq\", {\n  description: \"An example endpoint name\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  url: \"https://example.com/webhook/\",\n  disabled: true,\n  secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.endpoint.create(\"src_31Dc4Mx7vQVLfxFgArIhq\", {\n  description: \"An example endpoint name\",\n  rateLimit: 1,\n  uid: \"unique-identifier\",\n  url: \"https://example.com/webhook/\",\n  disabled: true,\n  secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  metadata: {},\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.endpoint.create(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    IngestEndpointIn(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.endpoint.create(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    IngestEndpointIn(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Endpoint.Create(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\tIngestEndpointIn{\n\t\tDescription: ptr(\"An example endpoint name\"),\n\t\tRateLimit:   ptr(uint16(1)),\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tUrl:         \"https://example.com/webhook/\",\n\t\tDisabled:    ptr(true),\n\t\tSecret:      ptr(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n\t\tMetadata:    nil,\n\t},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.endpoint.create(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\",\n        IngestEndpointIn(\n            description = \"An example endpoint name\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            url = \"https://example.com/webhook/\",\n            disabled = true,\n            secret = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getEndpoint()\n        .create(\n            \"src_31Dc4Mx7vQVLfxFgArIhq\",\n            new IngestEndpointIn()\n                .description(\"An example endpoint name\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .url(URI.create(\"https://example.com/webhook/\"))\n                .disabled(true)\n                .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .ingest\n  .endpoint\n  .create(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    {\n      description: \"An example endpoint name\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      url: \"https://example.com/webhook/\",\n      disabled: true,\n      secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n      metadata: {}\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .endpoint()\n    .create(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        IngestEndpointIn {\n            description: Some(\"An example endpoint name\".to_string()),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            url: \"https://example.com/webhook/\".to_string(),\n            disabled: Some(true),\n            secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n            metadata: Some(HashMap::new()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.Create(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    new IngestEndpointIn\n    {\n        Description = \"An example endpoint name\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Url = \"https://example.com/webhook/\",\n        Disabled = true,\n        Secret = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint create \"src_31Dc4Mx7vQVLfxFgArIhq\" '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}": {
            "delete": {
                "description": "Delete an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.delete",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.delete(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.ingest.endpoint.delete(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.endpoint.delete(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.ingest.endpoint.delete(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Ingest.Endpoint.Delete(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.endpoint.delete(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest()\n        .getEndpoint()\n        .delete(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.endpoint.delete(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest()\n    .endpoint()\n    .delete(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.Delete(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint delete \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN'"
                    }
                ]
            },
            "get": {
                "description": "Get an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.get",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.endpoint.get(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.endpoint.get(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.endpoint.get(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.endpoint.get(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Endpoint.Get(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.endpoint.get(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getEndpoint()\n        .get(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.endpoint.get(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .endpoint()\n    .get(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.Get(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint get \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Update an ingest endpoint.",
                "operationId": "v1.ingest.endpoint.update",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Ingest Endpoint",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.endpoint.update(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"An example endpoint name\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: true,\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.endpoint.update(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    description: \"An example endpoint name\",\n    rateLimit: 1,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: true,\n    metadata: {},\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.endpoint.update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointUpdate(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.endpoint.update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointUpdate(\n        description=\"An example endpoint name\",\n        rate_limit=1,\n        uid=\"unique-identifier\",\n        url=\"https://example.com/webhook/\",\n        disabled=True,\n        metadata={},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Endpoint.Update(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tIngestEndpointUpdate{\n\t\tDescription: ptr(\"An example endpoint name\"),\n\t\tRateLimit:   ptr(uint16(1)),\n\t\tUid:         ptr(\"unique-identifier\"),\n\t\tUrl:         \"https://example.com/webhook/\",\n\t\tDisabled:    ptr(true),\n\t\tMetadata:    nil,\n\t},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.endpoint.update(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n        IngestEndpointUpdate(\n            description = \"An example endpoint name\",\n            rateLimit = 1u,\n            uid = \"unique-identifier\",\n            url = \"https://example.com/webhook/\",\n            disabled = true,\n            metadata = mapOf(),\n        ),\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getEndpoint()\n        .update(\n            \"src_31Dc4Mx7vQVLfxFgArIhq\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new IngestEndpointUpdate()\n                .description(\"An example endpoint name\")\n                .rateLimit(1L)\n                .uid(\"unique-identifier\")\n                .url(URI.create(\"https://example.com/webhook/\"))\n                .disabled(true)\n                .metadata(Map.of()));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .ingest\n  .endpoint\n  .update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {\n      description: \"An example endpoint name\",\n      rateLimit: 1,\n      uid: \"unique-identifier\",\n      url: \"https://example.com/webhook/\",\n      disabled: true,\n      metadata: {}\n    }\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .endpoint()\n    .update(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        IngestEndpointUpdate {\n            description: Some(\"An example endpoint name\".to_string()),\n            rate_limit: Some(1),\n            uid: Some(\"unique-identifier\".to_string()),\n            url: \"https://example.com/webhook/\".to_string(),\n            disabled: Some(true),\n            metadata: Some(HashMap::new()),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.Update(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new IngestEndpointUpdate\n    {\n        Description = \"An example endpoint name\",\n        RateLimit = 1,\n        Uid = \"unique-identifier\",\n        Url = \"https://example.com/webhook/\",\n        Disabled = true,\n        Metadata = [],\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint update \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"description\": \"An example endpoint name\",\n    \"disabled\": true,\n    \"metadata\": {},\n    \"rateLimit\": 1,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\"\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/headers": {
            "get": {
                "description": "Get the additional headers to be sent with the ingest.",
                "operationId": "v1.ingest.endpoint.get-headers",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Endpoint Headers",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.endpoint.getHeaders(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.endpoint.getHeaders(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.endpoint.get_headers(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.endpoint.get_headers(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Endpoint.GetHeaders(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.endpoint.getHeaders(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getEndpoint()\n        .getHeaders(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.endpoint.get_headers(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .endpoint()\n    .get_headers(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.GetHeaders(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint get-headers \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Set the additional headers to be sent to the endpoint.",
                "operationId": "v1.ingest.endpoint.update-headers",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointHeadersIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Ingest Endpoint Headers",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.updateHeaders(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.ingest.endpoint.updateHeaders(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    headers: { \"X-Example\": \"123\", \"X-Foobar\": \"Bar\" },\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.endpoint.update_headers(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointHeadersIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.ingest.endpoint.update_headers(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointHeadersIn(\n        headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Ingest.Endpoint.UpdateHeaders(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tIngestEndpointHeadersIn{Headers: map[string]string{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.endpoint.updateHeaders(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointHeadersIn(headers = mapOf(\"X-Example\" to \"123\", \"X-Foobar\" to \"Bar\")),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest()\n        .getEndpoint()\n        .updateHeaders(\n            \"src_31Dc4Mx7vQVLfxFgArIhq\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new IngestEndpointHeadersIn()\n                .headers(\n                    Map.ofEntries(Map.entry(\"X-Example\", \"123\"), Map.entry(\"X-Foobar\", \"Bar\"))));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .ingest\n  .endpoint\n  .update_headers(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {headers: {:\"X-Example\" => \"123\", :\"X-Foobar\" => \"Bar\"}}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest()\n    .endpoint()\n    .update_headers(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        IngestEndpointHeadersIn {\n            headers: HashMap::from([\n                (\"X-Example\".to_string(), \"123\".to_string()),\n                (\"X-Foobar\".to_string(), \"Bar\".to_string()),\n            ]),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.UpdateHeaders(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new IngestEndpointHeadersIn\n    {\n        Headers = new() { { \"X-Example\", \"123\" }, { \"X-Foobar\", \"Bar\" } },\n    }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint update-headers \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"headers\": {\n      \"X-Example\": \"123\",\n      \"X-Foobar\": \"Bar\"\n    }\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret": {
            "get": {
                "description": "Get an ingest endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.ingest.endpoint.get-secret",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Endpoint Secret",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.endpoint.getSecret(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.endpoint.getSecret(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.endpoint.get_secret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.endpoint.get_secret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Endpoint.GetSecret(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.endpoint.getSecret(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getEndpoint()\n        .getSecret(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.endpoint.get_secret(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .endpoint()\n    .get_secret(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.GetSecret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint get-secret \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret/rotate": {
            "post": {
                "description": "Rotates an ingest endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
                "operationId": "v1.ingest.endpoint.rotate-secret",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointSecretIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Ingest Endpoint Secret",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.rotateSecret(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.ingest.endpoint.rotateSecret(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.endpoint.rotate_secret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointSecretIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.ingest.endpoint.rotate_secret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointSecretIn(\n        key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Ingest.Endpoint.RotateSecret(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tIngestEndpointSecretIn{Key: ptr(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")},\n\tnil,\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.endpoint.rotateSecret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointSecretIn(key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest()\n        .getEndpoint()\n        .rotateSecret(\n            \"src_31Dc4Mx7vQVLfxFgArIhq\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new IngestEndpointSecretIn().key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .ingest\n  .endpoint\n  .rotate_secret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest()\n    .endpoint()\n    .rotate_secret(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        IngestEndpointSecretIn {\n            key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n        },\n        None,\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.RotateSecret(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new IngestEndpointSecretIn { Key = \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\" }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint rotate-secret \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/transformation": {
            "get": {
                "description": "Get the transformation code associated with this ingest endpoint.",
                "operationId": "v1.ingest.endpoint.get-transformation",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestEndpointTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ingest Endpoint Transformation",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.endpoint.getTransformation(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.endpoint.getTransformation(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.endpoint.get_transformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.endpoint.get_transformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Endpoint.GetTransformation(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response =\n    svix.ingest.endpoint.getTransformation(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\",\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    )"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest()\n        .getEndpoint()\n        .getTransformation(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.endpoint.get_transformation(\"src_31Dc4Mx7vQVLfxFgArIhq\", \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .endpoint()\n    .get_transformation(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.GetTransformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\"\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint get-transformation \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this ingest endpoint.",
                "operationId": "v1.ingest.endpoint.set-transformation",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The Endpoint's ID or UID.",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The Endpoint's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointTransformationPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Ingest Endpoint Transformation",
                "tags": [
                    "Ingest Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.ingest.endpoint.setTransformation(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    code: \"sample string\",\n    enabled: true,\n  }\n);"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "await svix.ingest.endpoint.setTransformation(\n  \"src_31Dc4Mx7vQVLfxFgArIhq\",\n  \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n  {\n    code: \"sample string\",\n    enabled: true,\n  }\n);"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.ingest.endpoint.set_transformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointTransformationPatch(\n        code=\"sample string\",\n        enabled=True,\n    ),\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "await svix.ingest.endpoint.set_transformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointTransformationPatch(\n        code=\"sample string\",\n        enabled=True,\n    ),\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svix.Ingest.Endpoint.SetTransformation(\n\tctx,\n\t\"src_31Dc4Mx7vQVLfxFgArIhq\",\n\t\"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n\tIngestEndpointTransformationPatch{Code: NewNullable(\"sample string\"), Enabled: ptr(true)},\n)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.ingest.endpoint.setTransformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    IngestEndpointTransformationPatch(code = MaybeUnset.Present(\"sample string\"), enabled = true),\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIngest()\n        .getEndpoint()\n        .setTransformation(\n            \"src_31Dc4Mx7vQVLfxFgArIhq\",\n            \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n            new IngestEndpointTransformationPatch().code(\"sample string\").enabled(true));"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix\n  .ingest\n  .endpoint\n  .set_transformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    {code: \"sample string\", enabled: true}\n  )"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.ingest()\n    .endpoint()\n    .set_transformation(\n        \"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(),\n        \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\".to_string(),\n        IngestEndpointTransformationPatch {\n            code: js_option::JsOption::Some(\"sample string\".to_string()),\n            enabled: Some(true),\n        },\n    )\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Endpoint.SetTransformation(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n    \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\",\n    new IngestEndpointTransformationPatch { Code = \"sample string\", Enabled = true }\n);"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest endpoint set-transformation \"src_31Dc4Mx7vQVLfxFgArIhq\" \"ep_33ZIBDmz66FcPG35FnsbM6Ie4X1\" '{\n    \"code\": \"sample string\",\n    \"enabled\": true\n  }'"
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/endpoint/ep_33ZIBDmz66FcPG35FnsbM6Ie4X1/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"code\": \"sample string\",\n    \"enabled\": true\n  }'"
                    }
                ]
            }
        },
        "/ingest/api/v1/source/{source_id}/in/{token}": {
            "get": {
                "description": "Non-legacy (using a token) ingest webhook.",
                "operationId": "v1.ingest",
                "parameters": [
                    {
                        "description": "The Source's ID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID.",
                            "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 26,
                            "minLength": 26,
                            "pattern": "^src_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "maxLength": 16,
                            "minLength": 16,
                            "pattern": "^[A-Za-z0-9]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {}
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestResponse"
                                }
                            }
                        },
                        "description": "Some providers need to generate responses to incoming ingest requests."
                    },
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Ingest",
                "tags": [
                    "Ingest Message"
                ],
                "x-hidden": true,
                "x-internal": true
            },
            "post": {
                "description": "Non-legacy (using a token) ingest webhook.",
                "operationId": "v1.ingest",
                "parameters": [
                    {
                        "description": "The Source's ID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID.",
                            "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
                            "maxLength": 26,
                            "minLength": 26,
                            "pattern": "^src_[A-Za-z0-9]{22}$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "maxLength": 16,
                            "minLength": 16,
                            "pattern": "^[A-Za-z0-9]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {}
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestResponse"
                                }
                            }
                        },
                        "description": "Some providers need to generate responses to incoming ingest requests."
                    },
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Ingest",
                "tags": [
                    "Ingest Message"
                ],
                "x-hidden": true,
                "x-internal": true
            }
        },
        "/ingest/api/v1/source/{source_id}/token/rotate": {
            "post": {
                "description": "Rotate the Ingest Source's Url Token.\n\nThis will rotate the ingest source's token, which is used to\nconstruct the unique `ingestUrl` for the source. Previous tokens\nwill remain valid for 48 hours after rotation. The token can be\nrotated a maximum of three times within the 48-hour period.",
                "operationId": "v1.ingest.source.rotate-token",
                "parameters": [
                    {
                        "description": "The Source's ID or UID.",
                        "in": "path",
                        "name": "source_id",
                        "required": true,
                        "schema": {
                            "description": "The Source's ID or UID.",
                            "example": "unique-identifier",
                            "maxLength": 60,
                            "minLength": 1,
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RotateTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Ingest Token",
                "tags": [
                    "Ingest Source"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const response = await svix.ingest.source.rotateToken(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "TypeScript",
                        "source": "const response = await svix.ingest.source.rotateToken(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "response = svix.ingest.source.rotate_token(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python (Async)",
                        "source": "response = await svix.ingest.source.rotate_token(\n    \"src_31Dc4Mx7vQVLfxFgArIhq\",\n)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "response, err := svix.Ingest.Source.RotateToken(ctx, \"src_31Dc4Mx7vQVLfxFgArIhq\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val response = svix.ingest.source.rotateToken(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "var response = svix.getIngest().getSource().rotateToken(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "response = svix.ingest.source.rotate_token(\"src_31Dc4Mx7vQVLfxFgArIhq\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let response = svix\n    .ingest()\n    .source()\n    .rotate_token(\"src_31Dc4Mx7vQVLfxFgArIhq\".to_string(), None)\n    .await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var response = svix.Ingest.Source.RotateToken(\"src_31Dc4Mx7vQVLfxFgArIhq\");"
                    },
                    {
                        "label": "CLI",
                        "lang": "CLI",
                        "source": "svix ingest source rotate-token \"src_31Dc4Mx7vQVLfxFgArIhq\""
                    },
                    {
                        "label": "cURL",
                        "lang": "cURL",
                        "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/src_31Dc4Mx7vQVLfxFgArIhq/token/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json'"
                    }
                ]
            }
        }
    },
    "servers": [
        {
            "description": "The Svix EU region",
            "url": "https://api.eu.svix.com/"
        },
        {
            "description": "The Svix US region",
            "url": "https://api.us.svix.com/"
        },
        {
            "description": "The Svix Canada region",
            "url": "https://api.ca.svix.com/"
        },
        {
            "description": "The Svix Australia region",
            "url": "https://api.au.svix.com/"
        },
        {
            "description": "The Svix India region",
            "url": "https://api.in.svix.com/"
        }
    ],
    "tags": [
        {
            "description": "Consumer Applications are where messages are sent to. In most cases you would want to have one application for each of your users.",
            "name": "Application"
        },
        {
            "description": "Messages are the webhook events being sent.",
            "name": "Message"
        },
        {
            "description": "Attempts to deliver `Message`s to `Endpoint`s.",
            "name": "Message Attempt"
        },
        {
            "description": "Endpoints are the URLs messages will be sent to. Each application can have up to 50 endpoints and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).",
            "name": "Endpoint"
        },
        {
            "description": "Integrations are services your users connect an application to. An integration can manage the application and its endpoints.",
            "name": "Integration"
        },
        {
            "description": "Event types are identifiers denoting the type of message being sent. Event types are primarily used to decide which events are sent to which endpoint.",
            "name": "Event Type"
        },
        {
            "description": "Easily give your users access to our pre-built management UI.",
            "name": "Authentication"
        },
        {
            "description": "Health checks for the API.",
            "name": "Health"
        },
        {
            "description": "The webhooks the Svix service sends to notify you of events.",
            "name": "Webhook"
        },
        {
            "description": "The background tasks that have been executed for your environment.",
            "name": "Background Task"
        },
        {
            "description": "Generate statistics about your Svix utilization",
            "name": "Statistics"
        },
        {
            "description": "Configure where operational webhooks are sent to.",
            "name": "Webhook Endpoint"
        },
        {
            "description": "Manage your environments like development, staging and production.",
            "name": "Environment"
        },
        {
            "description": "Configure where Svix Ingest sends messages.",
            "name": "Ingest Endpoint"
        }
    ],
    "webhooks": {
        "background_task.finished": {
            "post": {
                "description": "Sent when a background task is finished.",
                "operationId": "background_task.finished",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "data": {
                                        "appStats": [
                                            {
                                                "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                                "appUid": null,
                                                "messageDestinations": 343
                                            }
                                        ]
                                    },
                                    "status": "finished",
                                    "task": "application.stats",
                                    "taskId": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "background_task.finished"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/BackgroundTaskFinishedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "background_task.finished",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "endpoint.created": {
            "post": {
                "description": "Sent when an endpoint is created.",
                "operationId": "endpoint.created",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.created"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointCreatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.created",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.deleted": {
            "post": {
                "description": "Sent when an endpoint is deleted.",
                "operationId": "endpoint.deleted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.deleted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDeletedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.deleted",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.disabled": {
            "post": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "operationId": "endpoint.disabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier",
                                    "failSince": "2022-11-06T15:04:05Z",
                                    "trigger": "automatic"
                                },
                                "type": "endpoint.disabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDisabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.disabled",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.enabled": {
            "post": {
                "description": "Sent when an endpoint has been enabled.",
                "operationId": "endpoint.enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.enabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointEnabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.enabled",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.updated": {
            "post": {
                "description": "Sent when an endpoint is updated.",
                "operationId": "endpoint.updated",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.updated"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointUpdatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.updated",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "ingest.endpoint.disabled": {
            "post": {
                "description": "Sent when an ingest endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "operationId": "ingest.endpoint.disabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier",
                                    "failSince": "2022-11-06T15:04:05Z",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr",
                                    "trigger": "automatic"
                                },
                                "type": "ingest.endpoint.disabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointDisabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.endpoint.disabled",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "ingest.message.attempt.exhausted": {
            "post": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "operationId": "ingest.message.attempt.exhausted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr"
                                },
                                "type": "ingest.message.attempt.exhausted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestMessageAttemptExhaustedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.message.attempt.exhausted",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "ingest.message.attempt.failing": {
            "post": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `ingest.message.attempt.exhausted` which is sent after the last failure.",
                "operationId": "ingest.message.attempt.failing",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr"
                                },
                                "type": "ingest.message.attempt.failing"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestMessageAttemptFailingEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.message.attempt.failing",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "ingest.message.attempt.recovered": {
            "post": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "operationId": "ingest.message.attempt.recovered",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 200,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr"
                                },
                                "type": "ingest.message.attempt.recovered"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestMessageAttemptRecoveredEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.message.attempt.recovered",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "message.attempt.exhausted": {
            "post": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "operationId": "message.attempt.exhausted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.exhausted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptExhaustedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.exhausted",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "message.attempt.failing": {
            "post": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
                "operationId": "message.attempt.failing",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.failing"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptFailingEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.failing",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "message.attempt.recovered": {
            "post": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "operationId": "message.attempt.recovered",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 200,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.recovered"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptRecoveredEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.recovered",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        }
    },
    "x-tagGroups": [
        {
            "name": "General",
            "tags": [
                "Application",
                "Event Type",
                "Background Task",
                "Environment"
            ]
        },
        {
            "name": "Application specific",
            "tags": [
                "Authentication",
                "Endpoint",
                "Message",
                "Message Attempt",
                "Integration"
            ]
        },
        {
            "name": "Ingest",
            "tags": [
                "Ingest Source",
                "Ingest Endpoint"
            ]
        },
        {
            "name": "Stream",
            "tags": [
                "Stream",
                "Sink",
                "Event",
                "Stream Event Type",
                "Stream Authentication"
            ]
        },
        {
            "name": "Operational Webhooks",
            "tags": [
                "Webhook",
                "Webhook Endpoint"
            ]
        },
        {
            "name": "Statistics",
            "tags": [
                "Statistics"
            ]
        },
        {
            "name": "Utility",
            "tags": [
                "Health"
            ]
        }
    ],
    "x-webhooks": {
        "background_task.finished": {
            "post": {
                "description": "Sent when a background task is finished.",
                "operationId": "background_task.finished",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "data": {
                                        "appStats": [
                                            {
                                                "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                                "appUid": null,
                                                "messageDestinations": 343
                                            }
                                        ]
                                    },
                                    "status": "finished",
                                    "task": "application.stats",
                                    "taskId": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "background_task.finished"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/BackgroundTaskFinishedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "background_task.finished",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "endpoint.created": {
            "post": {
                "description": "Sent when an endpoint is created.",
                "operationId": "endpoint.created",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.created"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointCreatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.created",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.deleted": {
            "post": {
                "description": "Sent when an endpoint is deleted.",
                "operationId": "endpoint.deleted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.deleted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDeletedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.deleted",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.disabled": {
            "post": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "operationId": "endpoint.disabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier",
                                    "failSince": "2022-11-06T15:04:05Z",
                                    "trigger": "automatic"
                                },
                                "type": "endpoint.disabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDisabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.disabled",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.enabled": {
            "post": {
                "description": "Sent when an endpoint has been enabled.",
                "operationId": "endpoint.enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.enabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointEnabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.enabled",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "endpoint.updated": {
            "post": {
                "description": "Sent when an endpoint is updated.",
                "operationId": "endpoint.updated",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier"
                                },
                                "type": "endpoint.updated"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/EndpointUpdatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "endpoint.updated",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "ingest.endpoint.disabled": {
            "post": {
                "description": "Sent when an ingest endpoint has been automatically disabled after continuous failures, or manually via an API call.",
                "operationId": "ingest.endpoint.disabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "endpointUid": "unique-endpoint-identifier",
                                    "failSince": "2022-11-06T15:04:05Z",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr",
                                    "trigger": "automatic"
                                },
                                "type": "ingest.endpoint.disabled"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestEndpointDisabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.endpoint.disabled",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "ingest.message.attempt.exhausted": {
            "post": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "operationId": "ingest.message.attempt.exhausted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr"
                                },
                                "type": "ingest.message.attempt.exhausted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestMessageAttemptExhaustedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.message.attempt.exhausted",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "ingest.message.attempt.failing": {
            "post": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `ingest.message.attempt.exhausted` which is sent after the last failure.",
                "operationId": "ingest.message.attempt.failing",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr"
                                },
                                "type": "ingest.message.attempt.failing"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestMessageAttemptFailingEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.message.attempt.failing",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "ingest.message.attempt.recovered": {
            "post": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "operationId": "ingest.message.attempt.recovered",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 200,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "sourceId": "src_30HT9jb8WZXKVWIO44ZDr"
                                },
                                "type": "ingest.message.attempt.recovered"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/IngestMessageAttemptRecoveredEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "ingest.message.attempt.recovered",
                "tags": [
                    "Webhook"
                ]
            }
        },
        "message.attempt.exhausted": {
            "post": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "operationId": "message.attempt.exhausted",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.exhausted"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptExhaustedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.exhausted",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "message.attempt.failing": {
            "post": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
                "operationId": "message.attempt.failing",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 500,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.failing"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptFailingEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.failing",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        },
        "message.attempt.recovered": {
            "post": {
                "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
                "operationId": "message.attempt.recovered",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "data": {
                                    "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "appUid": "unique-app-identifier",
                                    "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                    "lastAttempt": {
                                        "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                                        "responseStatusCode": 200,
                                        "timestamp": "2022-11-06T15:04:05Z"
                                    },
                                    "msgEventId": "unique-msg-identifier",
                                    "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                                },
                                "type": "message.attempt.recovered"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptRecoveredEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "message.attempt.recovered",
                "tags": [
                    "Webhook"
                ],
                "x-svix-group-name": "dispatch"
            }
        }
    }
}
